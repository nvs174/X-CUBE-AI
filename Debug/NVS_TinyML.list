
NVS_TinyML.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000099c  08009100  08009100  0000a100  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a9c  08009a9c  0000b868  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009a9c  08009a9c  0000aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aa4  08009aa4  0000b868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aa4  08009aa4  0000aaa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009aa8  08009aa8  0000aaa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000868  20000000  08009aac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000868  0800a314  0000b868  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  20000be8  0800a314  0000bbe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b868  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd70  00000000  00000000  0000b898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d2  00000000  00000000  00019608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  0001b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090c  00000000  00000000  0001c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018695  00000000  00000000  0001cbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e055  00000000  00000000  00035241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b14f  00000000  00000000  00043296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000de3e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000430c  00000000  00000000  000de46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e2778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000868 	.word	0x20000868
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080090e8 	.word	0x080090e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000086c 	.word	0x2000086c
 80001dc:	080090e8 	.word	0x080090e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b0d4      	sub	sp, #336	@ 0x150
 8000f88:	af02      	add	r7, sp, #8




	char buf[50]; // буфер для строк вывода данных
	int buf_len = 0; //
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	//тип данных - знаковый 8-битный целочисленный
	AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

	// Инициализация дескриптора модели синусоиды значением NULL,
	//указывающим на отсутствие активной модели
	ai_handle sine_model = AI_HANDLE_NULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	673b      	str	r3, [r7, #112]	@ 0x70

	// Массив буферов для хранения входных данных модели,
	//количество буферов определяется константой AI_SINE_MODEL_IN_NUM
	ai_buffer ai_input[AI_SINE_MODEL_IN_NUM];
	ai_input[0] = ai_sine_model_inputs_get(AI_HANDLE_NULL, NULL)[0];
 8000f94:	2100      	movs	r1, #0
 8000f96:	2000      	movs	r0, #0
 8000f98:	f003 fca2 	bl	80048e0 <ai_sine_model_inputs_get>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000fa2:	461d      	mov	r5, r3
 8000fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	// Массив буферов для хранения выходных данных модели, инициализированный
	//значением AI_SINE_MODEL_OUT,
	//количество буферов определяется константой AI_SINE_MODEL_OUT_NUM

	ai_buffer ai_output[AI_SINE_MODEL_IN_NUM];
	ai_output[0] = ai_sine_model_outputs_get(AI_HANDLE_NULL, NULL)[0];
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f003 fcae 	bl	8004914 <ai_sine_model_outputs_get>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000fbe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000fc2:	461c      	mov	r4, r3
 8000fc4:	4615      	mov	r5, r2
 8000fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;

	// Инициализация структуры параметров сети
		ai_network_params ai_params = {
			// Получение весов модели синусоиды и установка их в параметры сети
			AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 8000fd2:	f003 fd6d 	bl	8004ab0 <ai_sine_model_data_weights_get>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000fdc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fd30 	bl	8004a48 <ai_sine_model_data_weights_buffer_get>

			// Указание буфера активации для хранения
			//промежуточных данных во время выполнения модели
			AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
 8000fe8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000fec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000ff0:	331c      	adds	r3, #28
 8000ff2:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 fcf1 	bl	80049e0 <ai_sine_model_data_activations_buffer_get>
	};

	ai_input[0].data = AI_HANDLE_PTR(in_data);  // Установка указателя на входные данные
 8000ffe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001002:	65bb      	str	r3, [r7, #88]	@ 0x58
	ai_input[0].size = sizeof(in_data);          // Установка размера входных данных, замените на актуальный размер
 8001004:	2304      	movs	r3, #4
 8001006:	667b      	str	r3, [r7, #100]	@ 0x64
	ai_input[0].format = AI_BUFFER_FORMAT_FLOAT; // Установка формата данных (например, float, если это необходимо)
 8001008:	4b81      	ldr	r3, [pc, #516]	@ (8001210 <main+0x28c>)
 800100a:	657b      	str	r3, [r7, #84]	@ 0x54

	ai_output[0].data = AI_HANDLE_PTR(out_data); // Установка указателя на выходные данные
 800100c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001010:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001014:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001018:	605a      	str	r2, [r3, #4]
	ai_output[0].size = sizeof(out_data);         // Установка размера выходных данных
 800101a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800101e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001022:	2204      	movs	r2, #4
 8001024:	611a      	str	r2, [r3, #16]
	ai_output[0].format = AI_BUFFER_FORMAT_FLOAT; // Установка формата данных
 8001026:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800102a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800102e:	4a78      	ldr	r2, [pc, #480]	@ (8001210 <main+0x28c>)
 8001030:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f000 fca7 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f90b 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 f9e7 	bl	800140c <MX_GPIO_Init>
  MX_DMA_Init();
 800103e:	f000 f9bd 	bl	80013bc <MX_DMA_Init>
  MX_TIM11_Init();
 8001042:	f000 f96d 	bl	8001320 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8001046:	f000 f98f 	bl	8001368 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11);
 800104a:	4872      	ldr	r0, [pc, #456]	@ (8001214 <main+0x290>)
 800104c:	f002 f84c 	bl	80030e8 <HAL_TIM_Base_Start>
  //Взводим прием данных по USART 1 раз
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, MAX_MODBUS_FRAME_SIZE);
 8001050:	220f      	movs	r2, #15
 8001052:	4971      	ldr	r1, [pc, #452]	@ (8001218 <main+0x294>)
 8001054:	4871      	ldr	r0, [pc, #452]	@ (800121c <main+0x298>)
 8001056:	f002 fa08 	bl	800346a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800105a:	4b71      	ldr	r3, [pc, #452]	@ (8001220 <main+0x29c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b6f      	ldr	r3, [pc, #444]	@ (8001220 <main+0x29c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0208 	bic.w	r2, r2, #8
 8001068:	601a      	str	r2, [r3, #0]
  //buf_len = sprintf(buf, "\r\n\r\nStm32 x-cube-ai test\r\n");
  //HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 800106a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fc1f 	bl	80048b4 <ai_sine_model_create>
 8001076:	4603      	mov	r3, r0
 8001078:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

  // проверка на ошибку
  if (ai_err.type != AI_ERROR_NONE)
 800107c:	f897 30fc 	ldrb.w	r3, [r7, #252]	@ 0xfc
 8001080:	2b00      	cmp	r3, #0
 8001082:	d009      	beq.n	8001098 <main+0x114>
  {
	  buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8001084:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001088:	4966      	ldr	r1, [pc, #408]	@ (8001224 <main+0x2a0>)
 800108a:	4618      	mov	r0, r3
 800108c:	f005 ff9a 	bl	8006fc4 <siprintf>
 8001090:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
	  //HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
	  while(1);
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <main+0x110>
  }

  if (!ai_sine_model_init(sine_model, &ai_params))
 8001098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800109a:	463a      	mov	r2, r7
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fc52 	bl	8004948 <ai_sine_model_init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f083 0301 	eor.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d009      	beq.n	80010c4 <main+0x140>
  {
	  buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 80010b0:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80010b4:	495c      	ldr	r1, [pc, #368]	@ (8001228 <main+0x2a4>)
 80010b6:	4618      	mov	r0, r3
 80010b8:	f005 ff84 	bl	8006fc4 <siprintf>
 80010bc:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
	  //HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
	  while(1);
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <main+0x13c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flagMeasure)
 80010c4:	4b59      	ldr	r3, [pc, #356]	@ (800122c <main+0x2a8>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0fb      	beq.n	80010c4 <main+0x140>
	  in_data[4] = (ai_float)3.927f;
	  in_data[5] = (ai_float)4.712f;
	  in_data[6] = (ai_float)5.498f;
	  in_data[7] = (ai_float)6.283f;*/
	  // присваиваем значение элементам массива, в данном случае только один элемент массива
	  for(uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80010d2:	e013      	b.n	80010fc <main+0x178>
	  {
		  // Присваиваем каждому элементу массива in_data значение 2.0
		  ((ai_float *)in_data)[i] = (ai_float)sum;
 80010d4:	4b56      	ldr	r3, [pc, #344]	@ (8001230 <main+0x2ac>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80010de:	0089      	lsls	r1, r1, #2
 80010e0:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 80010e4:	1844      	adds	r4, r0, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fd65 	bl	8000bb8 <__aeabi_d2f>
 80010ee:	4603      	mov	r3, r0
 80010f0:	6023      	str	r3, [r4, #0]
	  for(uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80010f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80010f6:	3301      	adds	r3, #1
 80010f8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80010fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0e7      	beq.n	80010d4 <main+0x150>
	  }

	  // Сохраняем текущее значение счетчика таймера в переменной timestamp
	  timestamp = htim11.Instance->CNT;
 8001104:	4b43      	ldr	r3, [pc, #268]	@ (8001214 <main+0x290>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

	  // Запускаем модель с входными данными ai_input и получаем выходные данные в ai_output
	  nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 800110e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001110:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001114:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8001118:	4618      	mov	r0, r3
 800111a:	f003 fc51 	bl	80049c0 <ai_sine_model_run>
 800111e:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138

	  // Проверяем, успешно ли выполнен запуск модели
	  if (nbatch != 1)
 8001122:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001126:	2b01      	cmp	r3, #1
 8001128:	d007      	beq.n	800113a <main+0x1b6>
	  {
	      // Если запуск не удался, формируем сообщение об ошибке
	      buf_len = sprintf(buf, "Error: could not run interface\r\n");
 800112a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800112e:	4941      	ldr	r1, [pc, #260]	@ (8001234 <main+0x2b0>)
 8001130:	4618      	mov	r0, r3
 8001132:	f005 ff47 	bl	8006fc4 <siprintf>
 8001136:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
	      // Передаем сообщение по UART (закомментировано)
	      // HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
	  }

	  // Извлекаем первое значение из выходных данных out_data
	  y_val = ((float*) out_data)[0];
 800113a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a3d      	ldr	r2, [pc, #244]	@ (8001238 <main+0x2b4>)
 8001142:	6013      	str	r3, [r2, #0]
	  int i = y_val * 1000;
 8001144:	4b3c      	ldr	r3, [pc, #240]	@ (8001238 <main+0x2b4>)
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800123c <main+0x2b8>
 800114e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001152:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001156:	ee17 3a90 	vmov	r3, s15
 800115a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	  tx_buffer[0] =  i / 100 + '0';
 800115e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001162:	4a37      	ldr	r2, [pc, #220]	@ (8001240 <main+0x2bc>)
 8001164:	fb82 1203 	smull	r1, r2, r2, r3
 8001168:	1152      	asrs	r2, r2, #5
 800116a:	17db      	asrs	r3, r3, #31
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	3330      	adds	r3, #48	@ 0x30
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b33      	ldr	r3, [pc, #204]	@ (8001244 <main+0x2c0>)
 8001176:	701a      	strb	r2, [r3, #0]
	  tx_buffer[1] = ( i / 10) % 10 + '0';
 8001178:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800117c:	4a32      	ldr	r2, [pc, #200]	@ (8001248 <main+0x2c4>)
 800117e:	fb82 1203 	smull	r1, r2, r2, r3
 8001182:	1092      	asrs	r2, r2, #2
 8001184:	17db      	asrs	r3, r3, #31
 8001186:	1ad2      	subs	r2, r2, r3
 8001188:	4b2f      	ldr	r3, [pc, #188]	@ (8001248 <main+0x2c4>)
 800118a:	fb83 1302 	smull	r1, r3, r3, r2
 800118e:	1099      	asrs	r1, r3, #2
 8001190:	17d3      	asrs	r3, r2, #31
 8001192:	1ac9      	subs	r1, r1, r3
 8001194:	460b      	mov	r3, r1
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	1ad1      	subs	r1, r2, r3
 800119e:	b2cb      	uxtb	r3, r1
 80011a0:	3330      	adds	r3, #48	@ 0x30
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <main+0x2c0>)
 80011a6:	705a      	strb	r2, [r3, #1]
	  tx_buffer[2] =  i % 10 + '0';
 80011a8:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80011ac:	4b26      	ldr	r3, [pc, #152]	@ (8001248 <main+0x2c4>)
 80011ae:	fb83 1302 	smull	r1, r3, r3, r2
 80011b2:	1099      	asrs	r1, r3, #2
 80011b4:	17d3      	asrs	r3, r2, #31
 80011b6:	1ac9      	subs	r1, r1, r3
 80011b8:	460b      	mov	r3, r1
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	1ad1      	subs	r1, r2, r3
 80011c2:	b2cb      	uxtb	r3, r1
 80011c4:	3330      	adds	r3, #48	@ 0x30
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <main+0x2c0>)
 80011ca:	709a      	strb	r2, [r3, #2]
	  buf_len = sprintf(buf, "Output: %f | Duration: %lu\r\n", y_val, htim11.Instance->CNT - timestamp);
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <main+0x2b4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9c1 	bl	8000558 <__aeabi_f2d>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	490e      	ldr	r1, [pc, #56]	@ (8001214 <main+0x290>)
 80011dc:	6809      	ldr	r1, [r1, #0]
 80011de:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 80011e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80011e4:	1a41      	subs	r1, r0, r1
 80011e6:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 80011ea:	9100      	str	r1, [sp, #0]
 80011ec:	4917      	ldr	r1, [pc, #92]	@ (800124c <main+0x2c8>)
 80011ee:	f005 fee9 	bl	8006fc4 <siprintf>
 80011f2:	f8c7 0140 	str.w	r0, [r7, #320]	@ 0x140
	  HAL_UART_Transmit(&huart2, (uint8_t*) buf, buf_len, 100);
 80011f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8001200:	2364      	movs	r3, #100	@ 0x64
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <main+0x298>)
 8001204:	f002 f8a6 	bl	8003354 <HAL_UART_Transmit>
	  flagMeasure = false;
 8001208:	4b08      	ldr	r3, [pc, #32]	@ (800122c <main+0x2a8>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
	  if (flagMeasure)
 800120e:	e759      	b.n	80010c4 <main+0x140>
 8001210:	00821040 	.word	0x00821040
 8001214:	20000884 	.word	0x20000884
 8001218:	200009d4 	.word	0x200009d4
 800121c:	200008cc 	.word	0x200008cc
 8001220:	20000914 	.word	0x20000914
 8001224:	08009100 	.word	0x08009100
 8001228:	08009128 	.word	0x08009128
 800122c:	20000a04 	.word	0x20000a04
 8001230:	200009f8 	.word	0x200009f8
 8001234:	0800914c 	.word	0x0800914c
 8001238:	20000a00 	.word	0x20000a00
 800123c:	447a0000 	.word	0x447a0000
 8001240:	51eb851f 	.word	0x51eb851f
 8001244:	200009e4 	.word	0x200009e4
 8001248:	66666667 	.word	0x66666667
 800124c:	08009170 	.word	0x08009170

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b094      	sub	sp, #80	@ 0x50
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	2230      	movs	r2, #48	@ 0x30
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f005 ff15 	bl	800708e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <SystemClock_Config+0xc8>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <SystemClock_Config+0xc8>)
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001282:	6413      	str	r3, [r2, #64]	@ 0x40
 8001284:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <SystemClock_Config+0xc8>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	4b21      	ldr	r3, [pc, #132]	@ (800131c <SystemClock_Config+0xcc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a20      	ldr	r2, [pc, #128]	@ (800131c <SystemClock_Config+0xcc>)
 800129a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b1e      	ldr	r3, [pc, #120]	@ (800131c <SystemClock_Config+0xcc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	2302      	movs	r3, #2
 80012ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b4:	2310      	movs	r3, #16
 80012b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b8:	2302      	movs	r3, #2
 80012ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012bc:	2300      	movs	r3, #0
 80012be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c0:	2308      	movs	r3, #8
 80012c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80012c4:	2350      	movs	r3, #80	@ 0x50
 80012c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012cc:	2307      	movs	r3, #7
 80012ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 fa5f 	bl	8002798 <HAL_RCC_OscConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e0:	f000 f98c 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e4:	230f      	movs	r3, #15
 80012e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e8:	2302      	movs	r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2102      	movs	r1, #2
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fcc1 	bl	8002c88 <HAL_RCC_ClockConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800130c:	f000 f976 	bl	80015fc <Error_Handler>
  }
}
 8001310:	bf00      	nop
 8001312:	3750      	adds	r7, #80	@ 0x50
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001324:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <MX_TIM11_Init+0x40>)
 8001326:	4a0f      	ldr	r2, [pc, #60]	@ (8001364 <MX_TIM11_Init+0x44>)
 8001328:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 80-1;
 800132a:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <MX_TIM11_Init+0x40>)
 800132c:	224f      	movs	r2, #79	@ 0x4f
 800132e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <MX_TIM11_Init+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001336:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <MX_TIM11_Init+0x40>)
 8001338:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <MX_TIM11_Init+0x40>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_TIM11_Init+0x40>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_TIM11_Init+0x40>)
 800134c:	f001 fe7c 	bl	8003048 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001356:	f000 f951 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000884 	.word	0x20000884
 8001364:	40014800 	.word	0x40014800

08001368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <MX_USART2_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f001 ff88 	bl	80032b4 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 f927 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200008cc 	.word	0x200008cc
 80013b8:	40004400 	.word	0x40004400

080013bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <MX_DMA_Init+0x4c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001408 <MX_DMA_Init+0x4c>)
 80013cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <MX_DMA_Init+0x4c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2010      	movs	r0, #16
 80013e4:	f000 fc1b 	bl	8001c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013e8:	2010      	movs	r0, #16
 80013ea:	f000 fc34 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2011      	movs	r0, #17
 80013f4:	f000 fc13 	bl	8001c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013f8:	2011      	movs	r0, #17
 80013fa:	f000 fc2c 	bl	8001c56 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <MX_GPIO_Init+0x4c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a0f      	ldr	r2, [pc, #60]	@ (8001458 <MX_GPIO_Init+0x4c>)
 800141c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <MX_GPIO_Init+0x4c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_GPIO_Init+0x4c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a08      	ldr	r2, [pc, #32]	@ (8001458 <MX_GPIO_Init+0x4c>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_GPIO_Init+0x4c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
  {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
	{
			//mb_tx_cmplt = true;
		}
  }
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001474:	b08e      	sub	sp, #56	@ 0x38
 8001476:	af00      	add	r7, sp, #0
 8001478:	6178      	str	r0, [r7, #20]
 800147a:	460b      	mov	r3, r1
 800147c:	827b      	strh	r3, [r7, #18]
	if(huart->Instance == USART2)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a57      	ldr	r2, [pc, #348]	@ (80015e0 <HAL_UARTEx_RxEventCallback+0x170>)
 8001484:	4293      	cmp	r3, r2
 8001486:	f040 80a5 	bne.w	80015d4 <HAL_UARTEx_RxEventCallback+0x164>
	{

		long long all = 0; // Для целой части
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		double half = 0.0; // Для дробной части
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		int divisor = 1; // Делитель для дробной части
 80014a2:	2301      	movs	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
		bool flagHalf = true; // Флаг для определения, в какой части находимся
 80014a6:	2301      	movs	r3, #1
 80014a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		for (int i = 0; Size - 2 > i; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	e061      	b.n	8001576 <HAL_UARTEx_RxEventCallback+0x106>
		{
			if (rx_buffer[i] == '.')
 80014b2:	4a4c      	ldr	r2, [pc, #304]	@ (80015e4 <HAL_UARTEx_RxEventCallback+0x174>)
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	4413      	add	r3, r2
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80014bc:	d103      	bne.n	80014c6 <HAL_UARTEx_RxEventCallback+0x56>
			{
				flagHalf = false; // Переключаемся на дробную часть
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				continue; // Переходим к следующему символу
 80014c4:	e054      	b.n	8001570 <HAL_UARTEx_RxEventCallback+0x100>
			}

			if (flagHalf)
 80014c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d02d      	beq.n	800152a <HAL_UARTEx_RxEventCallback+0xba>
			{
				all = all * 10 + (rx_buffer[i] - '0'); // Обрабатываем целую часть
 80014ce:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 80014d2:	4642      	mov	r2, r8
 80014d4:	464b      	mov	r3, r9
 80014d6:	f04f 0000 	mov.w	r0, #0
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	0099      	lsls	r1, r3, #2
 80014e0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014e4:	0090      	lsls	r0, r2, #2
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	eb12 0408 	adds.w	r4, r2, r8
 80014ee:	eb43 0509 	adc.w	r5, r3, r9
 80014f2:	1923      	adds	r3, r4, r4
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	eb45 0305 	adc.w	r3, r5, r5
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001500:	4622      	mov	r2, r4
 8001502:	462b      	mov	r3, r5
 8001504:	4837      	ldr	r0, [pc, #220]	@ (80015e4 <HAL_UARTEx_RxEventCallback+0x174>)
 8001506:	69f9      	ldr	r1, [r7, #28]
 8001508:	4401      	add	r1, r0
 800150a:	7809      	ldrb	r1, [r1, #0]
 800150c:	3930      	subs	r1, #48	@ 0x30
 800150e:	17c8      	asrs	r0, r1, #31
 8001510:	468a      	mov	sl, r1
 8001512:	4683      	mov	fp, r0
 8001514:	eb12 010a 	adds.w	r1, r2, sl
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	eb43 030b 	adc.w	r3, r3, fp
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001524:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8001528:	e022      	b.n	8001570 <HAL_UARTEx_RxEventCallback+0x100>
			}
			else
			{
				half = half * 10 + (rx_buffer[i] - '0'); // Обрабатываем дробную часть
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b2e      	ldr	r3, [pc, #184]	@ (80015e8 <HAL_UARTEx_RxEventCallback+0x178>)
 8001530:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001534:	f7ff f868 	bl	8000608 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4690      	mov	r8, r2
 800153e:	4699      	mov	r9, r3
 8001540:	4a28      	ldr	r2, [pc, #160]	@ (80015e4 <HAL_UARTEx_RxEventCallback+0x174>)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	3b30      	subs	r3, #48	@ 0x30
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe fff2 	bl	8000534 <__aeabi_i2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4640      	mov	r0, r8
 8001556:	4649      	mov	r1, r9
 8001558:	f7fe fea0 	bl	800029c <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
				divisor *= 10; // Увеличиваем делитель
 8001564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int i = 0; Size - 2 > i; i++)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	3301      	adds	r3, #1
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	8a7b      	ldrh	r3, [r7, #18]
 8001578:	3b02      	subs	r3, #2
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	429a      	cmp	r2, r3
 800157e:	db98      	blt.n	80014b2 <HAL_UARTEx_RxEventCallback+0x42>
			}
		}

		half /= divisor; // Приводим дробную часть к правильному виду
 8001580:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001582:	f7fe ffd7 	bl	8000534 <__aeabi_i2d>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800158e:	f7ff f965 	bl	800085c <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		sum = (double)all + half; // Используем double для
 800159a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800159e:	f7ff f805 	bl	80005ac <__aeabi_l2d>
 80015a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015a6:	f7fe fe79 	bl	800029c <__adddf3>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	490f      	ldr	r1, [pc, #60]	@ (80015ec <HAL_UARTEx_RxEventCallback+0x17c>)
 80015b0:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, 20);
 80015b4:	2214      	movs	r2, #20
 80015b6:	490b      	ldr	r1, [pc, #44]	@ (80015e4 <HAL_UARTEx_RxEventCallback+0x174>)
 80015b8:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <HAL_UARTEx_RxEventCallback+0x180>)
 80015ba:	f001 ff56 	bl	800346a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <HAL_UARTEx_RxEventCallback+0x184>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_UARTEx_RxEventCallback+0x184>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0208 	bic.w	r2, r2, #8
 80015cc:	601a      	str	r2, [r3, #0]
		flagMeasure = true;
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_UARTEx_RxEventCallback+0x188>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
	}
}
 80015d4:	bf00      	nop
 80015d6:	3738      	adds	r7, #56	@ 0x38
 80015d8:	46bd      	mov	sp, r7
 80015da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015de:	bf00      	nop
 80015e0:	40004400 	.word	0x40004400
 80015e4:	200009d4 	.word	0x200009d4
 80015e8:	40240000 	.word	0x40240000
 80015ec:	200009f8 	.word	0x200009f8
 80015f0:	200008cc 	.word	0x200008cc
 80015f4:	20000914 	.word	0x20000914
 80015f8:	20000a04 	.word	0x20000a04

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <Error_Handler+0x8>

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <HAL_MspInit+0x4c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	4a0f      	ldr	r2, [pc, #60]	@ (8001654 <HAL_MspInit+0x4c>)
 8001618:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800161c:	6453      	str	r3, [r2, #68]	@ 0x44
 800161e:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <HAL_MspInit+0x4c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <HAL_MspInit+0x4c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <HAL_MspInit+0x4c>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	@ 0x40
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_MspInit+0x4c>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800

08001658 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0b      	ldr	r2, [pc, #44]	@ (8001694 <HAL_TIM_Base_MspInit+0x3c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d10d      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM11_MspInit 0 */

    /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <HAL_TIM_Base_MspInit+0x40>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	4a09      	ldr	r2, [pc, #36]	@ (8001698 <HAL_TIM_Base_MspInit+0x40>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001678:	6453      	str	r3, [r2, #68]	@ 0x44
 800167a:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <HAL_TIM_Base_MspInit+0x40>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM11_MspInit 1 */

  }

}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40014800 	.word	0x40014800
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	@ 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a4b      	ldr	r2, [pc, #300]	@ (80017e8 <HAL_UART_MspInit+0x14c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	f040 8090 	bne.w	80017e0 <HAL_UART_MspInit+0x144>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	4b49      	ldr	r3, [pc, #292]	@ (80017ec <HAL_UART_MspInit+0x150>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	4a48      	ldr	r2, [pc, #288]	@ (80017ec <HAL_UART_MspInit+0x150>)
 80016ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d0:	4b46      	ldr	r3, [pc, #280]	@ (80017ec <HAL_UART_MspInit+0x150>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	4b42      	ldr	r3, [pc, #264]	@ (80017ec <HAL_UART_MspInit+0x150>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e4:	4a41      	ldr	r2, [pc, #260]	@ (80017ec <HAL_UART_MspInit+0x150>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ec:	4b3f      	ldr	r3, [pc, #252]	@ (80017ec <HAL_UART_MspInit+0x150>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016f8:	230c      	movs	r3, #12
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001708:	2307      	movs	r3, #7
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	4837      	ldr	r0, [pc, #220]	@ (80017f0 <HAL_UART_MspInit+0x154>)
 8001714:	f000 febc 	bl	8002490 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001718:	4b36      	ldr	r3, [pc, #216]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 800171a:	4a37      	ldr	r2, [pc, #220]	@ (80017f8 <HAL_UART_MspInit+0x15c>)
 800171c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800171e:	4b35      	ldr	r3, [pc, #212]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 8001720:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001724:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001726:	4b33      	ldr	r3, [pc, #204]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800172c:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001732:	4b30      	ldr	r3, [pc, #192]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 8001734:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001738:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800173a:	4b2e      	ldr	r3, [pc, #184]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001740:	4b2c      	ldr	r3, [pc, #176]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001746:	4b2b      	ldr	r3, [pc, #172]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 8001748:	2200      	movs	r2, #0
 800174a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800174c:	4b29      	ldr	r3, [pc, #164]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 800174e:	2200      	movs	r2, #0
 8001750:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001752:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001758:	4826      	ldr	r0, [pc, #152]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 800175a:	f000 fa97 	bl	8001c8c <HAL_DMA_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001764:	f7ff ff4a 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a22      	ldr	r2, [pc, #136]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 800176c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800176e:	4a21      	ldr	r2, [pc, #132]	@ (80017f4 <HAL_UART_MspInit+0x158>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001774:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <HAL_UART_MspInit+0x160>)
 8001776:	4a22      	ldr	r2, [pc, #136]	@ (8001800 <HAL_UART_MspInit+0x164>)
 8001778:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <HAL_UART_MspInit+0x160>)
 800177c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001780:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001782:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <HAL_UART_MspInit+0x160>)
 8001784:	2240      	movs	r2, #64	@ 0x40
 8001786:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001788:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <HAL_UART_MspInit+0x160>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800178e:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <HAL_UART_MspInit+0x160>)
 8001790:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001794:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001796:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <HAL_UART_MspInit+0x160>)
 8001798:	2200      	movs	r2, #0
 800179a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179c:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <HAL_UART_MspInit+0x160>)
 800179e:	2200      	movs	r2, #0
 80017a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017a2:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <HAL_UART_MspInit+0x160>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017a8:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <HAL_UART_MspInit+0x160>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ae:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <HAL_UART_MspInit+0x160>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017b4:	4811      	ldr	r0, [pc, #68]	@ (80017fc <HAL_UART_MspInit+0x160>)
 80017b6:	f000 fa69 	bl	8001c8c <HAL_DMA_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80017c0:	f7ff ff1c 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <HAL_UART_MspInit+0x160>)
 80017c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80017ca:	4a0c      	ldr	r2, [pc, #48]	@ (80017fc <HAL_UART_MspInit+0x160>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	2026      	movs	r0, #38	@ 0x26
 80017d6:	f000 fa22 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017da:	2026      	movs	r0, #38	@ 0x26
 80017dc:	f000 fa3b 	bl	8001c56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	@ 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40004400 	.word	0x40004400
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	20000914 	.word	0x20000914
 80017f8:	40026088 	.word	0x40026088
 80017fc:	20000974 	.word	0x20000974
 8001800:	400260a0 	.word	0x400260a0

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <NMI_Handler+0x4>

0800180c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <MemManage_Handler+0x4>

0800181c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <UsageFault_Handler+0x4>

0800182c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185a:	f000 f8e5 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <DMA1_Stream5_IRQHandler+0x10>)
 800186a:	f000 fba7 	bl	8001fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000914 	.word	0x20000914

08001878 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <DMA1_Stream6_IRQHandler+0x10>)
 800187e:	f000 fb9d 	bl	8001fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000974 	.word	0x20000974

0800188c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <USART2_IRQHandler+0x10>)
 8001892:	f001 fe47 	bl	8003524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200008cc 	.word	0x200008cc

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	@ (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f005 fc40 	bl	8007154 <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	220c      	movs	r2, #12
 80018d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	@ (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20020000 	.word	0x20020000
 8001900:	00000800 	.word	0x00000800
 8001904:	20000a08 	.word	0x20000a08
 8001908:	20000be8 	.word	0x20000be8

0800190c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <SystemInit+0x20>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001916:	4a05      	ldr	r2, [pc, #20]	@ (800192c <SystemInit+0x20>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001934:	f7ff ffea 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	@ (8001970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	@ (800197c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195e:	f005 fbff 	bl	8007160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001962:	f7ff fb0f 	bl	8000f84 <main>
  bx  lr    
 8001966:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	20000868 	.word	0x20000868
  ldr r2, =_sidata
 8001974:	08009aac 	.word	0x08009aac
  ldr r2, =_sbss
 8001978:	20000868 	.word	0x20000868
  ldr r4, =_ebss
 800197c:	20000be8 	.word	0x20000be8

08001980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <HAL_Init+0x40>)
 800198e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <HAL_Init+0x40>)
 800199a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800199e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <HAL_Init+0x40>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f92b 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	200f      	movs	r0, #15
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fe26 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f943 	bl	8001c72 <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 f90b 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	@ (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	@ (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	20000a0c 	.word	0x20000a0c

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000a0c 	.word	0x20000a0c

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	@ (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	@ (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	@ (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	@ 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ff8e 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff29 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff3e 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff8e 	bl	8001b5c <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5d 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff31 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa2 	bl	8001bc4 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff feda 	bl	8001a50 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e099      	b.n	8001ddc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc8:	e00f      	b.n	8001cea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cca:	f7ff fec1 	bl	8001a50 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d908      	bls.n	8001cea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e078      	b.n	8001ddc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e8      	bne.n	8001cca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4b38      	ldr	r3, [pc, #224]	@ (8001de4 <HAL_DMA_Init+0x158>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d107      	bne.n	8001d54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f023 0307 	bic.w	r3, r3, #7
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d117      	bne.n	8001dae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00e      	beq.n	8001dae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fb01 	bl	8002398 <DMA_CheckFifoParam>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2240      	movs	r2, #64	@ 0x40
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001daa:	2301      	movs	r3, #1
 8001dac:	e016      	b.n	8001ddc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fab8 	bl	800232c <DMA_CalcBaseAndBitshift>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc4:	223f      	movs	r2, #63	@ 0x3f
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	f010803f 	.word	0xf010803f

08001de8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_DMA_Start_IT+0x26>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e040      	b.n	8001e90 <HAL_DMA_Start_IT+0xa8>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d12f      	bne.n	8001e82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fa4a 	bl	80022d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e40:	223f      	movs	r2, #63	@ 0x3f
 8001e42:	409a      	lsls	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0216 	orr.w	r2, r2, #22
 8001e56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0208 	orr.w	r2, r2, #8
 8001e6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e005      	b.n	8001e8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ea6:	f7ff fdd3 	bl	8001a50 <HAL_GetTick>
 8001eaa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d008      	beq.n	8001eca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2280      	movs	r2, #128	@ 0x80
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e052      	b.n	8001f70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0216 	bic.w	r2, r2, #22
 8001ed8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ee8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <HAL_DMA_Abort+0x62>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0208 	bic.w	r2, r2, #8
 8001f08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1a:	e013      	b.n	8001f44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1c:	f7ff fd98 	bl	8001a50 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d90c      	bls.n	8001f44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e015      	b.n	8001f70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1e4      	bne.n	8001f1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f56:	223f      	movs	r2, #63	@ 0x3f
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d004      	beq.n	8001f96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2280      	movs	r2, #128	@ 0x80
 8001f90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00c      	b.n	8001fb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2205      	movs	r2, #5
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fc8:	4b8e      	ldr	r3, [pc, #568]	@ (8002204 <HAL_DMA_IRQHandler+0x248>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a8e      	ldr	r2, [pc, #568]	@ (8002208 <HAL_DMA_IRQHandler+0x24c>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0a9b      	lsrs	r3, r3, #10
 8001fd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d01a      	beq.n	8002028 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0204 	bic.w	r2, r2, #4
 800200e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002014:	2208      	movs	r2, #8
 8002016:	409a      	lsls	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202c:	2201      	movs	r2, #1
 800202e:	409a      	lsls	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d012      	beq.n	800205e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204a:	2201      	movs	r2, #1
 800204c:	409a      	lsls	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002056:	f043 0202 	orr.w	r2, r3, #2
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002062:	2204      	movs	r2, #4
 8002064:	409a      	lsls	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d012      	beq.n	8002094 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00b      	beq.n	8002094 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002080:	2204      	movs	r2, #4
 8002082:	409a      	lsls	r2, r3
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208c:	f043 0204 	orr.w	r2, r3, #4
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002098:	2210      	movs	r2, #16
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d043      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d03c      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b6:	2210      	movs	r2, #16
 80020b8:	409a      	lsls	r2, r3
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d018      	beq.n	80020fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d108      	bne.n	80020ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d024      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
 80020ea:	e01f      	b.n	800212c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
 80020fc:	e016      	b.n	800212c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0208 	bic.w	r2, r2, #8
 800211a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002130:	2220      	movs	r2, #32
 8002132:	409a      	lsls	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 808f 	beq.w	800225c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8087 	beq.w	800225c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	2220      	movs	r2, #32
 8002154:	409a      	lsls	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b05      	cmp	r3, #5
 8002164:	d136      	bne.n	80021d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0216 	bic.w	r2, r2, #22
 8002174:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002184:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d103      	bne.n	8002196 <HAL_DMA_IRQHandler+0x1da>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0208 	bic.w	r2, r2, #8
 80021a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021aa:	223f      	movs	r2, #63	@ 0x3f
 80021ac:	409a      	lsls	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d07e      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
        }
        return;
 80021d2:	e079      	b.n	80022c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01d      	beq.n	800221e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10d      	bne.n	800220c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d031      	beq.n	800225c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
 8002200:	e02c      	b.n	800225c <HAL_DMA_IRQHandler+0x2a0>
 8002202:	bf00      	nop
 8002204:	20000000 	.word	0x20000000
 8002208:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d023      	beq.n	800225c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e01e      	b.n	800225c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10f      	bne.n	800224c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0210 	bic.w	r2, r2, #16
 800223a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002260:	2b00      	cmp	r3, #0
 8002262:	d032      	beq.n	80022ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d022      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2205      	movs	r2, #5
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3301      	adds	r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	d307      	bcc.n	80022a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f2      	bne.n	8002288 <HAL_DMA_IRQHandler+0x2cc>
 80022a2:	e000      	b.n	80022a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
 80022c6:	e000      	b.n	80022ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80022c8:	bf00      	nop
    }
  }
}
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b40      	cmp	r3, #64	@ 0x40
 80022fc:	d108      	bne.n	8002310 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800230e:	e007      	b.n	8002320 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	60da      	str	r2, [r3, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	3b10      	subs	r3, #16
 800233c:	4a14      	ldr	r2, [pc, #80]	@ (8002390 <DMA_CalcBaseAndBitshift+0x64>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002346:	4a13      	ldr	r2, [pc, #76]	@ (8002394 <DMA_CalcBaseAndBitshift+0x68>)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d909      	bls.n	800236e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	1d1a      	adds	r2, r3, #4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	659a      	str	r2, [r3, #88]	@ 0x58
 800236c:	e007      	b.n	800237e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	aaaaaaab 	.word	0xaaaaaaab
 8002394:	080091d8 	.word	0x080091d8

08002398 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11f      	bne.n	80023f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d856      	bhi.n	8002466 <DMA_CheckFifoParam+0xce>
 80023b8:	a201      	add	r2, pc, #4	@ (adr r2, 80023c0 <DMA_CheckFifoParam+0x28>)
 80023ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023be:	bf00      	nop
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023e3 	.word	0x080023e3
 80023c8:	080023d1 	.word	0x080023d1
 80023cc:	08002467 	.word	0x08002467
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d046      	beq.n	800246a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e0:	e043      	b.n	800246a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023ea:	d140      	bne.n	800246e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e03d      	b.n	800246e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023fa:	d121      	bne.n	8002440 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d837      	bhi.n	8002472 <DMA_CheckFifoParam+0xda>
 8002402:	a201      	add	r2, pc, #4	@ (adr r2, 8002408 <DMA_CheckFifoParam+0x70>)
 8002404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002408:	08002419 	.word	0x08002419
 800240c:	0800241f 	.word	0x0800241f
 8002410:	08002419 	.word	0x08002419
 8002414:	08002431 	.word	0x08002431
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e030      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d025      	beq.n	8002476 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242e:	e022      	b.n	8002476 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002434:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002438:	d11f      	bne.n	800247a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800243e:	e01c      	b.n	800247a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d903      	bls.n	800244e <DMA_CheckFifoParam+0xb6>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d003      	beq.n	8002454 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800244c:	e018      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
      break;
 8002452:	e015      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00e      	beq.n	800247e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      break;
 8002464:	e00b      	b.n	800247e <DMA_CheckFifoParam+0xe6>
      break;
 8002466:	bf00      	nop
 8002468:	e00a      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 800246a:	bf00      	nop
 800246c:	e008      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 800246e:	bf00      	nop
 8002470:	e006      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 8002472:	bf00      	nop
 8002474:	e004      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 8002476:	bf00      	nop
 8002478:	e002      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;   
 800247a:	bf00      	nop
 800247c:	e000      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
    }
  } 
  
  return status; 
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	@ 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e159      	b.n	8002760 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 8148 	bne.w	800275a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d005      	beq.n	80024e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d130      	bne.n	8002544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002518:	2201      	movs	r2, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 0201 	and.w	r2, r3, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b03      	cmp	r3, #3
 800254e:	d017      	beq.n	8002580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d123      	bne.n	80025d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	08da      	lsrs	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3208      	adds	r2, #8
 80025ce:	69b9      	ldr	r1, [r7, #24]
 80025d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0203 	and.w	r2, r3, #3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80a2 	beq.w	800275a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b57      	ldr	r3, [pc, #348]	@ (8002778 <HAL_GPIO_Init+0x2e8>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a56      	ldr	r2, [pc, #344]	@ (8002778 <HAL_GPIO_Init+0x2e8>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b54      	ldr	r3, [pc, #336]	@ (8002778 <HAL_GPIO_Init+0x2e8>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002632:	4a52      	ldr	r2, [pc, #328]	@ (800277c <HAL_GPIO_Init+0x2ec>)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a49      	ldr	r2, [pc, #292]	@ (8002780 <HAL_GPIO_Init+0x2f0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d019      	beq.n	8002692 <HAL_GPIO_Init+0x202>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a48      	ldr	r2, [pc, #288]	@ (8002784 <HAL_GPIO_Init+0x2f4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_GPIO_Init+0x1fe>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a47      	ldr	r2, [pc, #284]	@ (8002788 <HAL_GPIO_Init+0x2f8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00d      	beq.n	800268a <HAL_GPIO_Init+0x1fa>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a46      	ldr	r2, [pc, #280]	@ (800278c <HAL_GPIO_Init+0x2fc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <HAL_GPIO_Init+0x1f6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a45      	ldr	r2, [pc, #276]	@ (8002790 <HAL_GPIO_Init+0x300>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <HAL_GPIO_Init+0x1f2>
 800267e:	2304      	movs	r3, #4
 8002680:	e008      	b.n	8002694 <HAL_GPIO_Init+0x204>
 8002682:	2307      	movs	r3, #7
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x204>
 8002686:	2303      	movs	r3, #3
 8002688:	e004      	b.n	8002694 <HAL_GPIO_Init+0x204>
 800268a:	2302      	movs	r3, #2
 800268c:	e002      	b.n	8002694 <HAL_GPIO_Init+0x204>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_GPIO_Init+0x204>
 8002692:	2300      	movs	r3, #0
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	f002 0203 	and.w	r2, r2, #3
 800269a:	0092      	lsls	r2, r2, #2
 800269c:	4093      	lsls	r3, r2
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a4:	4935      	ldr	r1, [pc, #212]	@ (800277c <HAL_GPIO_Init+0x2ec>)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b2:	4b38      	ldr	r3, [pc, #224]	@ (8002794 <HAL_GPIO_Init+0x304>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002794 <HAL_GPIO_Init+0x304>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <HAL_GPIO_Init+0x304>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002700:	4a24      	ldr	r2, [pc, #144]	@ (8002794 <HAL_GPIO_Init+0x304>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002706:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <HAL_GPIO_Init+0x304>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800272a:	4a1a      	ldr	r2, [pc, #104]	@ (8002794 <HAL_GPIO_Init+0x304>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002730:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <HAL_GPIO_Init+0x304>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002754:	4a0f      	ldr	r2, [pc, #60]	@ (8002794 <HAL_GPIO_Init+0x304>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3301      	adds	r3, #1
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b0f      	cmp	r3, #15
 8002764:	f67f aea2 	bls.w	80024ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3724      	adds	r7, #36	@ 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
 800277c:	40013800 	.word	0x40013800
 8002780:	40020000 	.word	0x40020000
 8002784:	40020400 	.word	0x40020400
 8002788:	40020800 	.word	0x40020800
 800278c:	40020c00 	.word	0x40020c00
 8002790:	40021000 	.word	0x40021000
 8002794:	40013c00 	.word	0x40013c00

08002798 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e267      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d075      	beq.n	80028a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027b6:	4b88      	ldr	r3, [pc, #544]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d00c      	beq.n	80027dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c2:	4b85      	ldr	r3, [pc, #532]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d112      	bne.n	80027f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ce:	4b82      	ldr	r3, [pc, #520]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027da:	d10b      	bne.n	80027f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	4b7e      	ldr	r3, [pc, #504]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d05b      	beq.n	80028a0 <HAL_RCC_OscConfig+0x108>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d157      	bne.n	80028a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e242      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027fc:	d106      	bne.n	800280c <HAL_RCC_OscConfig+0x74>
 80027fe:	4b76      	ldr	r3, [pc, #472]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a75      	ldr	r2, [pc, #468]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e01d      	b.n	8002848 <HAL_RCC_OscConfig+0xb0>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x98>
 8002816:	4b70      	ldr	r3, [pc, #448]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6f      	ldr	r2, [pc, #444]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 800281c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b6d      	ldr	r3, [pc, #436]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6c      	ldr	r2, [pc, #432]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0xb0>
 8002830:	4b69      	ldr	r3, [pc, #420]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a68      	ldr	r2, [pc, #416]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b66      	ldr	r3, [pc, #408]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a65      	ldr	r2, [pc, #404]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7ff f8fe 	bl	8001a50 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7ff f8fa 	bl	8001a50 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	@ 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e207      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286a:	4b5b      	ldr	r3, [pc, #364]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0xc0>
 8002876:	e014      	b.n	80028a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7ff f8ea 	bl	8001a50 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002880:	f7ff f8e6 	bl	8001a50 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	@ 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e1f3      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002892:	4b51      	ldr	r3, [pc, #324]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0xe8>
 800289e:	e000      	b.n	80028a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d063      	beq.n	8002976 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ae:	4b4a      	ldr	r3, [pc, #296]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ba:	4b47      	ldr	r3, [pc, #284]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d11c      	bne.n	8002900 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c6:	4b44      	ldr	r3, [pc, #272]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d116      	bne.n	8002900 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	4b41      	ldr	r3, [pc, #260]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x152>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e1c7      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ea:	4b3b      	ldr	r3, [pc, #236]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4937      	ldr	r1, [pc, #220]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fe:	e03a      	b.n	8002976 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002908:	4b34      	ldr	r3, [pc, #208]	@ (80029dc <HAL_RCC_OscConfig+0x244>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7ff f89f 	bl	8001a50 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002916:	f7ff f89b 	bl	8001a50 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e1a8      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002928:	4b2b      	ldr	r3, [pc, #172]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002934:	4b28      	ldr	r3, [pc, #160]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4925      	ldr	r1, [pc, #148]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
 8002948:	e015      	b.n	8002976 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294a:	4b24      	ldr	r3, [pc, #144]	@ (80029dc <HAL_RCC_OscConfig+0x244>)
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7ff f87e 	bl	8001a50 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002958:	f7ff f87a 	bl	8001a50 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e187      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296a:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d036      	beq.n	80029f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d016      	beq.n	80029b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <HAL_RCC_OscConfig+0x248>)
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7ff f85e 	bl	8001a50 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002998:	f7ff f85a 	bl	8001a50 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e167      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029aa:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_RCC_OscConfig+0x240>)
 80029ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x200>
 80029b6:	e01b      	b.n	80029f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b8:	4b09      	ldr	r3, [pc, #36]	@ (80029e0 <HAL_RCC_OscConfig+0x248>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7ff f847 	bl	8001a50 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c4:	e00e      	b.n	80029e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c6:	f7ff f843 	bl	8001a50 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d907      	bls.n	80029e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e150      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
 80029d8:	40023800 	.word	0x40023800
 80029dc:	42470000 	.word	0x42470000
 80029e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e4:	4b88      	ldr	r3, [pc, #544]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 80029e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1ea      	bne.n	80029c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8097 	beq.w	8002b2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a02:	4b81      	ldr	r3, [pc, #516]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	4b7d      	ldr	r3, [pc, #500]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	4a7c      	ldr	r2, [pc, #496]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a1e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	4b77      	ldr	r3, [pc, #476]	@ (8002c0c <HAL_RCC_OscConfig+0x474>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d118      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3a:	4b74      	ldr	r3, [pc, #464]	@ (8002c0c <HAL_RCC_OscConfig+0x474>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a73      	ldr	r2, [pc, #460]	@ (8002c0c <HAL_RCC_OscConfig+0x474>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a46:	f7ff f803 	bl	8001a50 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4e:	f7fe ffff 	bl	8001a50 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e10c      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	4b6a      	ldr	r3, [pc, #424]	@ (8002c0c <HAL_RCC_OscConfig+0x474>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x2ea>
 8002a74:	4b64      	ldr	r3, [pc, #400]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a78:	4a63      	ldr	r2, [pc, #396]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a80:	e01c      	b.n	8002abc <HAL_RCC_OscConfig+0x324>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b05      	cmp	r3, #5
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x30c>
 8002a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	4a5e      	ldr	r2, [pc, #376]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a96:	4b5c      	ldr	r3, [pc, #368]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0x324>
 8002aa4:	4b58      	ldr	r3, [pc, #352]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa8:	4a57      	ldr	r2, [pc, #348]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab0:	4b55      	ldr	r3, [pc, #340]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab4:	4a54      	ldr	r2, [pc, #336]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	f023 0304 	bic.w	r3, r3, #4
 8002aba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac4:	f7fe ffc4 	bl	8001a50 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fe ffc0 	bl	8001a50 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0cb      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae2:	4b49      	ldr	r3, [pc, #292]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0ee      	beq.n	8002acc <HAL_RCC_OscConfig+0x334>
 8002aee:	e014      	b.n	8002b1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af0:	f7fe ffae 	bl	8001a50 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af8:	f7fe ffaa 	bl	8001a50 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e0b5      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1ee      	bne.n	8002af8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b20:	4b39      	ldr	r3, [pc, #228]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b24:	4a38      	ldr	r2, [pc, #224]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80a1 	beq.w	8002c78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b36:	4b34      	ldr	r3, [pc, #208]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d05c      	beq.n	8002bfc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d141      	bne.n	8002bce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b31      	ldr	r3, [pc, #196]	@ (8002c10 <HAL_RCC_OscConfig+0x478>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fe ff7e 	bl	8001a50 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe ff7a 	bl	8001a50 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e087      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	4b27      	ldr	r3, [pc, #156]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	019b      	lsls	r3, r3, #6
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	491b      	ldr	r1, [pc, #108]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <HAL_RCC_OscConfig+0x478>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7fe ff53 	bl	8001a50 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bae:	f7fe ff4f 	bl	8001a50 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e05c      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc0:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x416>
 8002bcc:	e054      	b.n	8002c78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bce:	4b10      	ldr	r3, [pc, #64]	@ (8002c10 <HAL_RCC_OscConfig+0x478>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe ff3c 	bl	8001a50 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7fe ff38 	bl	8001a50 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e045      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x444>
 8002bfa:	e03d      	b.n	8002c78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e038      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c14:	4b1b      	ldr	r3, [pc, #108]	@ (8002c84 <HAL_RCC_OscConfig+0x4ec>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d028      	beq.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d121      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d11a      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d111      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5a:	085b      	lsrs	r3, r3, #1
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800

08002c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0cc      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b68      	ldr	r3, [pc, #416]	@ (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d90c      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b65      	ldr	r3, [pc, #404]	@ (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b63      	ldr	r3, [pc, #396]	@ (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0b8      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cdc:	4b59      	ldr	r3, [pc, #356]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a58      	ldr	r2, [pc, #352]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf4:	4b53      	ldr	r3, [pc, #332]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b50      	ldr	r3, [pc, #320]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	494d      	ldr	r1, [pc, #308]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d044      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b47      	ldr	r3, [pc, #284]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d119      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d46:	4b3f      	ldr	r3, [pc, #252]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e06f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	4b3b      	ldr	r3, [pc, #236]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e067      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b37      	ldr	r3, [pc, #220]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4934      	ldr	r1, [pc, #208]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d78:	f7fe fe6a 	bl	8001a50 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f7fe fe66 	bl	8001a50 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e04f      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	4b2b      	ldr	r3, [pc, #172]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 020c 	and.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1eb      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b25      	ldr	r3, [pc, #148]	@ (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d20c      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b22      	ldr	r3, [pc, #136]	@ (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b20      	ldr	r3, [pc, #128]	@ (8002e40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e032      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ddc:	4b19      	ldr	r3, [pc, #100]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4916      	ldr	r1, [pc, #88]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dfa:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	490e      	ldr	r1, [pc, #56]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e0e:	f000 f821 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	490a      	ldr	r1, [pc, #40]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002e20:	5ccb      	ldrb	r3, [r1, r3]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a09      	ldr	r2, [pc, #36]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e2a:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fdca 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023c00 	.word	0x40023c00
 8002e44:	40023800 	.word	0x40023800
 8002e48:	080091c0 	.word	0x080091c0
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	20000004 	.word	0x20000004

08002e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e58:	b090      	sub	sp, #64	@ 0x40
 8002e5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e6c:	4b59      	ldr	r3, [pc, #356]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d00d      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x40>
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	f200 80a1 	bhi.w	8002fc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x34>
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e86:	e09b      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b53      	ldr	r3, [pc, #332]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e8c:	e09b      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e8e:	4b53      	ldr	r3, [pc, #332]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002e90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e92:	e098      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e94:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e9e:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d028      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	623b      	str	r3, [r7, #32]
 8002eb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4b47      	ldr	r3, [pc, #284]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ec0:	fb03 f201 	mul.w	r2, r3, r1
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	fb00 f303 	mul.w	r3, r0, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	4a43      	ldr	r2, [pc, #268]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ece:	fba0 1202 	umull	r1, r2, r0, r2
 8002ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ed4:	460a      	mov	r2, r1
 8002ed6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eda:	4413      	add	r3, r2
 8002edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	61fa      	str	r2, [r7, #28]
 8002ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002eee:	f7fd feb3 	bl	8000c58 <__aeabi_uldivmod>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002efa:	e053      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efc:	4b35      	ldr	r3, [pc, #212]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	2200      	movs	r2, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	617a      	str	r2, [r7, #20]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f0e:	f04f 0b00 	mov.w	fp, #0
 8002f12:	4652      	mov	r2, sl
 8002f14:	465b      	mov	r3, fp
 8002f16:	f04f 0000 	mov.w	r0, #0
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	0159      	lsls	r1, r3, #5
 8002f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f24:	0150      	lsls	r0, r2, #5
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	ebb2 080a 	subs.w	r8, r2, sl
 8002f2e:	eb63 090b 	sbc.w	r9, r3, fp
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f46:	ebb2 0408 	subs.w	r4, r2, r8
 8002f4a:	eb63 0509 	sbc.w	r5, r3, r9
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	00eb      	lsls	r3, r5, #3
 8002f58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f5c:	00e2      	lsls	r2, r4, #3
 8002f5e:	4614      	mov	r4, r2
 8002f60:	461d      	mov	r5, r3
 8002f62:	eb14 030a 	adds.w	r3, r4, sl
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	eb45 030b 	adc.w	r3, r5, fp
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	028b      	lsls	r3, r1, #10
 8002f7e:	4621      	mov	r1, r4
 8002f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f84:	4621      	mov	r1, r4
 8002f86:	028a      	lsls	r2, r1, #10
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	60fa      	str	r2, [r7, #12]
 8002f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f98:	f7fd fe5e 	bl	8000c58 <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002fb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fbe:	e002      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3740      	adds	r7, #64	@ 0x40
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	017d7840 	.word	0x017d7840

08002fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000000 	.word	0x20000000

08002ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ffc:	f7ff fff0 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	0a9b      	lsrs	r3, r3, #10
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4903      	ldr	r1, [pc, #12]	@ (800301c <HAL_RCC_GetPCLK1Freq+0x24>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40023800 	.word	0x40023800
 800301c:	080091d0 	.word	0x080091d0

08003020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003024:	f7ff ffdc 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	0b5b      	lsrs	r3, r3, #13
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4903      	ldr	r1, [pc, #12]	@ (8003044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40023800 	.word	0x40023800
 8003044:	080091d0 	.word	0x080091d0

08003048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e041      	b.n	80030de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fe faf2 	bl	8001658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f000 f888 	bl	800319c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d001      	beq.n	8003100 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e03c      	b.n	800317a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1e      	ldr	r2, [pc, #120]	@ (8003188 <HAL_TIM_Base_Start+0xa0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d018      	beq.n	8003144 <HAL_TIM_Base_Start+0x5c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311a:	d013      	beq.n	8003144 <HAL_TIM_Base_Start+0x5c>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1a      	ldr	r2, [pc, #104]	@ (800318c <HAL_TIM_Base_Start+0xa4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00e      	beq.n	8003144 <HAL_TIM_Base_Start+0x5c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a19      	ldr	r2, [pc, #100]	@ (8003190 <HAL_TIM_Base_Start+0xa8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d009      	beq.n	8003144 <HAL_TIM_Base_Start+0x5c>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a17      	ldr	r2, [pc, #92]	@ (8003194 <HAL_TIM_Base_Start+0xac>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_TIM_Base_Start+0x5c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a16      	ldr	r2, [pc, #88]	@ (8003198 <HAL_TIM_Base_Start+0xb0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d111      	bne.n	8003168 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b06      	cmp	r3, #6
 8003154:	d010      	beq.n	8003178 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003166:	e007      	b.n	8003178 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40010000 	.word	0x40010000
 800318c:	40000400 	.word	0x40000400
 8003190:	40000800 	.word	0x40000800
 8003194:	40000c00 	.word	0x40000c00
 8003198:	40014000 	.word	0x40014000

0800319c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003298 <TIM_Base_SetConfig+0xfc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00f      	beq.n	80031d4 <TIM_Base_SetConfig+0x38>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ba:	d00b      	beq.n	80031d4 <TIM_Base_SetConfig+0x38>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a37      	ldr	r2, [pc, #220]	@ (800329c <TIM_Base_SetConfig+0x100>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_Base_SetConfig+0x38>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a36      	ldr	r2, [pc, #216]	@ (80032a0 <TIM_Base_SetConfig+0x104>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0x38>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a35      	ldr	r2, [pc, #212]	@ (80032a4 <TIM_Base_SetConfig+0x108>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d108      	bne.n	80031e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003298 <TIM_Base_SetConfig+0xfc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01b      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f4:	d017      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a28      	ldr	r2, [pc, #160]	@ (800329c <TIM_Base_SetConfig+0x100>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a27      	ldr	r2, [pc, #156]	@ (80032a0 <TIM_Base_SetConfig+0x104>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00f      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a26      	ldr	r2, [pc, #152]	@ (80032a4 <TIM_Base_SetConfig+0x108>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a25      	ldr	r2, [pc, #148]	@ (80032a8 <TIM_Base_SetConfig+0x10c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a24      	ldr	r2, [pc, #144]	@ (80032ac <TIM_Base_SetConfig+0x110>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a23      	ldr	r2, [pc, #140]	@ (80032b0 <TIM_Base_SetConfig+0x114>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800322c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a0e      	ldr	r2, [pc, #56]	@ (8003298 <TIM_Base_SetConfig+0xfc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d103      	bne.n	800326c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d105      	bne.n	800328a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f023 0201 	bic.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	611a      	str	r2, [r3, #16]
  }
}
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40010000 	.word	0x40010000
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800
 80032a4:	40000c00 	.word	0x40000c00
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40014400 	.word	0x40014400
 80032b0:	40014800 	.word	0x40014800

080032b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e042      	b.n	800334c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe f9de 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	@ 0x24
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 ff7b 	bl	80041f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800330c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800331c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800332c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	@ 0x28
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b20      	cmp	r3, #32
 8003372:	d175      	bne.n	8003460 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_UART_Transmit+0x2c>
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e06e      	b.n	8003462 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2221      	movs	r2, #33	@ 0x21
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003392:	f7fe fb5d 	bl	8001a50 <HAL_GetTick>
 8003396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	88fa      	ldrh	r2, [r7, #6]
 80033a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ac:	d108      	bne.n	80033c0 <HAL_UART_Transmit+0x6c>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	e003      	b.n	80033c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033c8:	e02e      	b.n	8003428 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2200      	movs	r2, #0
 80033d2:	2180      	movs	r1, #128	@ 0x80
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fc53 	bl	8003c80 <UART_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e03a      	b.n	8003462 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10b      	bne.n	800340a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003400:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	3302      	adds	r3, #2
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	e007      	b.n	800341a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	781a      	ldrb	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	3301      	adds	r3, #1
 8003418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1cb      	bne.n	80033ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	2140      	movs	r1, #64	@ 0x40
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fc1f 	bl	8003c80 <UART_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e006      	b.n	8003462 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3720      	adds	r7, #32
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b08c      	sub	sp, #48	@ 0x30
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	4613      	mov	r3, r2
 8003476:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b20      	cmp	r3, #32
 8003482:	d14a      	bne.n	800351a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e043      	b.n	800351c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fc44 	bl	8003d34 <UART_Start_Receive_DMA>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80034b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d12c      	bne.n	8003514 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d125      	bne.n	800350e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	617b      	str	r3, [r7, #20]
   return(result);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f043 0310 	orr.w	r3, r3, #16
 80034ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80034fa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6a39      	ldr	r1, [r7, #32]
 80034fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	61fb      	str	r3, [r7, #28]
   return(result);
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e5      	bne.n	80034d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800350c:	e002      	b.n	8003514 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003514:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003518:	e000      	b.n	800351c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
  }
}
 800351c:	4618      	mov	r0, r3
 800351e:	3730      	adds	r7, #48	@ 0x30
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b0ba      	sub	sp, #232	@ 0xe8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003550:	2300      	movs	r3, #0
 8003552:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10f      	bne.n	800358a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800356a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_UART_IRQHandler+0x66>
 8003576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fd77 	bl	8004076 <UART_Receive_IT>
      return;
 8003588:	e25b      	b.n	8003a42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800358a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80de 	beq.w	8003750 <HAL_UART_IRQHandler+0x22c>
 8003594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80d1 	beq.w	8003750 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_UART_IRQHandler+0xae>
 80035ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <HAL_UART_IRQHandler+0xd2>
 80035de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0202 	orr.w	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_UART_IRQHandler+0xf6>
 8003602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003612:	f043 0204 	orr.w	r2, r3, #4
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d011      	beq.n	800364a <HAL_UART_IRQHandler+0x126>
 8003626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	f043 0208 	orr.w	r2, r3, #8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 81f2 	beq.w	8003a38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_UART_IRQHandler+0x14e>
 8003660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fd02 	bl	8004076 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b40      	cmp	r3, #64	@ 0x40
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <HAL_UART_IRQHandler+0x17a>
 8003696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d04f      	beq.n	800373e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fc0a 	bl	8003eb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ae:	2b40      	cmp	r3, #64	@ 0x40
 80036b0:	d141      	bne.n	8003736 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3314      	adds	r3, #20
 80036b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3314      	adds	r3, #20
 80036da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036ee:	e841 2300 	strex	r3, r2, [r1]
 80036f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1d9      	bne.n	80036b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d013      	beq.n	800372e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370a:	4a7e      	ldr	r2, [pc, #504]	@ (8003904 <HAL_UART_IRQHandler+0x3e0>)
 800370c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fc30 	bl	8001f78 <HAL_DMA_Abort_IT>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003728:	4610      	mov	r0, r2
 800372a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372c:	e00e      	b.n	800374c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f99e 	bl	8003a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003734:	e00a      	b.n	800374c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f99a 	bl	8003a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373c:	e006      	b.n	800374c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f996 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800374a:	e175      	b.n	8003a38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	bf00      	nop
    return;
 800374e:	e173      	b.n	8003a38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	2b01      	cmp	r3, #1
 8003756:	f040 814f 	bne.w	80039f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800375a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8148 	beq.w	80039f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8141 	beq.w	80039f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003796:	2b40      	cmp	r3, #64	@ 0x40
 8003798:	f040 80b6 	bne.w	8003908 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8145 	beq.w	8003a3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037ba:	429a      	cmp	r2, r3
 80037bc:	f080 813e 	bcs.w	8003a3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d2:	f000 8088 	beq.w	80038e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003802:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800380e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800381a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1d9      	bne.n	80037d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3314      	adds	r3, #20
 8003828:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003832:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3314      	adds	r3, #20
 8003842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003846:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800384a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800384e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e1      	bne.n	8003822 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3314      	adds	r3, #20
 8003864:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800386e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3314      	adds	r3, #20
 800387e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003882:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003884:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003888:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003890:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e3      	bne.n	800385e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	330c      	adds	r3, #12
 80038aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038b6:	f023 0310 	bic.w	r3, r3, #16
 80038ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	330c      	adds	r3, #12
 80038c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e3      	bne.n	80038a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe fad9 	bl	8001e98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7fd fdb7 	bl	8001470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003902:	e09b      	b.n	8003a3c <HAL_UART_IRQHandler+0x518>
 8003904:	08003f7f 	.word	0x08003f7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003910:	b29b      	uxth	r3, r3
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 808e 	beq.w	8003a40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8089 	beq.w	8003a40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800393e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003952:	647a      	str	r2, [r7, #68]	@ 0x44
 8003954:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e3      	bne.n	800392e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	623b      	str	r3, [r7, #32]
   return(result);
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3314      	adds	r3, #20
 8003986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800398a:	633a      	str	r2, [r7, #48]	@ 0x30
 800398c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e3      	bne.n	8003966 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0310 	bic.w	r3, r3, #16
 80039c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039d0:	61fa      	str	r2, [r7, #28]
 80039d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	617b      	str	r3, [r7, #20]
   return(result);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e3      	bne.n	80039ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fd fd3d 	bl	8001470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039f6:	e023      	b.n	8003a40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d009      	beq.n	8003a18 <HAL_UART_IRQHandler+0x4f4>
 8003a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fac8 	bl	8003fa6 <UART_Transmit_IT>
    return;
 8003a16:	e014      	b.n	8003a42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <HAL_UART_IRQHandler+0x51e>
 8003a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fb08 	bl	8004046 <UART_EndTransmit_IT>
    return;
 8003a36:	e004      	b.n	8003a42 <HAL_UART_IRQHandler+0x51e>
    return;
 8003a38:	bf00      	nop
 8003a3a:	e002      	b.n	8003a42 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a40:	bf00      	nop
  }
}
 8003a42:	37e8      	adds	r7, #232	@ 0xe8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b09c      	sub	sp, #112	@ 0x70
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a90:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d172      	bne.n	8003b86 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003aa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003ac6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ac8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003acc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e5      	bne.n	8003aa6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3314      	adds	r3, #20
 8003ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003af2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003afa:	647a      	str	r2, [r7, #68]	@ 0x44
 8003afc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3314      	adds	r3, #20
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b24:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3314      	adds	r3, #20
 8003b2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003b2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e5      	bne.n	8003b0e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d119      	bne.n	8003b86 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f023 0310 	bic.w	r3, r3, #16
 8003b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	330c      	adds	r3, #12
 8003b70:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003b72:	61fa      	str	r2, [r7, #28]
 8003b74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	69b9      	ldr	r1, [r7, #24]
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	617b      	str	r3, [r7, #20]
   return(result);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e5      	bne.n	8003b52 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b88:	2200      	movs	r2, #0
 8003b8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d106      	bne.n	8003ba2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003b9c:	f7fd fc68 	bl	8001470 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ba0:	e002      	b.n	8003ba8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003ba2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003ba4:	f7ff ff50 	bl	8003a48 <HAL_UART_RxCpltCallback>
}
 8003ba8:	bf00      	nop
 8003baa:	3770      	adds	r7, #112	@ 0x70
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d108      	bne.n	8003bde <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7fd fc4a 	bl	8001470 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003bdc:	e002      	b.n	8003be4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f7ff ff3c 	bl	8003a5c <HAL_UART_RxHalfCpltCallback>
}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c08:	2b80      	cmp	r3, #128	@ 0x80
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b21      	cmp	r3, #33	@ 0x21
 8003c1e:	d108      	bne.n	8003c32 <UART_DMAError+0x46>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003c2c:	68b8      	ldr	r0, [r7, #8]
 8003c2e:	f000 f91b 	bl	8003e68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3c:	2b40      	cmp	r3, #64	@ 0x40
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b22      	cmp	r3, #34	@ 0x22
 8003c52:	d108      	bne.n	8003c66 <UART_DMAError+0x7a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003c60:	68b8      	ldr	r0, [r7, #8]
 8003c62:	f000 f929 	bl	8003eb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f043 0210 	orr.w	r2, r3, #16
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c72:	68b8      	ldr	r0, [r7, #8]
 8003c74:	f7ff fefc 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c90:	e03b      	b.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d037      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9a:	f7fd fed9 	bl	8001a50 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	6a3a      	ldr	r2, [r7, #32]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d302      	bcc.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e03a      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d023      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b80      	cmp	r3, #128	@ 0x80
 8003cc6:	d020      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b40      	cmp	r3, #64	@ 0x40
 8003ccc:	d01d      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d116      	bne.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f8e0 	bl	8003eb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e00f      	b.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4013      	ands	r3, r2
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d0b4      	beq.n	8003c92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b098      	sub	sp, #96	@ 0x60
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2222      	movs	r2, #34	@ 0x22
 8003d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d60:	4a3e      	ldr	r2, [pc, #248]	@ (8003e5c <UART_Start_Receive_DMA+0x128>)
 8003d62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d68:	4a3d      	ldr	r2, [pc, #244]	@ (8003e60 <UART_Start_Receive_DMA+0x12c>)
 8003d6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d70:	4a3c      	ldr	r2, [pc, #240]	@ (8003e64 <UART_Start_Receive_DMA+0x130>)
 8003d72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d78:	2200      	movs	r2, #0
 8003d7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003d7c:	f107 0308 	add.w	r3, r7, #8
 8003d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	f7fe f828 	bl	8001de8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d019      	beq.n	8003dea <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dd6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003ddc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3314      	adds	r3, #20
 8003e08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e0a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003e0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e5      	bne.n	8003dea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3314      	adds	r3, #20
 8003e24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e34:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3314      	adds	r3, #20
 8003e3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6a39      	ldr	r1, [r7, #32]
 8003e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e5      	bne.n	8003e1e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3760      	adds	r7, #96	@ 0x60
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	08003a85 	.word	0x08003a85
 8003e60:	08003bb1 	.word	0x08003bb1
 8003e64:	08003bed 	.word	0x08003bed

08003e68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b089      	sub	sp, #36	@ 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	61ba      	str	r2, [r7, #24]
 8003e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6979      	ldr	r1, [r7, #20]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e5      	bne.n	8003e70 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003eac:	bf00      	nop
 8003eae:	3724      	adds	r7, #36	@ 0x24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b095      	sub	sp, #84	@ 0x54
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eca:	e853 3f00 	ldrex	r3, [r3]
 8003ece:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ee0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ee6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ee8:	e841 2300 	strex	r3, r2, [r1]
 8003eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e5      	bne.n	8003ec0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3314      	adds	r3, #20
 8003f12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e5      	bne.n	8003ef4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d119      	bne.n	8003f64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f023 0310 	bic.w	r3, r3, #16
 8003f46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f50:	61ba      	str	r2, [r7, #24]
 8003f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6979      	ldr	r1, [r7, #20]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e5      	bne.n	8003f30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f72:	bf00      	nop
 8003f74:	3754      	adds	r7, #84	@ 0x54
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f7ff fd69 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b21      	cmp	r3, #33	@ 0x21
 8003fb8:	d13e      	bne.n	8004038 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc2:	d114      	bne.n	8003fee <UART_Transmit_IT+0x48>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d110      	bne.n	8003fee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	1c9a      	adds	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	621a      	str	r2, [r3, #32]
 8003fec:	e008      	b.n	8004000 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	1c59      	adds	r1, r3, #1
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6211      	str	r1, [r2, #32]
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29b      	uxth	r3, r3
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4619      	mov	r1, r3
 800400e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10f      	bne.n	8004034 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004022:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004032:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	e000      	b.n	800403a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800405c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fd f9f8 	bl	800145c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b08c      	sub	sp, #48	@ 0x30
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b22      	cmp	r3, #34	@ 0x22
 8004088:	f040 80ae 	bne.w	80041e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004094:	d117      	bne.n	80040c6 <UART_Receive_IT+0x50>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d113      	bne.n	80040c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80040c4:	e026      	b.n	8004114 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d8:	d007      	beq.n	80040ea <UART_Receive_IT+0x74>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <UART_Receive_IT+0x82>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e008      	b.n	800410a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004104:	b2da      	uxtb	r2, r3
 8004106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004108:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29b      	uxth	r3, r3
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4619      	mov	r1, r3
 8004122:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004124:	2b00      	cmp	r3, #0
 8004126:	d15d      	bne.n	80041e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0220 	bic.w	r2, r2, #32
 8004136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	2b01      	cmp	r3, #1
 800416c:	d135      	bne.n	80041da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	613b      	str	r3, [r7, #16]
   return(result);
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f023 0310 	bic.w	r3, r3, #16
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004194:	623a      	str	r2, [r7, #32]
 8004196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	69f9      	ldr	r1, [r7, #28]
 800419a:	6a3a      	ldr	r2, [r7, #32]
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e5      	bne.n	8004174 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d10a      	bne.n	80041cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041d0:	4619      	mov	r1, r3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fd f94c 	bl	8001470 <HAL_UARTEx_RxEventCallback>
 80041d8:	e002      	b.n	80041e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fc34 	bl	8003a48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e002      	b.n	80041ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e000      	b.n	80041ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041e8:	2302      	movs	r3, #2
  }
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3730      	adds	r7, #48	@ 0x30
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f8:	b0c0      	sub	sp, #256	@ 0x100
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004210:	68d9      	ldr	r1, [r3, #12]
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	ea40 0301 	orr.w	r3, r0, r1
 800421c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	431a      	orrs	r2, r3
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	431a      	orrs	r2, r3
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800424c:	f021 010c 	bic.w	r1, r1, #12
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800425a:	430b      	orrs	r3, r1
 800425c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426e:	6999      	ldr	r1, [r3, #24]
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	ea40 0301 	orr.w	r3, r0, r1
 800427a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4b8f      	ldr	r3, [pc, #572]	@ (80044c0 <UART_SetConfig+0x2cc>)
 8004284:	429a      	cmp	r2, r3
 8004286:	d005      	beq.n	8004294 <UART_SetConfig+0xa0>
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b8d      	ldr	r3, [pc, #564]	@ (80044c4 <UART_SetConfig+0x2d0>)
 8004290:	429a      	cmp	r2, r3
 8004292:	d104      	bne.n	800429e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004294:	f7fe fec4 	bl	8003020 <HAL_RCC_GetPCLK2Freq>
 8004298:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800429c:	e003      	b.n	80042a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800429e:	f7fe feab 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 80042a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042b0:	f040 810c 	bne.w	80044cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042c6:	4622      	mov	r2, r4
 80042c8:	462b      	mov	r3, r5
 80042ca:	1891      	adds	r1, r2, r2
 80042cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042ce:	415b      	adcs	r3, r3
 80042d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042d6:	4621      	mov	r1, r4
 80042d8:	eb12 0801 	adds.w	r8, r2, r1
 80042dc:	4629      	mov	r1, r5
 80042de:	eb43 0901 	adc.w	r9, r3, r1
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042f6:	4690      	mov	r8, r2
 80042f8:	4699      	mov	r9, r3
 80042fa:	4623      	mov	r3, r4
 80042fc:	eb18 0303 	adds.w	r3, r8, r3
 8004300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004304:	462b      	mov	r3, r5
 8004306:	eb49 0303 	adc.w	r3, r9, r3
 800430a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800431a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800431e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004322:	460b      	mov	r3, r1
 8004324:	18db      	adds	r3, r3, r3
 8004326:	653b      	str	r3, [r7, #80]	@ 0x50
 8004328:	4613      	mov	r3, r2
 800432a:	eb42 0303 	adc.w	r3, r2, r3
 800432e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004338:	f7fc fc8e 	bl	8000c58 <__aeabi_uldivmod>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4b61      	ldr	r3, [pc, #388]	@ (80044c8 <UART_SetConfig+0x2d4>)
 8004342:	fba3 2302 	umull	r2, r3, r3, r2
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	011c      	lsls	r4, r3, #4
 800434a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004354:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800435c:	4642      	mov	r2, r8
 800435e:	464b      	mov	r3, r9
 8004360:	1891      	adds	r1, r2, r2
 8004362:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004364:	415b      	adcs	r3, r3
 8004366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800436c:	4641      	mov	r1, r8
 800436e:	eb12 0a01 	adds.w	sl, r2, r1
 8004372:	4649      	mov	r1, r9
 8004374:	eb43 0b01 	adc.w	fp, r3, r1
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800438c:	4692      	mov	sl, r2
 800438e:	469b      	mov	fp, r3
 8004390:	4643      	mov	r3, r8
 8004392:	eb1a 0303 	adds.w	r3, sl, r3
 8004396:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800439a:	464b      	mov	r3, r9
 800439c:	eb4b 0303 	adc.w	r3, fp, r3
 80043a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043b8:	460b      	mov	r3, r1
 80043ba:	18db      	adds	r3, r3, r3
 80043bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80043be:	4613      	mov	r3, r2
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043ce:	f7fc fc43 	bl	8000c58 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	4b3b      	ldr	r3, [pc, #236]	@ (80044c8 <UART_SetConfig+0x2d4>)
 80043da:	fba3 2301 	umull	r2, r3, r3, r1
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2264      	movs	r2, #100	@ 0x64
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	1acb      	subs	r3, r1, r3
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043ee:	4b36      	ldr	r3, [pc, #216]	@ (80044c8 <UART_SetConfig+0x2d4>)
 80043f0:	fba3 2302 	umull	r2, r3, r3, r2
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043fc:	441c      	add	r4, r3
 80043fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004402:	2200      	movs	r2, #0
 8004404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004408:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800440c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004410:	4642      	mov	r2, r8
 8004412:	464b      	mov	r3, r9
 8004414:	1891      	adds	r1, r2, r2
 8004416:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004418:	415b      	adcs	r3, r3
 800441a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800441c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004420:	4641      	mov	r1, r8
 8004422:	1851      	adds	r1, r2, r1
 8004424:	6339      	str	r1, [r7, #48]	@ 0x30
 8004426:	4649      	mov	r1, r9
 8004428:	414b      	adcs	r3, r1
 800442a:	637b      	str	r3, [r7, #52]	@ 0x34
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004438:	4659      	mov	r1, fp
 800443a:	00cb      	lsls	r3, r1, #3
 800443c:	4651      	mov	r1, sl
 800443e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004442:	4651      	mov	r1, sl
 8004444:	00ca      	lsls	r2, r1, #3
 8004446:	4610      	mov	r0, r2
 8004448:	4619      	mov	r1, r3
 800444a:	4603      	mov	r3, r0
 800444c:	4642      	mov	r2, r8
 800444e:	189b      	adds	r3, r3, r2
 8004450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004454:	464b      	mov	r3, r9
 8004456:	460a      	mov	r2, r1
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800446c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004474:	460b      	mov	r3, r1
 8004476:	18db      	adds	r3, r3, r3
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800447a:	4613      	mov	r3, r2
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800448a:	f7fc fbe5 	bl	8000c58 <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4b0d      	ldr	r3, [pc, #52]	@ (80044c8 <UART_SetConfig+0x2d4>)
 8004494:	fba3 1302 	umull	r1, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	2164      	movs	r1, #100	@ 0x64
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	3332      	adds	r3, #50	@ 0x32
 80044a6:	4a08      	ldr	r2, [pc, #32]	@ (80044c8 <UART_SetConfig+0x2d4>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f003 0207 	and.w	r2, r3, #7
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4422      	add	r2, r4
 80044ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044bc:	e106      	b.n	80046cc <UART_SetConfig+0x4d8>
 80044be:	bf00      	nop
 80044c0:	40011000 	.word	0x40011000
 80044c4:	40011400 	.word	0x40011400
 80044c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044de:	4642      	mov	r2, r8
 80044e0:	464b      	mov	r3, r9
 80044e2:	1891      	adds	r1, r2, r2
 80044e4:	6239      	str	r1, [r7, #32]
 80044e6:	415b      	adcs	r3, r3
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044ee:	4641      	mov	r1, r8
 80044f0:	1854      	adds	r4, r2, r1
 80044f2:	4649      	mov	r1, r9
 80044f4:	eb43 0501 	adc.w	r5, r3, r1
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	00eb      	lsls	r3, r5, #3
 8004502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004506:	00e2      	lsls	r2, r4, #3
 8004508:	4614      	mov	r4, r2
 800450a:	461d      	mov	r5, r3
 800450c:	4643      	mov	r3, r8
 800450e:	18e3      	adds	r3, r4, r3
 8004510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004514:	464b      	mov	r3, r9
 8004516:	eb45 0303 	adc.w	r3, r5, r3
 800451a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800452a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800453a:	4629      	mov	r1, r5
 800453c:	008b      	lsls	r3, r1, #2
 800453e:	4621      	mov	r1, r4
 8004540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004544:	4621      	mov	r1, r4
 8004546:	008a      	lsls	r2, r1, #2
 8004548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800454c:	f7fc fb84 	bl	8000c58 <__aeabi_uldivmod>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4b60      	ldr	r3, [pc, #384]	@ (80046d8 <UART_SetConfig+0x4e4>)
 8004556:	fba3 2302 	umull	r2, r3, r3, r2
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	011c      	lsls	r4, r3, #4
 800455e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004562:	2200      	movs	r2, #0
 8004564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004568:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800456c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	1891      	adds	r1, r2, r2
 8004576:	61b9      	str	r1, [r7, #24]
 8004578:	415b      	adcs	r3, r3
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004580:	4641      	mov	r1, r8
 8004582:	1851      	adds	r1, r2, r1
 8004584:	6139      	str	r1, [r7, #16]
 8004586:	4649      	mov	r1, r9
 8004588:	414b      	adcs	r3, r1
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004598:	4659      	mov	r1, fp
 800459a:	00cb      	lsls	r3, r1, #3
 800459c:	4651      	mov	r1, sl
 800459e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a2:	4651      	mov	r1, sl
 80045a4:	00ca      	lsls	r2, r1, #3
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	4642      	mov	r2, r8
 80045ae:	189b      	adds	r3, r3, r2
 80045b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045b4:	464b      	mov	r3, r9
 80045b6:	460a      	mov	r2, r1
 80045b8:	eb42 0303 	adc.w	r3, r2, r3
 80045bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045d8:	4649      	mov	r1, r9
 80045da:	008b      	lsls	r3, r1, #2
 80045dc:	4641      	mov	r1, r8
 80045de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e2:	4641      	mov	r1, r8
 80045e4:	008a      	lsls	r2, r1, #2
 80045e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045ea:	f7fc fb35 	bl	8000c58 <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	4b38      	ldr	r3, [pc, #224]	@ (80046d8 <UART_SetConfig+0x4e4>)
 80045f6:	fba3 2301 	umull	r2, r3, r3, r1
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2264      	movs	r2, #100	@ 0x64
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	1acb      	subs	r3, r1, r3
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	3332      	adds	r3, #50	@ 0x32
 8004608:	4a33      	ldr	r2, [pc, #204]	@ (80046d8 <UART_SetConfig+0x4e4>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004614:	441c      	add	r4, r3
 8004616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800461a:	2200      	movs	r2, #0
 800461c:	673b      	str	r3, [r7, #112]	@ 0x70
 800461e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004620:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004624:	4642      	mov	r2, r8
 8004626:	464b      	mov	r3, r9
 8004628:	1891      	adds	r1, r2, r2
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	415b      	adcs	r3, r3
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004634:	4641      	mov	r1, r8
 8004636:	1851      	adds	r1, r2, r1
 8004638:	6039      	str	r1, [r7, #0]
 800463a:	4649      	mov	r1, r9
 800463c:	414b      	adcs	r3, r1
 800463e:	607b      	str	r3, [r7, #4]
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800464c:	4659      	mov	r1, fp
 800464e:	00cb      	lsls	r3, r1, #3
 8004650:	4651      	mov	r1, sl
 8004652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004656:	4651      	mov	r1, sl
 8004658:	00ca      	lsls	r2, r1, #3
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	4603      	mov	r3, r0
 8004660:	4642      	mov	r2, r8
 8004662:	189b      	adds	r3, r3, r2
 8004664:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004666:	464b      	mov	r3, r9
 8004668:	460a      	mov	r2, r1
 800466a:	eb42 0303 	adc.w	r3, r2, r3
 800466e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	663b      	str	r3, [r7, #96]	@ 0x60
 800467a:	667a      	str	r2, [r7, #100]	@ 0x64
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004688:	4649      	mov	r1, r9
 800468a:	008b      	lsls	r3, r1, #2
 800468c:	4641      	mov	r1, r8
 800468e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004692:	4641      	mov	r1, r8
 8004694:	008a      	lsls	r2, r1, #2
 8004696:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800469a:	f7fc fadd 	bl	8000c58 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <UART_SetConfig+0x4e4>)
 80046a4:	fba3 1302 	umull	r1, r3, r3, r2
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	2164      	movs	r1, #100	@ 0x64
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	3332      	adds	r3, #50	@ 0x32
 80046b6:	4a08      	ldr	r2, [pc, #32]	@ (80046d8 <UART_SetConfig+0x4e4>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	f003 020f 	and.w	r2, r3, #15
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4422      	add	r2, r4
 80046ca:	609a      	str	r2, [r3, #8]
}
 80046cc:	bf00      	nop
 80046ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046d2:	46bd      	mov	sp, r7
 80046d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046d8:	51eb851f 	.word	0x51eb851f

080046dc <sine_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sine_model_activations_map, 1, params)) {
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	2101      	movs	r1, #1
 80046ea:	4825      	ldr	r0, [pc, #148]	@ (8004780 <sine_model_configure_activations+0xa4>)
 80046ec:	f000 fa7c 	bl	8004be8 <ai_platform_get_activations_map>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d039      	beq.n	800476a <sine_model_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor_200_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 60);
 80046f6:	4b22      	ldr	r3, [pc, #136]	@ (8004780 <sine_model_configure_activations+0xa4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	333c      	adds	r3, #60	@ 0x3c
 80046fc:	4a21      	ldr	r2, [pc, #132]	@ (8004784 <sine_model_configure_activations+0xa8>)
 80046fe:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor_200_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 60);
 8004700:	4b1f      	ldr	r3, [pc, #124]	@ (8004780 <sine_model_configure_activations+0xa4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	333c      	adds	r3, #60	@ 0x3c
 8004706:	4a1f      	ldr	r2, [pc, #124]	@ (8004784 <sine_model_configure_activations+0xa8>)
 8004708:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 800470a:	4b1d      	ldr	r3, [pc, #116]	@ (8004780 <sine_model_configure_activations+0xa4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3340      	adds	r3, #64	@ 0x40
 8004710:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <sine_model_configure_activations+0xac>)
 8004712:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8004714:	4b1a      	ldr	r3, [pc, #104]	@ (8004780 <sine_model_configure_activations+0xa4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3340      	adds	r3, #64	@ 0x40
 800471a:	4a1b      	ldr	r2, [pc, #108]	@ (8004788 <sine_model_configure_activations+0xac>)
 800471c:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 800471e:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <sine_model_configure_activations+0xa4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3340      	adds	r3, #64	@ 0x40
 8004724:	4a19      	ldr	r2, [pc, #100]	@ (800478c <sine_model_configure_activations+0xb0>)
 8004726:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8004728:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <sine_model_configure_activations+0xa4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3340      	adds	r3, #64	@ 0x40
 800472e:	4a17      	ldr	r2, [pc, #92]	@ (800478c <sine_model_configure_activations+0xb0>)
 8004730:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8004732:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <sine_model_configure_activations+0xa4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a16      	ldr	r2, [pc, #88]	@ (8004790 <sine_model_configure_activations+0xb4>)
 8004738:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 800473a:	4b11      	ldr	r3, [pc, #68]	@ (8004780 <sine_model_configure_activations+0xa4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a14      	ldr	r2, [pc, #80]	@ (8004790 <sine_model_configure_activations+0xb4>)
 8004740:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8004742:	4b0f      	ldr	r3, [pc, #60]	@ (8004780 <sine_model_configure_activations+0xa4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3340      	adds	r3, #64	@ 0x40
 8004748:	4a12      	ldr	r2, [pc, #72]	@ (8004794 <sine_model_configure_activations+0xb8>)
 800474a:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 800474c:	4b0c      	ldr	r3, [pc, #48]	@ (8004780 <sine_model_configure_activations+0xa4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3340      	adds	r3, #64	@ 0x40
 8004752:	4a10      	ldr	r2, [pc, #64]	@ (8004794 <sine_model_configure_activations+0xb8>)
 8004754:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8004756:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <sine_model_configure_activations+0xa4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a0f      	ldr	r2, [pc, #60]	@ (8004798 <sine_model_configure_activations+0xbc>)
 800475c:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 800475e:	4b08      	ldr	r3, [pc, #32]	@ (8004780 <sine_model_configure_activations+0xa4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a0d      	ldr	r2, [pc, #52]	@ (8004798 <sine_model_configure_activations+0xbc>)
 8004764:	60d3      	str	r3, [r2, #12]
    return true;
 8004766:	2301      	movs	r3, #1
 8004768:	e005      	b.n	8004776 <sine_model_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800476a:	2213      	movs	r2, #19
 800476c:	2130      	movs	r1, #48	@ 0x30
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa8e 	bl	8004c90 <ai_platform_network_set_error>
  return false;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000a10 	.word	0x20000a10
 8004784:	2000000c 	.word	0x2000000c
 8004788:	2000001c 	.word	0x2000001c
 800478c:	2000002c 	.word	0x2000002c
 8004790:	2000003c 	.word	0x2000003c
 8004794:	2000004c 	.word	0x2000004c
 8004798:	2000005c 	.word	0x2000005c

0800479c <sine_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sine_model_weights_map, 1, params)) {
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	2101      	movs	r1, #1
 80047aa:	483b      	ldr	r0, [pc, #236]	@ (8004898 <sine_model_configure_weights+0xfc>)
 80047ac:	f000 f9c8 	bl	8004b40 <ai_platform_get_weights_map>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d065      	beq.n	8004882 <sine_model_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80047b6:	4b39      	ldr	r3, [pc, #228]	@ (800489c <sine_model_configure_weights+0x100>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047be:	4a37      	ldr	r2, [pc, #220]	@ (800489c <sine_model_configure_weights+0x100>)
 80047c0:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 0);
 80047c2:	4b35      	ldr	r3, [pc, #212]	@ (8004898 <sine_model_configure_weights+0xfc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a35      	ldr	r2, [pc, #212]	@ (800489c <sine_model_configure_weights+0x100>)
 80047c8:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 0);
 80047ca:	4b33      	ldr	r3, [pc, #204]	@ (8004898 <sine_model_configure_weights+0xfc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a33      	ldr	r2, [pc, #204]	@ (800489c <sine_model_configure_weights+0x100>)
 80047d0:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80047d2:	4b33      	ldr	r3, [pc, #204]	@ (80048a0 <sine_model_configure_weights+0x104>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047da:	4a31      	ldr	r2, [pc, #196]	@ (80048a0 <sine_model_configure_weights+0x104>)
 80047dc:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 64);
 80047de:	4b2e      	ldr	r3, [pc, #184]	@ (8004898 <sine_model_configure_weights+0xfc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3340      	adds	r3, #64	@ 0x40
 80047e4:	4a2e      	ldr	r2, [pc, #184]	@ (80048a0 <sine_model_configure_weights+0x104>)
 80047e6:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 64);
 80047e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004898 <sine_model_configure_weights+0xfc>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3340      	adds	r3, #64	@ 0x40
 80047ee:	4a2c      	ldr	r2, [pc, #176]	@ (80048a0 <sine_model_configure_weights+0x104>)
 80047f0:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80047f2:	4b2c      	ldr	r3, [pc, #176]	@ (80048a4 <sine_model_configure_weights+0x108>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047fa:	4a2a      	ldr	r2, [pc, #168]	@ (80048a4 <sine_model_configure_weights+0x108>)
 80047fc:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 128);
 80047fe:	4b26      	ldr	r3, [pc, #152]	@ (8004898 <sine_model_configure_weights+0xfc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3380      	adds	r3, #128	@ 0x80
 8004804:	4a27      	ldr	r2, [pc, #156]	@ (80048a4 <sine_model_configure_weights+0x108>)
 8004806:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 128);
 8004808:	4b23      	ldr	r3, [pc, #140]	@ (8004898 <sine_model_configure_weights+0xfc>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3380      	adds	r3, #128	@ 0x80
 800480e:	4a25      	ldr	r2, [pc, #148]	@ (80048a4 <sine_model_configure_weights+0x108>)
 8004810:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004812:	4b25      	ldr	r3, [pc, #148]	@ (80048a8 <sine_model_configure_weights+0x10c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800481a:	4a23      	ldr	r2, [pc, #140]	@ (80048a8 <sine_model_configure_weights+0x10c>)
 800481c:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1152);
 800481e:	4b1e      	ldr	r3, [pc, #120]	@ (8004898 <sine_model_configure_weights+0xfc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8004826:	4a20      	ldr	r2, [pc, #128]	@ (80048a8 <sine_model_configure_weights+0x10c>)
 8004828:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1152);
 800482a:	4b1b      	ldr	r3, [pc, #108]	@ (8004898 <sine_model_configure_weights+0xfc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8004832:	4a1d      	ldr	r2, [pc, #116]	@ (80048a8 <sine_model_configure_weights+0x10c>)
 8004834:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004836:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <sine_model_configure_weights+0x110>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800483e:	4a1b      	ldr	r2, [pc, #108]	@ (80048ac <sine_model_configure_weights+0x110>)
 8004840:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 1216);
 8004842:	4b15      	ldr	r3, [pc, #84]	@ (8004898 <sine_model_configure_weights+0xfc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800484a:	4a18      	ldr	r2, [pc, #96]	@ (80048ac <sine_model_configure_weights+0x110>)
 800484c:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1216);
 800484e:	4b12      	ldr	r3, [pc, #72]	@ (8004898 <sine_model_configure_weights+0xfc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8004856:	4a15      	ldr	r2, [pc, #84]	@ (80048ac <sine_model_configure_weights+0x110>)
 8004858:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800485a:	4b15      	ldr	r3, [pc, #84]	@ (80048b0 <sine_model_configure_weights+0x114>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004862:	4a13      	ldr	r2, [pc, #76]	@ (80048b0 <sine_model_configure_weights+0x114>)
 8004864:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1280);
 8004866:	4b0c      	ldr	r3, [pc, #48]	@ (8004898 <sine_model_configure_weights+0xfc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800486e:	4a10      	ldr	r2, [pc, #64]	@ (80048b0 <sine_model_configure_weights+0x114>)
 8004870:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1280);
 8004872:	4b09      	ldr	r3, [pc, #36]	@ (8004898 <sine_model_configure_weights+0xfc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800487a:	4a0d      	ldr	r2, [pc, #52]	@ (80048b0 <sine_model_configure_weights+0x114>)
 800487c:	60d3      	str	r3, [r2, #12]
    return true;
 800487e:	2301      	movs	r3, #1
 8004880:	e005      	b.n	800488e <sine_model_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004882:	2212      	movs	r2, #18
 8004884:	2130      	movs	r1, #48	@ 0x30
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fa02 	bl	8004c90 <ai_platform_network_set_error>
  return false;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000a14 	.word	0x20000a14
 800489c:	2000006c 	.word	0x2000006c
 80048a0:	2000007c 	.word	0x2000007c
 80048a4:	2000008c 	.word	0x2000008c
 80048a8:	2000009c 	.word	0x2000009c
 80048ac:	200000ac 	.word	0x200000ac
 80048b0:	200000bc 	.word	0x200000bc

080048b4 <ai_sine_model_create>:


AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80048be:	2300      	movs	r3, #0
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	2305      	movs	r3, #5
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	2301      	movs	r3, #1
 80048c8:	4a04      	ldr	r2, [pc, #16]	@ (80048dc <ai_sine_model_create+0x28>)
 80048ca:	6839      	ldr	r1, [r7, #0]
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 facf 	bl	8004e70 <ai_platform_network_create>
 80048d2:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	200005f0 	.word	0x200005f0

080048e0 <ai_sine_model_inputs_get>:
}


AI_API_ENTRY
ai_buffer* ai_sine_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d104      	bne.n	80048fa <ai_sine_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80048f0:	4b06      	ldr	r3, [pc, #24]	@ (800490c <ai_sine_model_inputs_get+0x2c>)
 80048f2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a06      	ldr	r2, [pc, #24]	@ (8004910 <ai_sine_model_inputs_get+0x30>)
 80048f8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f9cd 	bl	8004c9c <ai_platform_inputs_get>
 8004902:	4603      	mov	r3, r0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	200005f0 	.word	0x200005f0
 8004910:	a1c00100 	.word	0xa1c00100

08004914 <ai_sine_model_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_sine_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d104      	bne.n	800492e <ai_sine_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004924:	4b06      	ldr	r3, [pc, #24]	@ (8004940 <ai_sine_model_outputs_get+0x2c>)
 8004926:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a06      	ldr	r2, [pc, #24]	@ (8004944 <ai_sine_model_outputs_get+0x30>)
 800492c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800492e:	6839      	ldr	r1, [r7, #0]
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa29 	bl	8004d88 <ai_platform_outputs_get>
 8004936:	4603      	mov	r3, r0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	200005f0 	.word	0x200005f0
 8004944:	a1c00100 	.word	0xa1c00100

08004948 <ai_sine_model_init>:


AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8004952:	6839      	ldr	r1, [r7, #0]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 facd 	bl	8004ef4 <ai_platform_network_init>
 800495a:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800495c:	2301      	movs	r3, #1
 800495e:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <ai_sine_model_init+0x22>
 8004966:	2300      	movs	r3, #0
 8004968:	e026      	b.n	80049b8 <ai_sine_model_init+0x70>
  ok &= sine_model_configure_weights(net_ctx, params);
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff ff15 	bl	800479c <sine_model_configure_weights>
 8004972:	4603      	mov	r3, r0
 8004974:	461a      	mov	r2, r3
 8004976:	7afb      	ldrb	r3, [r7, #11]
 8004978:	4013      	ands	r3, r2
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf14      	ite	ne
 800497e:	2301      	movne	r3, #1
 8004980:	2300      	moveq	r3, #0
 8004982:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, params);
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff fea8 	bl	80046dc <sine_model_configure_activations>
 800498c:	4603      	mov	r3, r0
 800498e:	461a      	mov	r2, r3
 8004990:	7afb      	ldrb	r3, [r7, #11]
 8004992:	4013      	ands	r3, r2
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fb76 	bl	8005090 <ai_platform_network_post_init>
 80049a4:	4603      	mov	r3, r0
 80049a6:	461a      	mov	r2, r3
 80049a8:	7afb      	ldrb	r3, [r7, #11]
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf14      	ite	ne
 80049b0:	2301      	movne	r3, #1
 80049b2:	2300      	moveq	r3, #0
 80049b4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80049b6:	7afb      	ldrb	r3, [r7, #11]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 fb8d 	bl	80050f0 <ai_platform_network_process>
 80049d6:	4603      	mov	r3, r0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <ai_sine_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_activations_buffer_get(const ai_handle ptr)
{
 80049e0:	b4b0      	push	{r4, r5, r7}
 80049e2:	b08f      	sub	sp, #60	@ 0x3c
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 80049ea:	4b15      	ldr	r3, [pc, #84]	@ (8004a40 <ai_sine_model_data_activations_buffer_get+0x60>)
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	623b      	str	r3, [r7, #32]
 80049f2:	2300      	movs	r3, #0
 80049f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049f6:	2300      	movs	r3, #0
 80049f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049fa:	2380      	movs	r3, #128	@ 0x80
 80049fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8004a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a06:	2204      	movs	r2, #4
 8004a08:	f362 231f 	bfi	r3, r2, #8, #24
 8004a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <ai_sine_model_data_activations_buffer_get+0x64>)
 8004a10:	f107 040c 	add.w	r4, r7, #12
 8004a14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004a1a:	f107 030c 	add.w	r3, r7, #12
 8004a1e:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	461d      	mov	r5, r3
 8004a24:	f107 041c 	add.w	r4, r7, #28
 8004a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004a30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	373c      	adds	r7, #60	@ 0x3c
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bcb0      	pop	{r4, r5, r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	00040440 	.word	0x00040440
 8004a44:	08009190 	.word	0x08009190

08004a48 <ai_sine_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_weights_buffer_get(const ai_handle ptr)
{
 8004a48:	b4b0      	push	{r4, r5, r7}
 8004a4a:	b08f      	sub	sp, #60	@ 0x3c
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8004a52:	4b15      	ldr	r3, [pc, #84]	@ (8004aa8 <ai_sine_model_data_weights_buffer_get+0x60>)
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	623b      	str	r3, [r7, #32]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5e:	2300      	movs	r3, #0
 8004a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a62:	f240 5304 	movw	r3, #1284	@ 0x504
 8004a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a70:	2204      	movs	r2, #4
 8004a72:	f362 231f 	bfi	r3, r2, #8, #24
 8004a76:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a78:	4b0c      	ldr	r3, [pc, #48]	@ (8004aac <ai_sine_model_data_weights_buffer_get+0x64>)
 8004a7a:	f107 040c 	add.w	r4, r7, #12
 8004a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004a84:	f107 030c 	add.w	r3, r7, #12
 8004a88:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_WEIGHTS_SIZE, 1, AI_SINE_MODEL_DATA_WEIGHTS_COUNT),
    AI_SINE_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	461d      	mov	r5, r3
 8004a8e:	f107 041c 	add.w	r4, r7, #28
 8004a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a96:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004a9a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	373c      	adds	r7, #60	@ 0x3c
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bcb0      	pop	{r4, r5, r7}
 8004aa6:	4770      	bx	lr
 8004aa8:	40040440 	.word	0x40040440
 8004aac:	080091a0 	.word	0x080091a0

08004ab0 <ai_sine_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_sine_model_data_weights_get(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_sine_model_weights_table);
 8004ab4:	4b02      	ldr	r3, [pc, #8]	@ (8004ac0 <ai_sine_model_data_weights_get+0x10>)

}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	20000694 	.word	0x20000694

08004ac4 <ai_buffer_get_size>:
 8004ac4:	b378      	cbz	r0, 8004b26 <ai_buffer_get_size+0x62>
 8004ac6:	b410      	push	{r4}
 8004ac8:	6803      	ldr	r3, [r0, #0]
 8004aca:	4a17      	ldr	r2, [pc, #92]	@ (8004b28 <ai_buffer_get_size+0x64>)
 8004acc:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8004ad0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d01e      	beq.n	8004b16 <ai_buffer_get_size+0x52>
 8004ad8:	6984      	ldr	r4, [r0, #24]
 8004ada:	6862      	ldr	r2, [r4, #4]
 8004adc:	7d03      	ldrb	r3, [r0, #20]
 8004ade:	6941      	ldr	r1, [r0, #20]
 8004ae0:	f1a3 0301 	sub.w	r3, r3, #1
 8004ae4:	fab3 f383 	clz	r3, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8004aee:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8004af2:	da0b      	bge.n	8004b0c <ai_buffer_get_size+0x48>
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d102      	bne.n	8004afe <ai_buffer_get_size+0x3a>
 8004af8:	2802      	cmp	r0, #2
 8004afa:	d007      	beq.n	8004b0c <ai_buffer_get_size+0x48>
 8004afc:	2302      	movs	r3, #2
 8004afe:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8004b02:	3301      	adds	r3, #1
 8004b04:	4298      	cmp	r0, r3
 8004b06:	fb01 f202 	mul.w	r2, r1, r2
 8004b0a:	d1f3      	bne.n	8004af4 <ai_buffer_get_size+0x30>
 8004b0c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	2900      	cmp	r1, #0
 8004b18:	d0de      	beq.n	8004ad8 <ai_buffer_get_size+0x14>
 8004b1a:	6984      	ldr	r4, [r0, #24]
 8004b1c:	6862      	ldr	r2, [r4, #4]
 8004b1e:	321f      	adds	r2, #31
 8004b20:	f022 021f 	bic.w	r2, r2, #31
 8004b24:	e7da      	b.n	8004adc <ai_buffer_get_size+0x18>
 8004b26:	4770      	bx	lr
 8004b28:	000400c0 	.word	0x000400c0

08004b2c <ai_buffer_array_sane>:
 8004b2c:	b138      	cbz	r0, 8004b3e <ai_buffer_array_sane+0x12>
 8004b2e:	6843      	ldr	r3, [r0, #4]
 8004b30:	b123      	cbz	r3, 8004b3c <ai_buffer_array_sane+0x10>
 8004b32:	8840      	ldrh	r0, [r0, #2]
 8004b34:	3800      	subs	r0, #0
 8004b36:	bf18      	it	ne
 8004b38:	2001      	movne	r0, #1
 8004b3a:	4770      	bx	lr
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	4770      	bx	lr

08004b40 <ai_platform_get_weights_map>:
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	d037      	beq.n	8004bb4 <ai_platform_get_weights_map+0x74>
 8004b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b46:	4604      	mov	r4, r0
 8004b48:	b1a0      	cbz	r0, 8004b74 <ai_platform_get_weights_map+0x34>
 8004b4a:	460f      	mov	r7, r1
 8004b4c:	b191      	cbz	r1, 8004b74 <ai_platform_get_weights_map+0x34>
 8004b4e:	4b25      	ldr	r3, [pc, #148]	@ (8004be4 <ai_platform_get_weights_map+0xa4>)
 8004b50:	6810      	ldr	r0, [r2, #0]
 8004b52:	4298      	cmp	r0, r3
 8004b54:	4615      	mov	r5, r2
 8004b56:	d00f      	beq.n	8004b78 <ai_platform_get_weights_map+0x38>
 8004b58:	6855      	ldr	r5, [r2, #4]
 8004b5a:	b15d      	cbz	r5, 8004b74 <ai_platform_get_weights_map+0x34>
 8004b5c:	682e      	ldr	r6, [r5, #0]
 8004b5e:	429e      	cmp	r6, r3
 8004b60:	d02a      	beq.n	8004bb8 <ai_platform_get_weights_map+0x78>
 8004b62:	f1a1 0001 	sub.w	r0, r1, #1
 8004b66:	6025      	str	r5, [r4, #0]
 8004b68:	fab0 f080 	clz	r0, r0
 8004b6c:	0940      	lsrs	r0, r0, #5
 8004b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b70:	42a7      	cmp	r7, r4
 8004b72:	d034      	beq.n	8004bde <ai_platform_get_weights_map+0x9e>
 8004b74:	2000      	movs	r0, #0
 8004b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b78:	1d10      	adds	r0, r2, #4
 8004b7a:	f7ff ffd7 	bl	8004b2c <ai_buffer_array_sane>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d0f8      	beq.n	8004b74 <ai_platform_get_weights_map+0x34>
 8004b82:	88eb      	ldrh	r3, [r5, #6]
 8004b84:	429f      	cmp	r7, r3
 8004b86:	d1f5      	bne.n	8004b74 <ai_platform_get_weights_map+0x34>
 8004b88:	f04f 0c00 	mov.w	ip, #0
 8004b8c:	1f20      	subs	r0, r4, #4
 8004b8e:	46e6      	mov	lr, ip
 8004b90:	68ab      	ldr	r3, [r5, #8]
 8004b92:	4463      	add	r3, ip
 8004b94:	f10c 0c1c 	add.w	ip, ip, #28
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	b12b      	cbz	r3, 8004ba8 <ai_platform_get_weights_map+0x68>
 8004b9c:	f10e 0e01 	add.w	lr, lr, #1
 8004ba0:	4577      	cmp	r7, lr
 8004ba2:	f840 3f04 	str.w	r3, [r0, #4]!
 8004ba6:	d1f3      	bne.n	8004b90 <ai_platform_get_weights_map+0x50>
 8004ba8:	eba7 000e 	sub.w	r0, r7, lr
 8004bac:	fab0 f080 	clz	r0, r0
 8004bb0:	0940      	lsrs	r0, r0, #5
 8004bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	4770      	bx	lr
 8004bb8:	1f20      	subs	r0, r4, #4
 8004bba:	462a      	mov	r2, r5
 8004bbc:	2400      	movs	r4, #0
 8004bbe:	e000      	b.n	8004bc2 <ai_platform_get_weights_map+0x82>
 8004bc0:	461c      	mov	r4, r3
 8004bc2:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004bc6:	42b3      	cmp	r3, r6
 8004bc8:	d0d2      	beq.n	8004b70 <ai_platform_get_weights_map+0x30>
 8004bca:	f840 3f04 	str.w	r3, [r0, #4]!
 8004bce:	1c63      	adds	r3, r4, #1
 8004bd0:	429f      	cmp	r7, r3
 8004bd2:	d1f5      	bne.n	8004bc0 <ai_platform_get_weights_map+0x80>
 8004bd4:	3402      	adds	r4, #2
 8004bd6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004bda:	42b3      	cmp	r3, r6
 8004bdc:	d1ca      	bne.n	8004b74 <ai_platform_get_weights_map+0x34>
 8004bde:	2001      	movs	r0, #1
 8004be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be2:	bf00      	nop
 8004be4:	a1facade 	.word	0xa1facade

08004be8 <ai_platform_get_activations_map>:
 8004be8:	2a00      	cmp	r2, #0
 8004bea:	d038      	beq.n	8004c5e <ai_platform_get_activations_map+0x76>
 8004bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bee:	4604      	mov	r4, r0
 8004bf0:	b1a0      	cbz	r0, 8004c1c <ai_platform_get_activations_map+0x34>
 8004bf2:	460f      	mov	r7, r1
 8004bf4:	b191      	cbz	r1, 8004c1c <ai_platform_get_activations_map+0x34>
 8004bf6:	4b25      	ldr	r3, [pc, #148]	@ (8004c8c <ai_platform_get_activations_map+0xa4>)
 8004bf8:	6810      	ldr	r0, [r2, #0]
 8004bfa:	4298      	cmp	r0, r3
 8004bfc:	4615      	mov	r5, r2
 8004bfe:	d00f      	beq.n	8004c20 <ai_platform_get_activations_map+0x38>
 8004c00:	6a15      	ldr	r5, [r2, #32]
 8004c02:	b15d      	cbz	r5, 8004c1c <ai_platform_get_activations_map+0x34>
 8004c04:	682e      	ldr	r6, [r5, #0]
 8004c06:	429e      	cmp	r6, r3
 8004c08:	d02b      	beq.n	8004c62 <ai_platform_get_activations_map+0x7a>
 8004c0a:	f1a1 0001 	sub.w	r0, r1, #1
 8004c0e:	6025      	str	r5, [r4, #0]
 8004c10:	fab0 f080 	clz	r0, r0
 8004c14:	0940      	lsrs	r0, r0, #5
 8004c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c18:	42a7      	cmp	r7, r4
 8004c1a:	d035      	beq.n	8004c88 <ai_platform_get_activations_map+0xa0>
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c20:	f102 000c 	add.w	r0, r2, #12
 8004c24:	f7ff ff82 	bl	8004b2c <ai_buffer_array_sane>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	d0f7      	beq.n	8004c1c <ai_platform_get_activations_map+0x34>
 8004c2c:	89eb      	ldrh	r3, [r5, #14]
 8004c2e:	429f      	cmp	r7, r3
 8004c30:	d1f4      	bne.n	8004c1c <ai_platform_get_activations_map+0x34>
 8004c32:	f04f 0c00 	mov.w	ip, #0
 8004c36:	1f20      	subs	r0, r4, #4
 8004c38:	46e6      	mov	lr, ip
 8004c3a:	692b      	ldr	r3, [r5, #16]
 8004c3c:	4463      	add	r3, ip
 8004c3e:	f10c 0c1c 	add.w	ip, ip, #28
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	b12b      	cbz	r3, 8004c52 <ai_platform_get_activations_map+0x6a>
 8004c46:	f10e 0e01 	add.w	lr, lr, #1
 8004c4a:	4577      	cmp	r7, lr
 8004c4c:	f840 3f04 	str.w	r3, [r0, #4]!
 8004c50:	d1f3      	bne.n	8004c3a <ai_platform_get_activations_map+0x52>
 8004c52:	eba7 000e 	sub.w	r0, r7, lr
 8004c56:	fab0 f080 	clz	r0, r0
 8004c5a:	0940      	lsrs	r0, r0, #5
 8004c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c5e:	2000      	movs	r0, #0
 8004c60:	4770      	bx	lr
 8004c62:	1f20      	subs	r0, r4, #4
 8004c64:	462a      	mov	r2, r5
 8004c66:	2400      	movs	r4, #0
 8004c68:	e000      	b.n	8004c6c <ai_platform_get_activations_map+0x84>
 8004c6a:	461c      	mov	r4, r3
 8004c6c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004c70:	42b3      	cmp	r3, r6
 8004c72:	d0d1      	beq.n	8004c18 <ai_platform_get_activations_map+0x30>
 8004c74:	f840 3f04 	str.w	r3, [r0, #4]!
 8004c78:	1c63      	adds	r3, r4, #1
 8004c7a:	429f      	cmp	r7, r3
 8004c7c:	d1f5      	bne.n	8004c6a <ai_platform_get_activations_map+0x82>
 8004c7e:	3402      	adds	r4, #2
 8004c80:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004c84:	42b3      	cmp	r3, r6
 8004c86:	d1c9      	bne.n	8004c1c <ai_platform_get_activations_map+0x34>
 8004c88:	2001      	movs	r0, #1
 8004c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c8c:	a1facade 	.word	0xa1facade

08004c90 <ai_platform_network_set_error>:
 8004c90:	b110      	cbz	r0, 8004c98 <ai_platform_network_set_error+0x8>
 8004c92:	300c      	adds	r0, #12
 8004c94:	f000 bc6e 	b.w	8005574 <core_set_error>
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop

08004c9c <ai_platform_inputs_get>:
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca0:	4b38      	ldr	r3, [pc, #224]	@ (8004d84 <ai_platform_inputs_get+0xe8>)
 8004ca2:	6802      	ldr	r2, [r0, #0]
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	4393      	bics	r3, r2
 8004ca8:	9003      	str	r0, [sp, #12]
 8004caa:	9102      	str	r1, [sp, #8]
 8004cac:	d160      	bne.n	8004d70 <ai_platform_inputs_get+0xd4>
 8004cae:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d04f      	beq.n	8004d54 <ai_platform_inputs_get+0xb8>
 8004cb4:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8004cb8:	f1ba 0f00 	cmp.w	sl, #0
 8004cbc:	d04a      	beq.n	8004d54 <ai_platform_inputs_get+0xb8>
 8004cbe:	f04f 0b00 	mov.w	fp, #0
 8004cc2:	465d      	mov	r5, fp
 8004cc4:	e016      	b.n	8004cf4 <ai_platform_inputs_get+0x58>
 8004cc6:	9901      	ldr	r1, [sp, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	507a      	str	r2, [r7, r1]
 8004ccc:	69b1      	ldr	r1, [r6, #24]
 8004cce:	684e      	ldr	r6, [r1, #4]
 8004cd0:	60a3      	str	r3, [r4, #8]
 8004cd2:	f04f 0201 	mov.w	r2, #1
 8004cd6:	7522      	strb	r2, [r4, #20]
 8004cd8:	6961      	ldr	r1, [r4, #20]
 8004cda:	6020      	str	r0, [r4, #0]
 8004cdc:	f369 211f 	bfi	r1, r9, #8, #24
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8004ce6:	e9c4 1805 	strd	r1, r8, [r4, #20]
 8004cea:	f8c4 c004 	str.w	ip, [r4, #4]
 8004cee:	3501      	adds	r5, #1
 8004cf0:	f10b 0b1c 	add.w	fp, fp, #28
 8004cf4:	f8ba 3000 	ldrh.w	r3, [sl]
 8004cf8:	42ab      	cmp	r3, r5
 8004cfa:	b2aa      	uxth	r2, r5
 8004cfc:	d93c      	bls.n	8004d78 <ai_platform_inputs_get+0xdc>
 8004cfe:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004d02:	00e9      	lsls	r1, r5, #3
 8004d04:	9101      	str	r1, [sp, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d036      	beq.n	8004d78 <ai_platform_inputs_get+0xdc>
 8004d0a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004d0e:	2e00      	cmp	r6, #0
 8004d10:	d032      	beq.n	8004d78 <ai_platform_inputs_get+0xdc>
 8004d12:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004d16:	69b2      	ldr	r2, [r6, #24]
 8004d18:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004d1c:	6810      	ldr	r0, [r2, #0]
 8004d1e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004d22:	68b3      	ldr	r3, [r6, #8]
 8004d24:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004d28:	f001 fab0 	bl	800628c <ai_array_to_buffer_fmt>
 8004d2c:	69b1      	ldr	r1, [r6, #24]
 8004d2e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8004d32:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004d36:	445c      	add	r4, fp
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0c8      	beq.n	8004cce <ai_platform_inputs_get+0x32>
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004d42:	6831      	ldr	r1, [r6, #0]
 8004d44:	6059      	str	r1, [r3, #4]
 8004d46:	b111      	cbz	r1, 8004d4e <ai_platform_inputs_get+0xb2>
 8004d48:	8849      	ldrh	r1, [r1, #2]
 8004d4a:	2900      	cmp	r1, #0
 8004d4c:	d1bb      	bne.n	8004cc6 <ai_platform_inputs_get+0x2a>
 8004d4e:	69b1      	ldr	r1, [r6, #24]
 8004d50:	2300      	movs	r3, #0
 8004d52:	e7bc      	b.n	8004cce <ai_platform_inputs_get+0x32>
 8004d54:	9803      	ldr	r0, [sp, #12]
 8004d56:	2218      	movs	r2, #24
 8004d58:	2111      	movs	r1, #17
 8004d5a:	300c      	adds	r0, #12
 8004d5c:	f000 fc0a 	bl	8005574 <core_set_error>
 8004d60:	2200      	movs	r2, #0
 8004d62:	4610      	mov	r0, r2
 8004d64:	9b02      	ldr	r3, [sp, #8]
 8004d66:	b103      	cbz	r3, 8004d6a <ai_platform_inputs_get+0xce>
 8004d68:	801a      	strh	r2, [r3, #0]
 8004d6a:	b005      	add	sp, #20
 8004d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d70:	2000      	movs	r0, #0
 8004d72:	b005      	add	sp, #20
 8004d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d78:	2a00      	cmp	r2, #0
 8004d7a:	d0eb      	beq.n	8004d54 <ai_platform_inputs_get+0xb8>
 8004d7c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004d80:	6858      	ldr	r0, [r3, #4]
 8004d82:	e7ef      	b.n	8004d64 <ai_platform_inputs_get+0xc8>
 8004d84:	a1c00100 	.word	0xa1c00100

08004d88 <ai_platform_outputs_get>:
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	4b37      	ldr	r3, [pc, #220]	@ (8004e6c <ai_platform_outputs_get+0xe4>)
 8004d8e:	6802      	ldr	r2, [r0, #0]
 8004d90:	b085      	sub	sp, #20
 8004d92:	4393      	bics	r3, r2
 8004d94:	9003      	str	r0, [sp, #12]
 8004d96:	9102      	str	r1, [sp, #8]
 8004d98:	d15d      	bne.n	8004e56 <ai_platform_outputs_get+0xce>
 8004d9a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d94c      	bls.n	8004e3a <ai_platform_outputs_get+0xb2>
 8004da0:	f04f 0b00 	mov.w	fp, #0
 8004da4:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8004da8:	465d      	mov	r5, fp
 8004daa:	46d8      	mov	r8, fp
 8004dac:	e016      	b.n	8004ddc <ai_platform_outputs_get+0x54>
 8004dae:	9a01      	ldr	r2, [sp, #4]
 8004db0:	2101      	movs	r1, #1
 8004db2:	50b9      	str	r1, [r7, r2]
 8004db4:	69b2      	ldr	r2, [r6, #24]
 8004db6:	6856      	ldr	r6, [r2, #4]
 8004db8:	6020      	str	r0, [r4, #0]
 8004dba:	f04f 0201 	mov.w	r2, #1
 8004dbe:	7522      	strb	r2, [r4, #20]
 8004dc0:	6960      	ldr	r0, [r4, #20]
 8004dc2:	f8c4 c004 	str.w	ip, [r4, #4]
 8004dc6:	f369 201f 	bfi	r0, r9, #8, #24
 8004dca:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8004dce:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8004dd2:	9b00      	ldr	r3, [sp, #0]
 8004dd4:	61a3      	str	r3, [r4, #24]
 8004dd6:	3501      	adds	r5, #1
 8004dd8:	f10b 0b1c 	add.w	fp, fp, #28
 8004ddc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004de0:	42ab      	cmp	r3, r5
 8004de2:	b2aa      	uxth	r2, r5
 8004de4:	d93b      	bls.n	8004e5e <ai_platform_outputs_get+0xd6>
 8004de6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004dea:	00e9      	lsls	r1, r5, #3
 8004dec:	9101      	str	r1, [sp, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d035      	beq.n	8004e5e <ai_platform_outputs_get+0xd6>
 8004df2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	d031      	beq.n	8004e5e <ai_platform_outputs_get+0xd6>
 8004dfa:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004dfe:	69b2      	ldr	r2, [r6, #24]
 8004e00:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004e04:	68b3      	ldr	r3, [r6, #8]
 8004e06:	6810      	ldr	r0, [r2, #0]
 8004e08:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004e0c:	68f3      	ldr	r3, [r6, #12]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	f001 fa3c 	bl	800628c <ai_array_to_buffer_fmt>
 8004e14:	69b2      	ldr	r2, [r6, #24]
 8004e16:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8004e1a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8004e1e:	445c      	add	r4, fp
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0c8      	beq.n	8004db6 <ai_platform_outputs_get+0x2e>
 8004e24:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 8004e28:	6832      	ldr	r2, [r6, #0]
 8004e2a:	605a      	str	r2, [r3, #4]
 8004e2c:	b112      	cbz	r2, 8004e34 <ai_platform_outputs_get+0xac>
 8004e2e:	8852      	ldrh	r2, [r2, #2]
 8004e30:	2a00      	cmp	r2, #0
 8004e32:	d1bc      	bne.n	8004dae <ai_platform_outputs_get+0x26>
 8004e34:	69b2      	ldr	r2, [r6, #24]
 8004e36:	2300      	movs	r3, #0
 8004e38:	e7bd      	b.n	8004db6 <ai_platform_outputs_get+0x2e>
 8004e3a:	9803      	ldr	r0, [sp, #12]
 8004e3c:	2218      	movs	r2, #24
 8004e3e:	2111      	movs	r1, #17
 8004e40:	300c      	adds	r0, #12
 8004e42:	f000 fb97 	bl	8005574 <core_set_error>
 8004e46:	2200      	movs	r2, #0
 8004e48:	4610      	mov	r0, r2
 8004e4a:	9b02      	ldr	r3, [sp, #8]
 8004e4c:	b103      	cbz	r3, 8004e50 <ai_platform_outputs_get+0xc8>
 8004e4e:	801a      	strh	r2, [r3, #0]
 8004e50:	b005      	add	sp, #20
 8004e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e56:	2000      	movs	r0, #0
 8004e58:	b005      	add	sp, #20
 8004e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	d0eb      	beq.n	8004e3a <ai_platform_outputs_get+0xb2>
 8004e62:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004e66:	6858      	ldr	r0, [r3, #4]
 8004e68:	e7ef      	b.n	8004e4a <ai_platform_outputs_get+0xc2>
 8004e6a:	bf00      	nop
 8004e6c:	a1c00100 	.word	0xa1c00100

08004e70 <ai_platform_network_create>:
 8004e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e74:	b083      	sub	sp, #12
 8004e76:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 8004e7a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8004e7e:	b320      	cbz	r0, 8004eca <ai_platform_network_create+0x5a>
 8004e80:	6002      	str	r2, [r0, #0]
 8004e82:	4616      	mov	r6, r2
 8004e84:	461f      	mov	r7, r3
 8004e86:	4604      	mov	r4, r0
 8004e88:	f000 fb72 	bl	8005570 <core_init>
 8004e8c:	b970      	cbnz	r0, 8004eac <ai_platform_network_create+0x3c>
 8004e8e:	2530      	movs	r5, #48	@ 0x30
 8004e90:	2300      	movs	r3, #0
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	2410      	movs	r4, #16
 8004e96:	4642      	mov	r2, r8
 8004e98:	4649      	mov	r1, r9
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	f001 fa78 	bl	8006390 <ai_version_get>
 8004ea0:	60b0      	str	r0, [r6, #8]
 8004ea2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8004ea6:	b003      	add	sp, #12
 8004ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004eac:	2200      	movs	r2, #0
 8004eae:	4649      	mov	r1, r9
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f001 fa6d 	bl	8006390 <ai_version_get>
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	4605      	mov	r5, r0
 8004eba:	2105      	movs	r1, #5
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	f001 fa67 	bl	8006390 <ai_version_get>
 8004ec2:	4285      	cmp	r5, r0
 8004ec4:	d008      	beq.n	8004ed8 <ai_platform_network_create+0x68>
 8004ec6:	2501      	movs	r5, #1
 8004ec8:	e7e2      	b.n	8004e90 <ai_platform_network_create+0x20>
 8004eca:	2510      	movs	r5, #16
 8004ecc:	462c      	mov	r4, r5
 8004ece:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8004ed2:	b003      	add	sp, #12
 8004ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ed8:	4b05      	ldr	r3, [pc, #20]	@ (8004ef0 <ai_platform_network_create+0x80>)
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	a801      	add	r0, sp, #4
 8004ede:	f000 fb55 	bl	800558c <ai_check_custom_types>
 8004ee2:	b110      	cbz	r0, 8004eea <ai_platform_network_create+0x7a>
 8004ee4:	2400      	movs	r4, #0
 8004ee6:	4625      	mov	r5, r4
 8004ee8:	e7d5      	b.n	8004e96 <ai_platform_network_create+0x26>
 8004eea:	2502      	movs	r5, #2
 8004eec:	e7d0      	b.n	8004e90 <ai_platform_network_create+0x20>
 8004eee:	bf00      	nop
 8004ef0:	84048403 	.word	0x84048403

08004ef4 <ai_platform_network_init>:
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	4b63      	ldr	r3, [pc, #396]	@ (8005088 <ai_platform_network_init+0x194>)
 8004efa:	6802      	ldr	r2, [r0, #0]
 8004efc:	4393      	bics	r3, r2
 8004efe:	b083      	sub	sp, #12
 8004f00:	d156      	bne.n	8004fb0 <ai_platform_network_init+0xbc>
 8004f02:	4604      	mov	r4, r0
 8004f04:	460f      	mov	r7, r1
 8004f06:	2900      	cmp	r1, #0
 8004f08:	f000 80a9 	beq.w	800505e <ai_platform_network_init+0x16a>
 8004f0c:	680b      	ldr	r3, [r1, #0]
 8004f0e:	495f      	ldr	r1, [pc, #380]	@ (800508c <ai_platform_network_init+0x198>)
 8004f10:	428b      	cmp	r3, r1
 8004f12:	d113      	bne.n	8004f3c <ai_platform_network_init+0x48>
 8004f14:	495c      	ldr	r1, [pc, #368]	@ (8005088 <ai_platform_network_init+0x194>)
 8004f16:	89bd      	ldrh	r5, [r7, #12]
 8004f18:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 8004f1c:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8004f20:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8004f24:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8004f28:	68be      	ldr	r6, [r7, #8]
 8004f2a:	428a      	cmp	r2, r1
 8004f2c:	d02c      	beq.n	8004f88 <ai_platform_network_init+0x94>
 8004f2e:	2303      	movs	r3, #3
 8004f30:	6123      	str	r3, [r4, #16]
 8004f32:	4627      	mov	r7, r4
 8004f34:	4638      	mov	r0, r7
 8004f36:	b003      	add	sp, #12
 8004f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	4638      	mov	r0, r7
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8004f46:	f7ff fdbd 	bl	8004ac4 <ai_buffer_get_size>
 8004f4a:	f107 081c 	add.w	r8, r7, #28
 8004f4e:	4605      	mov	r5, r0
 8004f50:	2101      	movs	r1, #1
 8004f52:	4640      	mov	r0, r8
 8004f54:	463e      	mov	r6, r7
 8004f56:	6a3f      	ldr	r7, [r7, #32]
 8004f58:	f7ff fdb4 	bl	8004ac4 <ai_buffer_get_size>
 8004f5c:	2d00      	cmp	r5, #0
 8004f5e:	9b01      	ldr	r3, [sp, #4]
 8004f60:	bf0a      	itet	eq
 8004f62:	46a9      	moveq	r9, r5
 8004f64:	f04f 0901 	movne.w	r9, #1
 8004f68:	462e      	moveq	r6, r5
 8004f6a:	b330      	cbz	r0, 8004fba <ai_platform_network_init+0xc6>
 8004f6c:	2f00      	cmp	r7, #0
 8004f6e:	f000 8084 	beq.w	800507a <ai_platform_network_init+0x186>
 8004f72:	f04f 0a01 	mov.w	sl, #1
 8004f76:	f1bb 0f00 	cmp.w	fp, #0
 8004f7a:	d021      	beq.n	8004fc0 <ai_platform_network_init+0xcc>
 8004f7c:	2500      	movs	r5, #0
 8004f7e:	6822      	ldr	r2, [r4, #0]
 8004f80:	4941      	ldr	r1, [pc, #260]	@ (8005088 <ai_platform_network_init+0x194>)
 8004f82:	428a      	cmp	r2, r1
 8004f84:	46ab      	mov	fp, r5
 8004f86:	d1d2      	bne.n	8004f2e <ai_platform_network_init+0x3a>
 8004f88:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8004f8a:	454a      	cmp	r2, r9
 8004f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800508c <ai_platform_network_init+0x198>)
 8004f8e:	d221      	bcs.n	8004fd4 <ai_platform_network_init+0xe0>
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d15c      	bne.n	800504e <ai_platform_network_init+0x15a>
 8004f94:	6266      	str	r6, [r4, #36]	@ 0x24
 8004f96:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8004f9a:	f8a4 b020 	strh.w	fp, [r4, #32]
 8004f9e:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8004fa2:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 8004fa6:	8525      	strh	r5, [r4, #40]	@ 0x28
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 fb19 	bl	80055e0 <ai_layers_init_all>
 8004fae:	e7be      	b.n	8004f2e <ai_platform_network_init+0x3a>
 8004fb0:	2700      	movs	r7, #0
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	b003      	add	sp, #12
 8004fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fba:	4680      	mov	r8, r0
 8004fbc:	4682      	mov	sl, r0
 8004fbe:	e7da      	b.n	8004f76 <ai_platform_network_init+0x82>
 8004fc0:	2d00      	cmp	r5, #0
 8004fc2:	d0dc      	beq.n	8004f7e <ai_platform_network_init+0x8a>
 8004fc4:	2212      	movs	r2, #18
 8004fc6:	2110      	movs	r1, #16
 8004fc8:	f104 000c 	add.w	r0, r4, #12
 8004fcc:	f000 fad2 	bl	8005574 <core_set_error>
 8004fd0:	465f      	mov	r7, fp
 8004fd2:	e7af      	b.n	8004f34 <ai_platform_network_init+0x40>
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d0dd      	beq.n	8004f94 <ai_platform_network_init+0xa0>
 8004fd8:	f1b9 0f00 	cmp.w	r9, #0
 8004fdc:	d018      	beq.n	8005010 <ai_platform_network_init+0x11c>
 8004fde:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004fe8:	2700      	movs	r7, #0
 8004fea:	4699      	mov	r9, r3
 8004fec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004fee:	eb06 0e07 	add.w	lr, r6, r7
 8004ff2:	eb03 0c07 	add.w	ip, r3, r7
 8004ff6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004ffa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004ffe:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8005002:	371c      	adds	r7, #28
 8005004:	45b9      	cmp	r9, r7
 8005006:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800500a:	d1ef      	bne.n	8004fec <ai_platform_network_init+0xf8>
 800500c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005010:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005012:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8005016:	4553      	cmp	r3, sl
 8005018:	f8a4 b020 	strh.w	fp, [r4, #32]
 800501c:	d325      	bcc.n	800506a <ai_platform_network_init+0x176>
 800501e:	f1ba 0f00 	cmp.w	sl, #0
 8005022:	d0be      	beq.n	8004fa2 <ai_platform_network_init+0xae>
 8005024:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8005028:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800502c:	f04f 0c00 	mov.w	ip, #0
 8005030:	eb08 070c 	add.w	r7, r8, ip
 8005034:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005036:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005038:	4466      	add	r6, ip
 800503a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800503c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005040:	f10c 0c1c 	add.w	ip, ip, #28
 8005044:	45f4      	cmp	ip, lr
 8005046:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800504a:	d1f1      	bne.n	8005030 <ai_platform_network_init+0x13c>
 800504c:	e7a9      	b.n	8004fa2 <ai_platform_network_init+0xae>
 800504e:	2212      	movs	r2, #18
 8005050:	2116      	movs	r1, #22
 8005052:	f104 000c 	add.w	r0, r4, #12
 8005056:	f000 fa8d 	bl	8005574 <core_set_error>
 800505a:	2700      	movs	r7, #0
 800505c:	e76a      	b.n	8004f34 <ai_platform_network_init+0x40>
 800505e:	2211      	movs	r2, #17
 8005060:	2110      	movs	r1, #16
 8005062:	300c      	adds	r0, #12
 8005064:	f000 fa86 	bl	8005574 <core_set_error>
 8005068:	e764      	b.n	8004f34 <ai_platform_network_init+0x40>
 800506a:	2213      	movs	r2, #19
 800506c:	2116      	movs	r1, #22
 800506e:	f104 000c 	add.w	r0, r4, #12
 8005072:	f000 fa7f 	bl	8005574 <core_set_error>
 8005076:	2700      	movs	r7, #0
 8005078:	e75c      	b.n	8004f34 <ai_platform_network_init+0x40>
 800507a:	2213      	movs	r2, #19
 800507c:	2110      	movs	r1, #16
 800507e:	f104 000c 	add.w	r0, r4, #12
 8005082:	f000 fa77 	bl	8005574 <core_set_error>
 8005086:	e755      	b.n	8004f34 <ai_platform_network_init+0x40>
 8005088:	a1c00100 	.word	0xa1c00100
 800508c:	a1facade 	.word	0xa1facade

08005090 <ai_platform_network_post_init>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4b16      	ldr	r3, [pc, #88]	@ (80050ec <ai_platform_network_post_init+0x5c>)
 8005094:	6802      	ldr	r2, [r0, #0]
 8005096:	ea02 0103 	and.w	r1, r2, r3
 800509a:	4393      	bics	r3, r2
 800509c:	d108      	bne.n	80050b0 <ai_platform_network_post_init+0x20>
 800509e:	6903      	ldr	r3, [r0, #16]
 80050a0:	f013 0502 	ands.w	r5, r3, #2
 80050a4:	4604      	mov	r4, r0
 80050a6:	d005      	beq.n	80050b4 <ai_platform_network_post_init+0x24>
 80050a8:	428a      	cmp	r2, r1
 80050aa:	d00a      	beq.n	80050c2 <ai_platform_network_post_init+0x32>
 80050ac:	2001      	movs	r0, #1
 80050ae:	bd38      	pop	{r3, r4, r5, pc}
 80050b0:	2000      	movs	r0, #0
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	2210      	movs	r2, #16
 80050b6:	2111      	movs	r1, #17
 80050b8:	300c      	adds	r0, #12
 80050ba:	f000 fa5b 	bl	8005574 <core_set_error>
 80050be:	4628      	mov	r0, r5
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	f000 fa9b 	bl	80055fc <ai_layers_post_init_all>
 80050c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0ef      	beq.n	80050ac <ai_platform_network_post_init+0x1c>
 80050cc:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80050ce:	e008      	b.n	80050e2 <ai_platform_network_post_init+0x52>
 80050d0:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 80050d4:	4798      	blx	r3
 80050d6:	692b      	ldr	r3, [r5, #16]
 80050d8:	42ab      	cmp	r3, r5
 80050da:	d0e7      	beq.n	80050ac <ai_platform_network_post_init+0x1c>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0e5      	beq.n	80050ac <ai_platform_network_post_init+0x1c>
 80050e0:	461d      	mov	r5, r3
 80050e2:	4629      	mov	r1, r5
 80050e4:	2000      	movs	r0, #0
 80050e6:	2d00      	cmp	r5, #0
 80050e8:	d1f2      	bne.n	80050d0 <ai_platform_network_post_init+0x40>
 80050ea:	e7df      	b.n	80050ac <ai_platform_network_post_init+0x1c>
 80050ec:	a1c00100 	.word	0xa1c00100

080050f0 <ai_platform_network_process>:
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f4:	4bb5      	ldr	r3, [pc, #724]	@ (80053cc <ai_platform_network_process+0x2dc>)
 80050f6:	4605      	mov	r5, r0
 80050f8:	6800      	ldr	r0, [r0, #0]
 80050fa:	b085      	sub	sp, #20
 80050fc:	4383      	bics	r3, r0
 80050fe:	9202      	str	r2, [sp, #8]
 8005100:	f040 8140 	bne.w	8005384 <ai_platform_network_process+0x294>
 8005104:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8125 	beq.w	8005356 <ai_platform_network_process+0x266>
 800510c:	692b      	ldr	r3, [r5, #16]
 800510e:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2700      	movs	r7, #0
 8005118:	2b03      	cmp	r3, #3
 800511a:	61af      	str	r7, [r5, #24]
 800511c:	f040 8137 	bne.w	800538e <ai_platform_network_process+0x29e>
 8005120:	2900      	cmp	r1, #0
 8005122:	f000 811e 	beq.w	8005362 <ai_platform_network_process+0x272>
 8005126:	f1ba 0f00 	cmp.w	sl, #0
 800512a:	f000 811a 	beq.w	8005362 <ai_platform_network_process+0x272>
 800512e:	f8ba 3000 	ldrh.w	r3, [sl]
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 8115 	beq.w	8005362 <ai_platform_network_process+0x272>
 8005138:	698b      	ldr	r3, [r1, #24]
 800513a:	9503      	str	r5, [sp, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	460e      	mov	r6, r1
 8005142:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d072      	beq.n	8005230 <ai_platform_network_process+0x140>
 800514a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800514e:	2c00      	cmp	r4, #0
 8005150:	d06e      	beq.n	8005230 <ai_platform_network_process+0x140>
 8005152:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005156:	f8d3 9000 	ldr.w	r9, [r3]
 800515a:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800515e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005162:	f000 81d3 	beq.w	800550c <ai_platform_network_process+0x41c>
 8005166:	69a3      	ldr	r3, [r4, #24]
 8005168:	2101      	movs	r1, #1
 800516a:	4630      	mov	r0, r6
 800516c:	685d      	ldr	r5, [r3, #4]
 800516e:	f7ff fca9 	bl	8004ac4 <ai_buffer_get_size>
 8005172:	4285      	cmp	r5, r0
 8005174:	f0c0 8116 	bcc.w	80053a4 <ai_platform_network_process+0x2b4>
 8005178:	68e0      	ldr	r0, [r4, #12]
 800517a:	69b1      	ldr	r1, [r6, #24]
 800517c:	68c2      	ldr	r2, [r0, #12]
 800517e:	68cb      	ldr	r3, [r1, #12]
 8005180:	429a      	cmp	r2, r3
 8005182:	f040 810f 	bne.w	80053a4 <ai_platform_network_process+0x2b4>
 8005186:	6882      	ldr	r2, [r0, #8]
 8005188:	688b      	ldr	r3, [r1, #8]
 800518a:	429a      	cmp	r2, r3
 800518c:	f040 810a 	bne.w	80053a4 <ai_platform_network_process+0x2b4>
 8005190:	6842      	ldr	r2, [r0, #4]
 8005192:	684b      	ldr	r3, [r1, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	f040 8105 	bne.w	80053a4 <ai_platform_network_process+0x2b4>
 800519a:	69a3      	ldr	r3, [r4, #24]
 800519c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051a0:	f001 f8e4 	bl	800636c <ai_array_get_data_byte_size>
 80051a4:	4605      	mov	r5, r0
 80051a6:	4620      	mov	r0, r4
 80051a8:	f001 f8f8 	bl	800639c <get_tensor_byte_size>
 80051ac:	4285      	cmp	r5, r0
 80051ae:	f0c0 80f9 	bcc.w	80053a4 <ai_platform_network_process+0x2b4>
 80051b2:	69a3      	ldr	r3, [r4, #24]
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	f001 f869 	bl	800628c <ai_array_to_buffer_fmt>
 80051ba:	6833      	ldr	r3, [r6, #0]
 80051bc:	4058      	eors	r0, r3
 80051be:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80051c2:	f040 81a5 	bne.w	8005510 <ai_platform_network_process+0x420>
 80051c6:	6873      	ldr	r3, [r6, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 819f 	beq.w	800550c <ai_platform_network_process+0x41c>
 80051ce:	69b3      	ldr	r3, [r6, #24]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 81a5 	beq.w	8005522 <ai_platform_network_process+0x432>
 80051d8:	9a01      	ldr	r2, [sp, #4]
 80051da:	429a      	cmp	r2, r3
 80051dc:	bf38      	it	cc
 80051de:	461a      	movcc	r2, r3
 80051e0:	4620      	mov	r0, r4
 80051e2:	9201      	str	r2, [sp, #4]
 80051e4:	f001 f8da 	bl	800639c <get_tensor_byte_size>
 80051e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80051ec:	69b3      	ldr	r3, [r6, #24]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	fb00 f303 	mul.w	r3, r0, r3
 80051f4:	f8c8 300c 	str.w	r3, [r8, #12]
 80051f8:	6871      	ldr	r1, [r6, #4]
 80051fa:	f8c8 1004 	str.w	r1, [r8, #4]
 80051fe:	440b      	add	r3, r1
 8005200:	f849 300b 	str.w	r3, [r9, fp]
 8005204:	69a0      	ldr	r0, [r4, #24]
 8005206:	6803      	ldr	r3, [r0, #0]
 8005208:	009a      	lsls	r2, r3, #2
 800520a:	f107 0701 	add.w	r7, r7, #1
 800520e:	f106 061c 	add.w	r6, r6, #28
 8005212:	f100 80b1 	bmi.w	8005378 <ai_platform_network_process+0x288>
 8005216:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	4419      	add	r1, r3
 800521e:	6081      	str	r1, [r0, #8]
 8005220:	69a3      	ldr	r3, [r4, #24]
 8005222:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005226:	60da      	str	r2, [r3, #12]
 8005228:	f8ba 3000 	ldrh.w	r3, [sl]
 800522c:	42bb      	cmp	r3, r7
 800522e:	d888      	bhi.n	8005142 <ai_platform_network_process+0x52>
 8005230:	9d03      	ldr	r5, [sp, #12]
 8005232:	9b02      	ldr	r3, [sp, #8]
 8005234:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 817c 	beq.w	8005534 <ai_platform_network_process+0x444>
 800523c:	2a01      	cmp	r2, #1
 800523e:	f240 80bd 	bls.w	80053bc <ai_platform_network_process+0x2cc>
 8005242:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8005246:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80b6 	beq.w	80053bc <ai_platform_network_process+0x2cc>
 8005250:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005254:	2700      	movs	r7, #0
 8005256:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 80bd 	beq.w	80053da <ai_platform_network_process+0x2ea>
 8005260:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8005264:	2e00      	cmp	r6, #0
 8005266:	f000 80b8 	beq.w	80053da <ai_platform_network_process+0x2ea>
 800526a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800526e:	681c      	ldr	r4, [r3, #0]
 8005270:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8005274:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8005278:	f000 8160 	beq.w	800553c <ai_platform_network_process+0x44c>
 800527c:	69b3      	ldr	r3, [r6, #24]
 800527e:	2101      	movs	r1, #1
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	9302      	str	r3, [sp, #8]
 8005284:	4658      	mov	r0, fp
 8005286:	f7ff fc1d 	bl	8004ac4 <ai_buffer_get_size>
 800528a:	9b02      	ldr	r3, [sp, #8]
 800528c:	4283      	cmp	r3, r0
 800528e:	f0c0 8095 	bcc.w	80053bc <ai_platform_network_process+0x2cc>
 8005292:	68f0      	ldr	r0, [r6, #12]
 8005294:	f8db 1018 	ldr.w	r1, [fp, #24]
 8005298:	68c2      	ldr	r2, [r0, #12]
 800529a:	68cb      	ldr	r3, [r1, #12]
 800529c:	429a      	cmp	r2, r3
 800529e:	f040 808d 	bne.w	80053bc <ai_platform_network_process+0x2cc>
 80052a2:	6882      	ldr	r2, [r0, #8]
 80052a4:	688b      	ldr	r3, [r1, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	f040 8088 	bne.w	80053bc <ai_platform_network_process+0x2cc>
 80052ac:	6842      	ldr	r2, [r0, #4]
 80052ae:	684b      	ldr	r3, [r1, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	f040 8083 	bne.w	80053bc <ai_platform_network_process+0x2cc>
 80052b6:	69b3      	ldr	r3, [r6, #24]
 80052b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052bc:	f001 f856 	bl	800636c <ai_array_get_data_byte_size>
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	4630      	mov	r0, r6
 80052c4:	f001 f86a 	bl	800639c <get_tensor_byte_size>
 80052c8:	9b02      	ldr	r3, [sp, #8]
 80052ca:	4283      	cmp	r3, r0
 80052cc:	d376      	bcc.n	80053bc <ai_platform_network_process+0x2cc>
 80052ce:	69b3      	ldr	r3, [r6, #24]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	f000 ffdb 	bl	800628c <ai_array_to_buffer_fmt>
 80052d6:	f8db 3000 	ldr.w	r3, [fp]
 80052da:	4058      	eors	r0, r3
 80052dc:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80052e0:	f040 8134 	bne.w	800554c <ai_platform_network_process+0x45c>
 80052e4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8127 	beq.w	800553c <ai_platform_network_process+0x44c>
 80052ee:	f8db 3018 	ldr.w	r3, [fp, #24]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8133 	beq.w	8005560 <ai_platform_network_process+0x470>
 80052fa:	9a01      	ldr	r2, [sp, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	bf38      	it	cc
 8005300:	461a      	movcc	r2, r3
 8005302:	4630      	mov	r0, r6
 8005304:	9201      	str	r2, [sp, #4]
 8005306:	f001 f849 	bl	800639c <get_tensor_byte_size>
 800530a:	f8c9 0008 	str.w	r0, [r9, #8]
 800530e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	fb00 f303 	mul.w	r3, r0, r3
 8005318:	f8c9 300c 	str.w	r3, [r9, #12]
 800531c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005320:	f8c9 1004 	str.w	r1, [r9, #4]
 8005324:	440b      	add	r3, r1
 8005326:	f844 300a 	str.w	r3, [r4, sl]
 800532a:	69b0      	ldr	r0, [r6, #24]
 800532c:	6803      	ldr	r3, [r0, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	f107 0701 	add.w	r7, r7, #1
 8005334:	f10b 0b1c 	add.w	fp, fp, #28
 8005338:	d44a      	bmi.n	80053d0 <ai_platform_network_process+0x2e0>
 800533a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	4419      	add	r1, r3
 8005342:	6081      	str	r1, [r0, #8]
 8005344:	69b3      	ldr	r3, [r6, #24]
 8005346:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005350:	42bb      	cmp	r3, r7
 8005352:	d880      	bhi.n	8005256 <ai_platform_network_process+0x166>
 8005354:	e041      	b.n	80053da <ai_platform_network_process+0x2ea>
 8005356:	692a      	ldr	r2, [r5, #16]
 8005358:	61ab      	str	r3, [r5, #24]
 800535a:	f002 0203 	and.w	r2, r2, #3
 800535e:	2a03      	cmp	r2, #3
 8005360:	d115      	bne.n	800538e <ai_platform_network_process+0x29e>
 8005362:	2217      	movs	r2, #23
 8005364:	2112      	movs	r1, #18
 8005366:	f105 000c 	add.w	r0, r5, #12
 800536a:	f000 f903 	bl	8005574 <core_set_error>
 800536e:	2400      	movs	r4, #0
 8005370:	4620      	mov	r0, r4
 8005372:	b005      	add	sp, #20
 8005374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005378:	f8ba 3000 	ldrh.w	r3, [sl]
 800537c:	429f      	cmp	r7, r3
 800537e:	f4ff aee0 	bcc.w	8005142 <ai_platform_network_process+0x52>
 8005382:	e755      	b.n	8005230 <ai_platform_network_process+0x140>
 8005384:	2400      	movs	r4, #0
 8005386:	4620      	mov	r0, r4
 8005388:	b005      	add	sp, #20
 800538a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538e:	2230      	movs	r2, #48	@ 0x30
 8005390:	2111      	movs	r1, #17
 8005392:	f105 000c 	add.w	r0, r5, #12
 8005396:	f000 f8ed 	bl	8005574 <core_set_error>
 800539a:	2400      	movs	r4, #0
 800539c:	4620      	mov	r0, r4
 800539e:	b005      	add	sp, #20
 80053a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a4:	9d03      	ldr	r5, [sp, #12]
 80053a6:	2218      	movs	r2, #24
 80053a8:	2112      	movs	r1, #18
 80053aa:	f105 000c 	add.w	r0, r5, #12
 80053ae:	f000 f8e1 	bl	8005574 <core_set_error>
 80053b2:	2400      	movs	r4, #0
 80053b4:	4620      	mov	r0, r4
 80053b6:	b005      	add	sp, #20
 80053b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053bc:	2218      	movs	r2, #24
 80053be:	2113      	movs	r1, #19
 80053c0:	f105 000c 	add.w	r0, r5, #12
 80053c4:	f000 f8d6 	bl	8005574 <core_set_error>
 80053c8:	2400      	movs	r4, #0
 80053ca:	e7d1      	b.n	8005370 <ai_platform_network_process+0x280>
 80053cc:	a1c00100 	.word	0xa1c00100
 80053d0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80053d4:	429f      	cmp	r7, r3
 80053d6:	f4ff af3e 	bcc.w	8005256 <ai_platform_network_process+0x166>
 80053da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80053de:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80053e0:	832b      	strh	r3, [r5, #24]
 80053e2:	2a00      	cmp	r2, #0
 80053e4:	f040 808c 	bne.w	8005500 <ai_platform_network_process+0x410>
 80053e8:	4616      	mov	r6, r2
 80053ea:	4617      	mov	r7, r2
 80053ec:	8b6c      	ldrh	r4, [r5, #26]
 80053ee:	429c      	cmp	r4, r3
 80053f0:	bf38      	it	cc
 80053f2:	46ab      	movcc	fp, r5
 80053f4:	d2bc      	bcs.n	8005370 <ai_platform_network_process+0x280>
 80053f6:	2e00      	cmp	r6, #0
 80053f8:	d030      	beq.n	800545c <ai_platform_network_process+0x36c>
 80053fa:	f04f 0800 	mov.w	r8, #0
 80053fe:	e014      	b.n	800542a <ai_platform_network_process+0x33a>
 8005400:	6882      	ldr	r2, [r0, #8]
 8005402:	68c5      	ldr	r5, [r0, #12]
 8005404:	6863      	ldr	r3, [r4, #4]
 8005406:	1b52      	subs	r2, r2, r5
 8005408:	4413      	add	r3, r2
 800540a:	6083      	str	r3, [r0, #8]
 800540c:	698b      	ldr	r3, [r1, #24]
 800540e:	6862      	ldr	r2, [r4, #4]
 8005410:	60da      	str	r2, [r3, #12]
 8005412:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8005416:	f859 200a 	ldr.w	r2, [r9, sl]
 800541a:	440b      	add	r3, r1
 800541c:	4293      	cmp	r3, r2
 800541e:	bf24      	itt	cs
 8005420:	68e3      	ldrcs	r3, [r4, #12]
 8005422:	1ad3      	subcs	r3, r2, r3
 8005424:	6063      	str	r3, [r4, #4]
 8005426:	f108 0801 	add.w	r8, r8, #1
 800542a:	8833      	ldrh	r3, [r6, #0]
 800542c:	4543      	cmp	r3, r8
 800542e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8005432:	d913      	bls.n	800545c <ai_platform_network_process+0x36c>
 8005434:	6873      	ldr	r3, [r6, #4]
 8005436:	b18b      	cbz	r3, 800545c <ai_platform_network_process+0x36c>
 8005438:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800543c:	b171      	cbz	r1, 800545c <ai_platform_network_process+0x36c>
 800543e:	6988      	ldr	r0, [r1, #24]
 8005440:	68b2      	ldr	r2, [r6, #8]
 8005442:	6803      	ldr	r3, [r0, #0]
 8005444:	f8d2 9000 	ldr.w	r9, [r2]
 8005448:	009d      	lsls	r5, r3, #2
 800544a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800544e:	d5d7      	bpl.n	8005400 <ai_platform_network_process+0x310>
 8005450:	6881      	ldr	r1, [r0, #8]
 8005452:	68a2      	ldr	r2, [r4, #8]
 8005454:	6860      	ldr	r0, [r4, #4]
 8005456:	f000 fe77 	bl	8006148 <st_int8_copy>
 800545a:	e7da      	b.n	8005412 <ai_platform_network_process+0x322>
 800545c:	4658      	mov	r0, fp
 800545e:	f000 f8e1 	bl	8005624 <ai_layers_forward_all>
 8005462:	2f00      	cmp	r7, #0
 8005464:	d03d      	beq.n	80054e2 <ai_platform_network_process+0x3f2>
 8005466:	2400      	movs	r4, #0
 8005468:	e016      	b.n	8005498 <ai_platform_network_process+0x3a8>
 800546a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800546e:	f859 100a 	ldr.w	r1, [r9, sl]
 8005472:	4413      	add	r3, r2
 8005474:	428b      	cmp	r3, r1
 8005476:	bf24      	itt	cs
 8005478:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800547c:	1acb      	subcs	r3, r1, r3
 800547e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005482:	6981      	ldr	r1, [r0, #24]
 8005484:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005488:	1b52      	subs	r2, r2, r5
 800548a:	4413      	add	r3, r2
 800548c:	608b      	str	r3, [r1, #8]
 800548e:	6983      	ldr	r3, [r0, #24]
 8005490:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005494:	60da      	str	r2, [r3, #12]
 8005496:	3401      	adds	r4, #1
 8005498:	883b      	ldrh	r3, [r7, #0]
 800549a:	42a3      	cmp	r3, r4
 800549c:	d921      	bls.n	80054e2 <ai_platform_network_process+0x3f2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	b1fb      	cbz	r3, 80054e2 <ai_platform_network_process+0x3f2>
 80054a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80054a6:	b1e0      	cbz	r0, 80054e2 <ai_platform_network_process+0x3f2>
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	6983      	ldr	r3, [r0, #24]
 80054ac:	f8d2 9000 	ldr.w	r9, [r2]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	0092      	lsls	r2, r2, #2
 80054b4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80054b8:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80054bc:	d5d5      	bpl.n	800546a <ai_platform_network_process+0x37a>
 80054be:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80054c2:	6898      	ldr	r0, [r3, #8]
 80054c4:	f000 fe40 	bl	8006148 <st_int8_copy>
 80054c8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80054cc:	f859 200a 	ldr.w	r2, [r9, sl]
 80054d0:	440b      	add	r3, r1
 80054d2:	4293      	cmp	r3, r2
 80054d4:	bf24      	itt	cs
 80054d6:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80054da:	1ad3      	subcs	r3, r2, r3
 80054dc:	f8c8 3004 	str.w	r3, [r8, #4]
 80054e0:	e7d9      	b.n	8005496 <ai_platform_network_process+0x3a6>
 80054e2:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80054e6:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80054ea:	3401      	adds	r4, #1
 80054ec:	b2a4      	uxth	r4, r4
 80054ee:	42a3      	cmp	r3, r4
 80054f0:	f8ab 401a 	strh.w	r4, [fp, #26]
 80054f4:	f63f af7f 	bhi.w	80053f6 <ai_platform_network_process+0x306>
 80054f8:	4620      	mov	r0, r4
 80054fa:	b005      	add	sp, #20
 80054fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005500:	2a01      	cmp	r2, #1
 8005502:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8005504:	d02a      	beq.n	800555c <ai_platform_network_process+0x46c>
 8005506:	f106 070c 	add.w	r7, r6, #12
 800550a:	e76f      	b.n	80053ec <ai_platform_network_process+0x2fc>
 800550c:	9d03      	ldr	r5, [sp, #12]
 800550e:	e728      	b.n	8005362 <ai_platform_network_process+0x272>
 8005510:	9d03      	ldr	r5, [sp, #12]
 8005512:	2219      	movs	r2, #25
 8005514:	2112      	movs	r1, #18
 8005516:	f105 000c 	add.w	r0, r5, #12
 800551a:	f000 f82b 	bl	8005574 <core_set_error>
 800551e:	2400      	movs	r4, #0
 8005520:	e726      	b.n	8005370 <ai_platform_network_process+0x280>
 8005522:	9d03      	ldr	r5, [sp, #12]
 8005524:	4604      	mov	r4, r0
 8005526:	2221      	movs	r2, #33	@ 0x21
 8005528:	2112      	movs	r1, #18
 800552a:	f105 000c 	add.w	r0, r5, #12
 800552e:	f000 f821 	bl	8005574 <core_set_error>
 8005532:	e71d      	b.n	8005370 <ai_platform_network_process+0x280>
 8005534:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005538:	832b      	strh	r3, [r5, #24]
 800553a:	e752      	b.n	80053e2 <ai_platform_network_process+0x2f2>
 800553c:	2217      	movs	r2, #23
 800553e:	2113      	movs	r1, #19
 8005540:	f105 000c 	add.w	r0, r5, #12
 8005544:	f000 f816 	bl	8005574 <core_set_error>
 8005548:	2400      	movs	r4, #0
 800554a:	e711      	b.n	8005370 <ai_platform_network_process+0x280>
 800554c:	2219      	movs	r2, #25
 800554e:	2113      	movs	r1, #19
 8005550:	f105 000c 	add.w	r0, r5, #12
 8005554:	f000 f80e 	bl	8005574 <core_set_error>
 8005558:	2400      	movs	r4, #0
 800555a:	e709      	b.n	8005370 <ai_platform_network_process+0x280>
 800555c:	2700      	movs	r7, #0
 800555e:	e745      	b.n	80053ec <ai_platform_network_process+0x2fc>
 8005560:	4604      	mov	r4, r0
 8005562:	2221      	movs	r2, #33	@ 0x21
 8005564:	2113      	movs	r1, #19
 8005566:	f105 000c 	add.w	r0, r5, #12
 800556a:	f000 f803 	bl	8005574 <core_set_error>
 800556e:	e6ff      	b.n	8005370 <ai_platform_network_process+0x280>

08005570 <core_init>:
 8005570:	2001      	movs	r0, #1
 8005572:	4770      	bx	lr

08005574 <core_set_error>:
 8005574:	4603      	mov	r3, r0
 8005576:	7800      	ldrb	r0, [r0, #0]
 8005578:	b108      	cbz	r0, 800557e <core_set_error+0xa>
 800557a:	2000      	movs	r0, #0
 800557c:	4770      	bx	lr
 800557e:	7019      	strb	r1, [r3, #0]
 8005580:	6819      	ldr	r1, [r3, #0]
 8005582:	f362 211f 	bfi	r1, r2, #8, #24
 8005586:	2001      	movs	r0, #1
 8005588:	6019      	str	r1, [r3, #0]
 800558a:	4770      	bx	lr

0800558c <ai_check_custom_types>:
 800558c:	b082      	sub	sp, #8
 800558e:	4b13      	ldr	r3, [pc, #76]	@ (80055dc <ai_check_custom_types+0x50>)
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	b118      	cbz	r0, 800559c <ai_check_custom_types+0x10>
 8005594:	7803      	ldrb	r3, [r0, #0]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d002      	beq.n	80055a0 <ai_check_custom_types+0x14>
 800559a:	2000      	movs	r0, #0
 800559c:	b002      	add	sp, #8
 800559e:	4770      	bx	lr
 80055a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <ai_check_custom_types+0x26>
 80055a8:	2001      	movs	r0, #1
 80055aa:	f080 0001 	eor.w	r0, r0, #1
 80055ae:	b002      	add	sp, #8
 80055b0:	4770      	bx	lr
 80055b2:	7842      	ldrb	r2, [r0, #1]
 80055b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	f100 0001 	add.w	r0, r0, #1
 80055be:	d1f3      	bne.n	80055a8 <ai_check_custom_types+0x1c>
 80055c0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80055c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d1ed      	bne.n	80055a8 <ai_check_custom_types+0x1c>
 80055cc:	7842      	ldrb	r2, [r0, #1]
 80055ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d1e8      	bne.n	80055a8 <ai_check_custom_types+0x1c>
 80055d6:	2000      	movs	r0, #0
 80055d8:	e7e7      	b.n	80055aa <ai_check_custom_types+0x1e>
 80055da:	bf00      	nop
 80055dc:	84048403 	.word	0x84048403

080055e0 <ai_layers_init_all>:
 80055e0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80055e2:	2100      	movs	r1, #0
 80055e4:	b143      	cbz	r3, 80055f8 <ai_layers_init_all+0x18>
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	60d8      	str	r0, [r3, #12]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	f101 0101 	add.w	r1, r1, #1
 80055f0:	d002      	beq.n	80055f8 <ai_layers_init_all+0x18>
 80055f2:	b10a      	cbz	r2, 80055f8 <ai_layers_init_all+0x18>
 80055f4:	4613      	mov	r3, r2
 80055f6:	e7f5      	b.n	80055e4 <ai_layers_init_all+0x4>
 80055f8:	4608      	mov	r0, r1
 80055fa:	4770      	bx	lr

080055fc <ai_layers_post_init_all>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005600:	2500      	movs	r5, #0
 8005602:	b16c      	cbz	r4, 8005620 <ai_layers_post_init_all+0x24>
 8005604:	6863      	ldr	r3, [r4, #4]
 8005606:	07db      	lsls	r3, r3, #31
 8005608:	d504      	bpl.n	8005614 <ai_layers_post_init_all+0x18>
 800560a:	6a23      	ldr	r3, [r4, #32]
 800560c:	4620      	mov	r0, r4
 800560e:	b10b      	cbz	r3, 8005614 <ai_layers_post_init_all+0x18>
 8005610:	4798      	blx	r3
 8005612:	3501      	adds	r5, #1
 8005614:	6923      	ldr	r3, [r4, #16]
 8005616:	42a3      	cmp	r3, r4
 8005618:	d002      	beq.n	8005620 <ai_layers_post_init_all+0x24>
 800561a:	b10b      	cbz	r3, 8005620 <ai_layers_post_init_all+0x24>
 800561c:	461c      	mov	r4, r3
 800561e:	e7f0      	b.n	8005602 <ai_layers_post_init_all+0x6>
 8005620:	4628      	mov	r0, r5
 8005622:	bd38      	pop	{r3, r4, r5, pc}

08005624 <ai_layers_forward_all>:
 8005624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005628:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800562c:	4604      	mov	r4, r0
 800562e:	f1b8 0f00 	cmp.w	r8, #0
 8005632:	d02b      	beq.n	800568c <ai_layers_forward_all+0x68>
 8005634:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8005636:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8005638:	b321      	cbz	r1, 8005684 <ai_layers_forward_all+0x60>
 800563a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800563c:	2001      	movs	r0, #1
 800563e:	47c0      	blx	r8
 8005640:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8005642:	b1fe      	cbz	r6, 8005684 <ai_layers_forward_all+0x60>
 8005644:	2700      	movs	r7, #0
 8005646:	4631      	mov	r1, r6
 8005648:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800564a:	2002      	movs	r0, #2
 800564c:	47c0      	blx	r8
 800564e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8005650:	4628      	mov	r0, r5
 8005652:	696b      	ldr	r3, [r5, #20]
 8005654:	4798      	blx	r3
 8005656:	692e      	ldr	r6, [r5, #16]
 8005658:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800565a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800565c:	42b5      	cmp	r5, r6
 800565e:	f04f 0003 	mov.w	r0, #3
 8005662:	d007      	beq.n	8005674 <ai_layers_forward_all+0x50>
 8005664:	47c0      	blx	r8
 8005666:	3701      	adds	r7, #1
 8005668:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800566a:	2e00      	cmp	r6, #0
 800566c:	d1eb      	bne.n	8005646 <ai_layers_forward_all+0x22>
 800566e:	4638      	mov	r0, r7
 8005670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005674:	2003      	movs	r0, #3
 8005676:	47c0      	blx	r8
 8005678:	2300      	movs	r3, #0
 800567a:	3701      	adds	r7, #1
 800567c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800567e:	4638      	mov	r0, r7
 8005680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005684:	2700      	movs	r7, #0
 8005686:	4638      	mov	r0, r7
 8005688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800568c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800568e:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8005690:	2d00      	cmp	r5, #0
 8005692:	d0f7      	beq.n	8005684 <ai_layers_forward_all+0x60>
 8005694:	4647      	mov	r7, r8
 8005696:	696b      	ldr	r3, [r5, #20]
 8005698:	4628      	mov	r0, r5
 800569a:	4798      	blx	r3
 800569c:	462b      	mov	r3, r5
 800569e:	692d      	ldr	r5, [r5, #16]
 80056a0:	429d      	cmp	r5, r3
 80056a2:	d004      	beq.n	80056ae <ai_layers_forward_all+0x8a>
 80056a4:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80056a6:	3701      	adds	r7, #1
 80056a8:	2d00      	cmp	r5, #0
 80056aa:	d1f4      	bne.n	8005696 <ai_layers_forward_all+0x72>
 80056ac:	e7df      	b.n	800566e <ai_layers_forward_all+0x4a>
 80056ae:	2300      	movs	r3, #0
 80056b0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80056b2:	3701      	adds	r7, #1
 80056b4:	e7db      	b.n	800566e <ai_layers_forward_all+0x4a>
 80056b6:	bf00      	nop

080056b8 <forward_dense>:
 80056b8:	6982      	ldr	r2, [r0, #24]
 80056ba:	8813      	ldrh	r3, [r2, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d043      	beq.n	8005748 <forward_dense+0x90>
 80056c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c4:	6855      	ldr	r5, [r2, #4]
 80056c6:	6869      	ldr	r1, [r5, #4]
 80056c8:	b08e      	sub	sp, #56	@ 0x38
 80056ca:	b101      	cbz	r1, 80056ce <forward_dense+0x16>
 80056cc:	6809      	ldr	r1, [r1, #0]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d069      	beq.n	80057a6 <forward_dense+0xee>
 80056d2:	692a      	ldr	r2, [r5, #16]
 80056d4:	b102      	cbz	r2, 80056d8 <forward_dense+0x20>
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d061      	beq.n	80057a0 <forward_dense+0xe8>
 80056dc:	69ec      	ldr	r4, [r5, #28]
 80056de:	2c00      	cmp	r4, #0
 80056e0:	d057      	beq.n	8005792 <forward_dense+0xda>
 80056e2:	8b2e      	ldrh	r6, [r5, #24]
 80056e4:	6820      	ldr	r0, [r4, #0]
 80056e6:	2e01      	cmp	r6, #1
 80056e8:	d955      	bls.n	8005796 <forward_dense+0xde>
 80056ea:	6864      	ldr	r4, [r4, #4]
 80056ec:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80056f0:	68cf      	ldr	r7, [r1, #12]
 80056f2:	68d0      	ldr	r0, [r2, #12]
 80056f4:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80056f8:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80056fc:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8005700:	f8d9 0000 	ldr.w	r0, [r9]
 8005704:	2b03      	cmp	r3, #3
 8005706:	fb06 f807 	mul.w	r8, r6, r7
 800570a:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 800570e:	d044      	beq.n	800579a <forward_dense+0xe2>
 8005710:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8005712:	b11d      	cbz	r5, 800571c <forward_dense+0x64>
 8005714:	682d      	ldr	r5, [r5, #0]
 8005716:	b10d      	cbz	r5, 800571c <forward_dense+0x64>
 8005718:	69ab      	ldr	r3, [r5, #24]
 800571a:	689d      	ldr	r5, [r3, #8]
 800571c:	6992      	ldr	r2, [r2, #24]
 800571e:	698b      	ldr	r3, [r1, #24]
 8005720:	6890      	ldr	r0, [r2, #8]
 8005722:	6899      	ldr	r1, [r3, #8]
 8005724:	b10c      	cbz	r4, 800572a <forward_dense+0x72>
 8005726:	69a3      	ldr	r3, [r4, #24]
 8005728:	689c      	ldr	r4, [r3, #8]
 800572a:	4b20      	ldr	r3, [pc, #128]	@ (80057ac <forward_dense+0xf4>)
 800572c:	459c      	cmp	ip, r3
 800572e:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8005732:	d023      	beq.n	800577c <forward_dense+0xc4>
 8005734:	4e1e      	ldr	r6, [pc, #120]	@ (80057b0 <forward_dense+0xf8>)
 8005736:	45b4      	cmp	ip, r6
 8005738:	d015      	beq.n	8005766 <forward_dense+0xae>
 800573a:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 800573e:	459c      	cmp	ip, r3
 8005740:	d004      	beq.n	800574c <forward_dense+0x94>
 8005742:	b00e      	add	sp, #56	@ 0x38
 8005744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	deff      	udf	#255	@ 0xff
 800574c:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8005750:	a807      	add	r0, sp, #28
 8005752:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8005756:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 800575a:	9209      	str	r2, [sp, #36]	@ 0x24
 800575c:	f000 f944 	bl	80059e8 <forward_lite_dense_if32of32wf32>
 8005760:	b00e      	add	sp, #56	@ 0x38
 8005762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005766:	e9cd e803 	strd	lr, r8, [sp, #12]
 800576a:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800576e:	9500      	str	r5, [sp, #0]
 8005770:	464b      	mov	r3, r9
 8005772:	f000 fa93 	bl	8005c9c <forward_lite_dense_if32of32wf32_lut4>
 8005776:	b00e      	add	sp, #56	@ 0x38
 8005778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577c:	e9cd e803 	strd	lr, r8, [sp, #12]
 8005780:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8005784:	9500      	str	r5, [sp, #0]
 8005786:	464b      	mov	r3, r9
 8005788:	f000 fbb0 	bl	8005eec <forward_lite_dense_if32of32wf32_lut8>
 800578c:	b00e      	add	sp, #56	@ 0x38
 800578e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005792:	4620      	mov	r0, r4
 8005794:	e7aa      	b.n	80056ec <forward_dense+0x34>
 8005796:	2400      	movs	r4, #0
 8005798:	e7a8      	b.n	80056ec <forward_dense+0x34>
 800579a:	2300      	movs	r3, #0
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	deff      	udf	#255	@ 0xff
 80057a0:	2300      	movs	r3, #0
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	deff      	udf	#255	@ 0xff
 80057a6:	2300      	movs	r3, #0
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	deff      	udf	#255	@ 0xff
 80057ac:	00d01040 	.word	0x00d01040
 80057b0:	00f01040 	.word	0x00f01040

080057b4 <forward_relu>:
 80057b4:	6982      	ldr	r2, [r0, #24]
 80057b6:	8813      	ldrh	r3, [r2, #0]
 80057b8:	b323      	cbz	r3, 8005804 <forward_relu+0x50>
 80057ba:	6851      	ldr	r1, [r2, #4]
 80057bc:	684a      	ldr	r2, [r1, #4]
 80057be:	b102      	cbz	r2, 80057c2 <forward_relu+0xe>
 80057c0:	6812      	ldr	r2, [r2, #0]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	f000 808d 	beq.w	80058e2 <forward_relu+0x12e>
 80057c8:	b470      	push	{r4, r5, r6}
 80057ca:	6909      	ldr	r1, [r1, #16]
 80057cc:	b101      	cbz	r1, 80057d0 <forward_relu+0x1c>
 80057ce:	6809      	ldr	r1, [r1, #0]
 80057d0:	69c6      	ldr	r6, [r0, #28]
 80057d2:	b1ce      	cbz	r6, 8005808 <forward_relu+0x54>
 80057d4:	6873      	ldr	r3, [r6, #4]
 80057d6:	6988      	ldr	r0, [r1, #24]
 80057d8:	6991      	ldr	r1, [r2, #24]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d044      	beq.n	8005868 <forward_relu+0xb4>
 80057de:	6893      	ldr	r3, [r2, #8]
 80057e0:	6880      	ldr	r0, [r0, #8]
 80057e2:	6889      	ldr	r1, [r1, #8]
 80057e4:	0a1b      	lsrs	r3, r3, #8
 80057e6:	d073      	beq.n	80058d0 <forward_relu+0x11c>
 80057e8:	68d5      	ldr	r5, [r2, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80057f0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80057f4:	429d      	cmp	r5, r3
 80057f6:	fb04 f202 	mul.w	r2, r4, r2
 80057fa:	d1f9      	bne.n	80057f0 <forward_relu+0x3c>
 80057fc:	68b3      	ldr	r3, [r6, #8]
 80057fe:	bc70      	pop	{r4, r5, r6}
 8005800:	f000 b874 	b.w	80058ec <forward_lite_nl_relu_generic_if32of32_kernel>
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	deff      	udf	#255	@ 0xff
 8005808:	6893      	ldr	r3, [r2, #8]
 800580a:	6989      	ldr	r1, [r1, #24]
 800580c:	6990      	ldr	r0, [r2, #24]
 800580e:	6889      	ldr	r1, [r1, #8]
 8005810:	6884      	ldr	r4, [r0, #8]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	d05e      	beq.n	80058d4 <forward_relu+0x120>
 8005816:	68d5      	ldr	r5, [r2, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800581e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8005822:	429d      	cmp	r5, r3
 8005824:	fb00 f202 	mul.w	r2, r0, r2
 8005828:	d1f9      	bne.n	800581e <forward_relu+0x6a>
 800582a:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800582e:	3b01      	subs	r3, #1
 8005830:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005834:	4294      	cmp	r4, r2
 8005836:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800583a:	d813      	bhi.n	8005864 <forward_relu+0xb0>
 800583c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80058e8 <forward_relu+0x134>
 8005840:	3204      	adds	r2, #4
 8005842:	3104      	adds	r1, #4
 8005844:	4613      	mov	r3, r2
 8005846:	ed72 7a01 	vldmdb	r2!, {s15}
 800584a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800584e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005852:	f1a3 0308 	sub.w	r3, r3, #8
 8005856:	bfb8      	it	lt
 8005858:	eef0 7a47 	vmovlt.f32	s15, s14
 800585c:	429c      	cmp	r4, r3
 800585e:	ed61 7a01 	vstmdb	r1!, {s15}
 8005862:	d9ef      	bls.n	8005844 <forward_relu+0x90>
 8005864:	bc70      	pop	{r4, r5, r6}
 8005866:	4770      	bx	lr
 8005868:	688c      	ldr	r4, [r1, #8]
 800586a:	6891      	ldr	r1, [r2, #8]
 800586c:	6880      	ldr	r0, [r0, #8]
 800586e:	0a09      	lsrs	r1, r1, #8
 8005870:	d032      	beq.n	80058d8 <forward_relu+0x124>
 8005872:	68d5      	ldr	r5, [r2, #12]
 8005874:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8005878:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800587c:	4295      	cmp	r5, r2
 800587e:	fb01 f303 	mul.w	r3, r1, r3
 8005882:	d1f9      	bne.n	8005878 <forward_relu+0xc4>
 8005884:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005888:	3a01      	subs	r2, #1
 800588a:	68b1      	ldr	r1, [r6, #8]
 800588c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005890:	429c      	cmp	r4, r3
 8005892:	ed91 7a00 	vldr	s14, [r1]
 8005896:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800589a:	d8e3      	bhi.n	8005864 <forward_relu+0xb0>
 800589c:	2500      	movs	r5, #0
 800589e:	3304      	adds	r3, #4
 80058a0:	1d02      	adds	r2, r0, #4
 80058a2:	ed53 7a01 	vldr	s15, [r3, #-4]
 80058a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ae:	f1a3 0104 	sub.w	r1, r3, #4
 80058b2:	f1a3 0308 	sub.w	r3, r3, #8
 80058b6:	d405      	bmi.n	80058c4 <forward_relu+0x110>
 80058b8:	429c      	cmp	r4, r3
 80058ba:	f842 5d04 	str.w	r5, [r2, #-4]!
 80058be:	d8d1      	bhi.n	8005864 <forward_relu+0xb0>
 80058c0:	460b      	mov	r3, r1
 80058c2:	e7ee      	b.n	80058a2 <forward_relu+0xee>
 80058c4:	429c      	cmp	r4, r3
 80058c6:	ed62 7a01 	vstmdb	r2!, {s15}
 80058ca:	d8cb      	bhi.n	8005864 <forward_relu+0xb0>
 80058cc:	460b      	mov	r3, r1
 80058ce:	e7e8      	b.n	80058a2 <forward_relu+0xee>
 80058d0:	2201      	movs	r2, #1
 80058d2:	e793      	b.n	80057fc <forward_relu+0x48>
 80058d4:	4622      	mov	r2, r4
 80058d6:	e7b1      	b.n	800583c <forward_relu+0x88>
 80058d8:	68b2      	ldr	r2, [r6, #8]
 80058da:	4623      	mov	r3, r4
 80058dc:	ed92 7a00 	vldr	s14, [r2]
 80058e0:	e7dc      	b.n	800589c <forward_relu+0xe8>
 80058e2:	2300      	movs	r3, #0
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	deff      	udf	#255	@ 0xff
 80058e8:	00000000 	.word	0x00000000

080058ec <forward_lite_nl_relu_generic_if32of32_kernel>:
 80058ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80058f0:	ed93 7a00 	vldr	s14, [r3]
 80058f4:	ed93 6a01 	vldr	s12, [r3, #4]
 80058f8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80058fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005900:	d42a      	bmi.n	8005958 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8005902:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005906:	3a01      	subs	r2, #1
 8005908:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800590c:	4561      	cmp	r1, ip
 800590e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8005912:	d85d      	bhi.n	80059d0 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8005914:	1d11      	adds	r1, r2, #4
 8005916:	f10c 0304 	add.w	r3, ip, #4
 800591a:	4408      	add	r0, r1
 800591c:	ebac 0202 	sub.w	r2, ip, r2
 8005920:	e00c      	b.n	800593c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8005922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800592e:	db01      	blt.n	8005934 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8005930:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005934:	4293      	cmp	r3, r2
 8005936:	ed60 7a01 	vstmdb	r0!, {s15}
 800593a:	d00c      	beq.n	8005956 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800593c:	ed73 7a01 	vldmdb	r3!, {s15}
 8005940:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005948:	daeb      	bge.n	8005922 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800594a:	eef0 7a66 	vmov.f32	s15, s13
 800594e:	4293      	cmp	r3, r2
 8005950:	ed60 7a01 	vstmdb	r0!, {s15}
 8005954:	d1f2      	bne.n	800593c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8005956:	4770      	bx	lr
 8005958:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800595c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005960:	3a01      	subs	r2, #1
 8005962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005966:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800596a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800596e:	d017      	beq.n	80059a0 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 8005970:	4561      	cmp	r1, ip
 8005972:	d82d      	bhi.n	80059d0 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8005974:	1d11      	adds	r1, r2, #4
 8005976:	f10c 0304 	add.w	r3, ip, #4
 800597a:	4401      	add	r1, r0
 800597c:	ebac 0202 	sub.w	r2, ip, r2
 8005980:	ed73 7a01 	vldmdb	r3!, {s15}
 8005984:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800598c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005990:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005994:	d81d      	bhi.n	80059d2 <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 8005996:	4293      	cmp	r3, r2
 8005998:	ed61 6a01 	vstmdb	r1!, {s13}
 800599c:	d1f0      	bne.n	8005980 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800599e:	4770      	bx	lr
 80059a0:	4561      	cmp	r1, ip
 80059a2:	d815      	bhi.n	80059d0 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80059a4:	1d11      	adds	r1, r2, #4
 80059a6:	b500      	push	{lr}
 80059a8:	f10c 0304 	add.w	r3, ip, #4
 80059ac:	f04f 0e00 	mov.w	lr, #0
 80059b0:	4401      	add	r1, r0
 80059b2:	ebac 0202 	sub.w	r2, ip, r2
 80059b6:	ed73 7a01 	vldmdb	r3!, {s15}
 80059ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c2:	d40b      	bmi.n	80059dc <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 80059c4:	4293      	cmp	r3, r2
 80059c6:	f841 ed04 	str.w	lr, [r1, #-4]!
 80059ca:	d1f4      	bne.n	80059b6 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 80059cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	4293      	cmp	r3, r2
 80059d4:	ed61 7a01 	vstmdb	r1!, {s15}
 80059d8:	d1d2      	bne.n	8005980 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 80059da:	4770      	bx	lr
 80059dc:	4293      	cmp	r3, r2
 80059de:	ed61 7a01 	vstmdb	r1!, {s15}
 80059e2:	d1e8      	bne.n	80059b6 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 80059e4:	e7f2      	b.n	80059cc <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 80059e6:	bf00      	nop

080059e8 <forward_lite_dense_if32of32wf32>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 80059f0:	6801      	ldr	r1, [r0, #0]
 80059f2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80059f6:	fb02 f303 	mul.w	r3, r2, r3
 80059fa:	b083      	sub	sp, #12
 80059fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005a00:	4299      	cmp	r1, r3
 8005a02:	9100      	str	r1, [sp, #0]
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	f080 811e 	bcs.w	8005c46 <forward_lite_dense_if32of32wf32+0x25e>
 8005a0a:	6904      	ldr	r4, [r0, #16]
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	0096      	lsls	r6, r2, #2
 8005a10:	9b00      	ldr	r3, [sp, #0]
 8005a12:	68bd      	ldr	r5, [r7, #8]
 8005a14:	eb03 0e06 	add.w	lr, r3, r6
 8005a18:	459e      	cmp	lr, r3
 8005a1a:	461e      	mov	r6, r3
 8005a1c:	f240 8104 	bls.w	8005c28 <forward_lite_dense_if32of32wf32+0x240>
 8005a20:	f1a4 0c10 	sub.w	ip, r4, #16
 8005a24:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8005a28:	f10c 0c01 	add.w	ip, ip, #1
 8005a2c:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8005a30:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8005a34:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8005a38:	2c0f      	cmp	r4, #15
 8005a3a:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8005c98 <forward_lite_dense_if32of32wf32+0x2b0>
 8005a3e:	f240 8105 	bls.w	8005c4c <forward_lite_dense_if32of32wf32+0x264>
 8005a42:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8005a46:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 8005a50:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8005a54:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8005a58:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8005a5c:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8005a60:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8005a64:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8005a68:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8005a6c:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 8005a70:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8005a74:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8005a78:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8005a7c:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8005a80:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005a84:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8005a88:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005a8c:	3910      	subs	r1, #16
 8005a8e:	290f      	cmp	r1, #15
 8005a90:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8005a94:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8005a98:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005a9c:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8005aa0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005aa4:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8005aa8:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8005aac:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005ab0:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8005ab4:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8005ab8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005abc:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8005ac0:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8005ac4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005ac8:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8005acc:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8005ad0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005ad4:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8005ad8:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8005adc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005ae0:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8005ae4:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8005ae8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005aec:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8005af0:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8005af4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005af8:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8005afc:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8005b00:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005b04:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005b08:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005b0c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005b10:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005b14:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005b18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b1c:	d896      	bhi.n	8005a4c <forward_lite_dense_if32of32wf32+0x64>
 8005b1e:	eb05 020b 	add.w	r2, r5, fp
 8005b22:	f004 010f 	and.w	r1, r4, #15
 8005b26:	4663      	mov	r3, ip
 8005b28:	2903      	cmp	r1, #3
 8005b2a:	d95f      	bls.n	8005bec <forward_lite_dense_if32of32wf32+0x204>
 8005b2c:	edd2 6a01 	vldr	s13, [r2, #4]
 8005b30:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b34:	ed93 6a00 	vldr	s12, [r3]
 8005b38:	ed93 5a02 	vldr	s10, [r3, #8]
 8005b3c:	edd2 5a02 	vldr	s11, [r2, #8]
 8005b40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b44:	edd2 6a00 	vldr	s13, [r2]
 8005b48:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005b4c:	1f08      	subs	r0, r1, #4
 8005b4e:	2803      	cmp	r0, #3
 8005b50:	ed93 6a03 	vldr	s12, [r3, #12]
 8005b54:	edd2 6a03 	vldr	s13, [r2, #12]
 8005b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005b60:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005b64:	eeb0 7a67 	vmov.f32	s14, s15
 8005b68:	d938      	bls.n	8005bdc <forward_lite_dense_if32of32wf32+0x1f4>
 8005b6a:	edd2 6a05 	vldr	s13, [r2, #20]
 8005b6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8005b72:	ed93 6a04 	vldr	s12, [r3, #16]
 8005b76:	ed93 5a06 	vldr	s10, [r3, #24]
 8005b7a:	edd2 5a06 	vldr	s11, [r2, #24]
 8005b7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005b82:	edd2 6a04 	vldr	s13, [r2, #16]
 8005b86:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005b8a:	f1a1 0a08 	sub.w	sl, r1, #8
 8005b8e:	f1ba 0f03 	cmp.w	sl, #3
 8005b92:	ed93 6a07 	vldr	s12, [r3, #28]
 8005b96:	edd2 6a07 	vldr	s13, [r2, #28]
 8005b9a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005b9e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005ba2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ba6:	d919      	bls.n	8005bdc <forward_lite_dense_if32of32wf32+0x1f4>
 8005ba8:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005bac:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8005bb0:	ed92 6a08 	vldr	s12, [r2, #32]
 8005bb4:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8005bb8:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8005bbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005bc0:	edd3 6a08 	vldr	s13, [r3, #32]
 8005bc4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005bc8:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8005bcc:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8005bd0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005bd4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bdc:	0880      	lsrs	r0, r0, #2
 8005bde:	3001      	adds	r0, #1
 8005be0:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8005be4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8005be8:	f001 0103 	and.w	r1, r1, #3
 8005bec:	b1a9      	cbz	r1, 8005c1a <forward_lite_dense_if32of32wf32+0x232>
 8005bee:	edd3 6a00 	vldr	s13, [r3]
 8005bf2:	edd2 7a00 	vldr	s15, [r2]
 8005bf6:	3901      	subs	r1, #1
 8005bf8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005bfc:	d00d      	beq.n	8005c1a <forward_lite_dense_if32of32wf32+0x232>
 8005bfe:	edd3 6a01 	vldr	s13, [r3, #4]
 8005c02:	edd2 7a01 	vldr	s15, [r2, #4]
 8005c06:	2901      	cmp	r1, #1
 8005c08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c0c:	d005      	beq.n	8005c1a <forward_lite_dense_if32of32wf32+0x232>
 8005c0e:	edd2 6a02 	vldr	s13, [r2, #8]
 8005c12:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005c1a:	444d      	add	r5, r9
 8005c1c:	eca6 7a01 	vstmia	r6!, {s14}
 8005c20:	45b6      	cmp	lr, r6
 8005c22:	f63f af09 	bhi.w	8005a38 <forward_lite_dense_if32of32wf32+0x50>
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	b99b      	cbnz	r3, 8005c54 <forward_lite_dense_if32of32wf32+0x26c>
 8005c2c:	9b00      	ldr	r3, [sp, #0]
 8005c2e:	9901      	ldr	r1, [sp, #4]
 8005c30:	693c      	ldr	r4, [r7, #16]
 8005c32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005c36:	4299      	cmp	r1, r3
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8005c3e:	ea4f 0682 	mov.w	r6, r2, lsl #2
 8005c42:	f63f aee5 	bhi.w	8005a10 <forward_lite_dense_if32of32wf32+0x28>
 8005c46:	b003      	add	sp, #12
 8005c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	462a      	mov	r2, r5
 8005c50:	4643      	mov	r3, r8
 8005c52:	e769      	b.n	8005b28 <forward_lite_dense_if32of32wf32+0x140>
 8005c54:	2a00      	cmp	r2, #0
 8005c56:	d0e9      	beq.n	8005c2c <forward_lite_dense_if32of32wf32+0x244>
 8005c58:	9a00      	ldr	r2, [sp, #0]
 8005c5a:	ed93 7a00 	vldr	s14, [r3]
 8005c5e:	edd2 7a00 	vldr	s15, [r2]
 8005c62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c66:	4613      	mov	r3, r2
 8005c68:	edc2 7a00 	vstr	s15, [r2]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	2a01      	cmp	r2, #1
 8005c70:	d9dc      	bls.n	8005c2c <forward_lite_dense_if32of32wf32+0x244>
 8005c72:	1d19      	adds	r1, r3, #4
 8005c74:	2301      	movs	r3, #1
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	ed91 7a00 	vldr	s14, [r1]
 8005c7c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005c80:	edd2 7a00 	vldr	s15, [r2]
 8005c84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c88:	3301      	adds	r3, #1
 8005c8a:	ece1 7a01 	vstmia	r1!, {s15}
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d8f0      	bhi.n	8005c76 <forward_lite_dense_if32of32wf32+0x28e>
 8005c94:	e7ca      	b.n	8005c2c <forward_lite_dense_if32of32wf32+0x244>
 8005c96:	bf00      	nop
 8005c98:	00000000 	.word	0x00000000

08005c9c <forward_lite_dense_if32of32wf32_lut4>:
 8005c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	b08d      	sub	sp, #52	@ 0x34
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	9005      	str	r0, [sp, #20]
 8005ca6:	920a      	str	r2, [sp, #40]	@ 0x28
 8005ca8:	4618      	mov	r0, r3
 8005caa:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8005cae:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8005cb0:	fb02 f303 	mul.w	r3, r2, r3
 8005cb4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005cb8:	460c      	mov	r4, r1
 8005cba:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8005cbc:	9308      	str	r3, [sp, #32]
 8005cbe:	b126      	cbz	r6, 8005cca <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8005cc0:	2240      	movs	r2, #64	@ 0x40
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	f000 fa40 	bl	8006148 <st_int8_copy>
 8005cc8:	4630      	mov	r0, r6
 8005cca:	9b05      	ldr	r3, [sp, #20]
 8005ccc:	9a08      	ldr	r2, [sp, #32]
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	f080 80f5 	bcs.w	8005ebe <forward_lite_dense_if32of32wf32_lut4+0x222>
 8005cd4:	08eb      	lsrs	r3, r5, #3
 8005cd6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cd8:	9301      	str	r3, [sp, #4]
 8005cda:	f005 0101 	and.w	r1, r5, #1
 8005cde:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	0092      	lsls	r2, r2, #2
 8005ce6:	f025 0801 	bic.w	r8, r5, #1
 8005cea:	9102      	str	r1, [sp, #8]
 8005cec:	9304      	str	r3, [sp, #16]
 8005cee:	00a9      	lsls	r1, r5, #2
 8005cf0:	9b05      	ldr	r3, [sp, #20]
 8005cf2:	9207      	str	r2, [sp, #28]
 8005cf4:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8005cf8:	9109      	str	r1, [sp, #36]	@ 0x24
 8005cfa:	f104 0b20 	add.w	fp, r4, #32
 8005cfe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005d00:	9a07      	ldr	r2, [sp, #28]
 8005d02:	eb03 0902 	add.w	r9, r3, r2
 8005d06:	4599      	cmp	r9, r3
 8005d08:	f1ab 0220 	sub.w	r2, fp, #32
 8005d0c:	9206      	str	r2, [sp, #24]
 8005d0e:	f240 80d9 	bls.w	8005ec4 <forward_lite_dense_if32of32wf32_lut4+0x228>
 8005d12:	469e      	mov	lr, r3
 8005d14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d16:	f108 33ff 	add.w	r3, r8, #4294967295
 8005d1a:	9303      	str	r3, [sp, #12]
 8005d1c:	9b01      	ldr	r3, [sp, #4]
 8005d1e:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8005ee8 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80b2 	beq.w	8005e8c <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8005d28:	9b04      	ldr	r3, [sp, #16]
 8005d2a:	18d5      	adds	r5, r2, r3
 8005d2c:	465b      	mov	r3, fp
 8005d2e:	7814      	ldrb	r4, [r2, #0]
 8005d30:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8005d34:	7851      	ldrb	r1, [r2, #1]
 8005d36:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8005d3a:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 8005d3e:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 8005d42:	ed13 5a04 	vldr	s10, [r3, #-16]
 8005d46:	ed53 5a03 	vldr	s11, [r3, #-12]
 8005d4a:	ed13 6a02 	vldr	s12, [r3, #-8]
 8005d4e:	ed53 6a01 	vldr	s13, [r3, #-4]
 8005d52:	f004 060f 	and.w	r6, r4, #15
 8005d56:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005d5a:	edd6 7a00 	vldr	s15, [r6]
 8005d5e:	0924      	lsrs	r4, r4, #4
 8005d60:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005d64:	ed94 3a00 	vldr	s6, [r4]
 8005d68:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8005d6c:	090c      	lsrs	r4, r1, #4
 8005d6e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005d72:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005d76:	f001 010f 	and.w	r1, r1, #15
 8005d7a:	edd4 3a00 	vldr	s7, [r4]
 8005d7e:	7894      	ldrb	r4, [r2, #2]
 8005d80:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005d84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d88:	0926      	lsrs	r6, r4, #4
 8005d8a:	ed91 4a00 	vldr	s8, [r1]
 8005d8e:	78d1      	ldrb	r1, [r2, #3]
 8005d90:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005d94:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005d98:	f004 040f 	and.w	r4, r4, #15
 8005d9c:	edd6 4a00 	vldr	s9, [r6]
 8005da0:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005da4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005da8:	3204      	adds	r2, #4
 8005daa:	ed94 5a00 	vldr	s10, [r4]
 8005dae:	090c      	lsrs	r4, r1, #4
 8005db0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005db4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005db8:	f001 010f 	and.w	r1, r1, #15
 8005dbc:	edd4 5a00 	vldr	s11, [r4]
 8005dc0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005dc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005dc8:	42aa      	cmp	r2, r5
 8005dca:	ed91 6a00 	vldr	s12, [r1]
 8005dce:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005dd2:	f103 0320 	add.w	r3, r3, #32
 8005dd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dda:	d1a8      	bne.n	8005d2e <forward_lite_dense_if32of32wf32_lut4+0x92>
 8005ddc:	4656      	mov	r6, sl
 8005dde:	4546      	cmp	r6, r8
 8005de0:	d258      	bcs.n	8005e94 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 8005de2:	9b03      	ldr	r3, [sp, #12]
 8005de4:	1b9c      	subs	r4, r3, r6
 8005de6:	08e7      	lsrs	r7, r4, #3
 8005de8:	f106 0208 	add.w	r2, r6, #8
 8005dec:	1e69      	subs	r1, r5, #1
 8005dee:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 8005df2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005df6:	ed52 5a01 	vldr	s11, [r2, #-4]
 8005dfa:	ed52 6a02 	vldr	s13, [r2, #-8]
 8005dfe:	f003 0c0f 	and.w	ip, r3, #15
 8005e02:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8005e06:	eddc 7a00 	vldr	s15, [ip]
 8005e0a:	091b      	lsrs	r3, r3, #4
 8005e0c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005e10:	ed93 6a00 	vldr	s12, [r3]
 8005e14:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005e18:	42a1      	cmp	r1, r4
 8005e1a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005e1e:	f102 0208 	add.w	r2, r2, #8
 8005e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e26:	d1e4      	bne.n	8005df2 <forward_lite_dense_if32of32wf32_lut4+0x156>
 8005e28:	3701      	adds	r7, #1
 8005e2a:	19ea      	adds	r2, r5, r7
 8005e2c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8005e30:	9b02      	ldr	r3, [sp, #8]
 8005e32:	b30b      	cbz	r3, 8005e78 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 8005e34:	f812 3b01 	ldrb.w	r3, [r2], #1
 8005e38:	edd6 7a00 	vldr	s15, [r6]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005e42:	edd3 6a00 	vldr	s13, [r3]
 8005e46:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e4a:	ecae 7a01 	vstmia	lr!, {s14}
 8005e4e:	45f1      	cmp	r9, lr
 8005e50:	f63f af64 	bhi.w	8005d1c <forward_lite_dense_if32of32wf32_lut4+0x80>
 8005e54:	9b05      	ldr	r3, [sp, #20]
 8005e56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005e58:	1899      	adds	r1, r3, r2
 8005e5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005e5c:	b9e3      	cbnz	r3, 8005e98 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8005e5e:	9b08      	ldr	r3, [sp, #32]
 8005e60:	428b      	cmp	r3, r1
 8005e62:	d92c      	bls.n	8005ebe <forward_lite_dense_if32of32wf32_lut4+0x222>
 8005e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e66:	4498      	add	r8, r3
 8005e68:	449a      	add	sl, r3
 8005e6a:	449b      	add	fp, r3
 8005e6c:	9b05      	ldr	r3, [sp, #20]
 8005e6e:	4599      	cmp	r9, r3
 8005e70:	d92a      	bls.n	8005ec8 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8005e72:	9105      	str	r1, [sp, #20]
 8005e74:	460b      	mov	r3, r1
 8005e76:	e743      	b.n	8005d00 <forward_lite_dense_if32of32wf32_lut4+0x64>
 8005e78:	ecae 7a01 	vstmia	lr!, {s14}
 8005e7c:	45f1      	cmp	r9, lr
 8005e7e:	d9e9      	bls.n	8005e54 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 8005e80:	9b01      	ldr	r3, [sp, #4]
 8005e82:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005ee8 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f47f af4e 	bne.w	8005d28 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 8005e8c:	9e06      	ldr	r6, [sp, #24]
 8005e8e:	4546      	cmp	r6, r8
 8005e90:	4615      	mov	r5, r2
 8005e92:	d3a6      	bcc.n	8005de2 <forward_lite_dense_if32of32wf32_lut4+0x146>
 8005e94:	462a      	mov	r2, r5
 8005e96:	e7cb      	b.n	8005e30 <forward_lite_dense_if32of32wf32_lut4+0x194>
 8005e98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0df      	beq.n	8005e5e <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8005e9e:	9b07      	ldr	r3, [sp, #28]
 8005ea0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005ea2:	1acb      	subs	r3, r1, r3
 8005ea4:	edd3 7a00 	vldr	s15, [r3]
 8005ea8:	ecb2 7a01 	vldmia	r2!, {s14}
 8005eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005eb0:	ece3 7a01 	vstmia	r3!, {s15}
 8005eb4:	428b      	cmp	r3, r1
 8005eb6:	d1f5      	bne.n	8005ea4 <forward_lite_dense_if32of32wf32_lut4+0x208>
 8005eb8:	9b08      	ldr	r3, [sp, #32]
 8005eba:	428b      	cmp	r3, r1
 8005ebc:	d8d2      	bhi.n	8005e64 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 8005ebe:	b00d      	add	sp, #52	@ 0x34
 8005ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	e7c8      	b.n	8005e5a <forward_lite_dense_if32of32wf32_lut4+0x1be>
 8005ec8:	9b07      	ldr	r3, [sp, #28]
 8005eca:	1acb      	subs	r3, r1, r3
 8005ecc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005ece:	461a      	mov	r2, r3
 8005ed0:	ed92 7a00 	vldr	s14, [r2]
 8005ed4:	ecf0 7a01 	vldmia	r0!, {s15}
 8005ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005edc:	ece2 7a01 	vstmia	r2!, {s15}
 8005ee0:	428a      	cmp	r2, r1
 8005ee2:	d1f5      	bne.n	8005ed0 <forward_lite_dense_if32of32wf32_lut4+0x234>
 8005ee4:	e7f2      	b.n	8005ecc <forward_lite_dense_if32of32wf32_lut4+0x230>
 8005ee6:	bf00      	nop
 8005ee8:	00000000 	.word	0x00000000

08005eec <forward_lite_dense_if32of32wf32_lut8>:
 8005eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef0:	b087      	sub	sp, #28
 8005ef2:	460f      	mov	r7, r1
 8005ef4:	9204      	str	r2, [sp, #16]
 8005ef6:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 8005efa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005efc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8005efe:	fb01 f202 	mul.w	r2, r1, r2
 8005f02:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005f06:	4605      	mov	r5, r0
 8005f08:	9202      	str	r2, [sp, #8]
 8005f0a:	b136      	cbz	r6, 8005f1a <forward_lite_dense_if32of32wf32_lut8+0x2e>
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f12:	4631      	mov	r1, r6
 8005f14:	f000 f918 	bl	8006148 <st_int8_copy>
 8005f18:	4633      	mov	r3, r6
 8005f1a:	9a02      	ldr	r2, [sp, #8]
 8005f1c:	4295      	cmp	r5, r2
 8005f1e:	f080 80f9 	bcs.w	8006114 <forward_lite_dense_if32of32wf32_lut8+0x228>
 8005f22:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f24:	0092      	lsls	r2, r2, #2
 8005f26:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8005f2a:	9201      	str	r2, [sp, #4]
 8005f2c:	9205      	str	r2, [sp, #20]
 8005f2e:	462a      	mov	r2, r5
 8005f30:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 8005f34:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 8005f38:	464d      	mov	r5, r9
 8005f3a:	4691      	mov	r9, r2
 8005f3c:	9a01      	ldr	r2, [sp, #4]
 8005f3e:	eb09 0e02 	add.w	lr, r9, r2
 8005f42:	00a1      	lsls	r1, r4, #2
 8005f44:	3720      	adds	r7, #32
 8005f46:	45ce      	cmp	lr, r9
 8005f48:	f004 0007 	and.w	r0, r4, #7
 8005f4c:	9103      	str	r1, [sp, #12]
 8005f4e:	f1a7 0b20 	sub.w	fp, r7, #32
 8005f52:	f240 80c8 	bls.w	80060e6 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 8005f56:	9a04      	ldr	r2, [sp, #16]
 8005f58:	46cc      	mov	ip, r9
 8005f5a:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8006144 <forward_lite_dense_if32of32wf32_lut8+0x258>
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	f000 80dd 	beq.w	800611e <forward_lite_dense_if32of32wf32_lut8+0x232>
 8005f64:	eb02 060a 	add.w	r6, r2, sl
 8005f68:	4639      	mov	r1, r7
 8005f6a:	7854      	ldrb	r4, [r2, #1]
 8005f6c:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 8005f70:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 8005f74:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 8005f78:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 8005f7c:	ed11 5a04 	vldr	s10, [r1, #-16]
 8005f80:	ed51 5a03 	vldr	s11, [r1, #-12]
 8005f84:	ed11 6a02 	vldr	s12, [r1, #-8]
 8005f88:	ed51 6a01 	vldr	s13, [r1, #-4]
 8005f8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005f90:	edd4 7a00 	vldr	s15, [r4]
 8005f94:	7814      	ldrb	r4, [r2, #0]
 8005f96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005f9a:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005f9e:	ed94 3a00 	vldr	s6, [r4]
 8005fa2:	7894      	ldrb	r4, [r2, #2]
 8005fa4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005fa8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005fac:	3208      	adds	r2, #8
 8005fae:	edd4 3a00 	vldr	s7, [r4]
 8005fb2:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 8005fb6:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005fba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005fbe:	3120      	adds	r1, #32
 8005fc0:	ed94 4a00 	vldr	s8, [r4]
 8005fc4:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 8005fc8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005fcc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005fd0:	edd4 4a00 	vldr	s9, [r4]
 8005fd4:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8005fd8:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005fdc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005fe0:	ed94 5a00 	vldr	s10, [r4]
 8005fe4:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8005fe8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005fec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005ff0:	edd4 5a00 	vldr	s11, [r4]
 8005ff4:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 8005ff8:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005ffc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006000:	42b2      	cmp	r2, r6
 8006002:	ed94 6a00 	vldr	s12, [r4]
 8006006:	eee6 7a26 	vfma.f32	s15, s12, s13
 800600a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800600e:	d1ac      	bne.n	8005f6a <forward_lite_dense_if32of32wf32_lut8+0x7e>
 8006010:	4642      	mov	r2, r8
 8006012:	2800      	cmp	r0, #0
 8006014:	f000 8081 	beq.w	800611a <forward_lite_dense_if32of32wf32_lut8+0x22e>
 8006018:	7831      	ldrb	r1, [r6, #0]
 800601a:	edd2 7a00 	vldr	s15, [r2]
 800601e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006022:	edd1 6a00 	vldr	s13, [r1]
 8006026:	2801      	cmp	r0, #1
 8006028:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800602c:	d03f      	beq.n	80060ae <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800602e:	7871      	ldrb	r1, [r6, #1]
 8006030:	edd2 7a01 	vldr	s15, [r2, #4]
 8006034:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006038:	edd1 6a00 	vldr	s13, [r1]
 800603c:	2802      	cmp	r0, #2
 800603e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006042:	d034      	beq.n	80060ae <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006044:	78b1      	ldrb	r1, [r6, #2]
 8006046:	edd2 7a02 	vldr	s15, [r2, #8]
 800604a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800604e:	edd1 6a00 	vldr	s13, [r1]
 8006052:	2803      	cmp	r0, #3
 8006054:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006058:	d029      	beq.n	80060ae <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800605a:	78f1      	ldrb	r1, [r6, #3]
 800605c:	edd2 6a03 	vldr	s13, [r2, #12]
 8006060:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006064:	edd1 7a00 	vldr	s15, [r1]
 8006068:	2804      	cmp	r0, #4
 800606a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800606e:	d01e      	beq.n	80060ae <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006070:	7931      	ldrb	r1, [r6, #4]
 8006072:	edd2 6a04 	vldr	s13, [r2, #16]
 8006076:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800607a:	edd1 7a00 	vldr	s15, [r1]
 800607e:	2805      	cmp	r0, #5
 8006080:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006084:	d013      	beq.n	80060ae <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006086:	7971      	ldrb	r1, [r6, #5]
 8006088:	edd2 6a05 	vldr	s13, [r2, #20]
 800608c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006090:	edd1 7a00 	vldr	s15, [r1]
 8006094:	2806      	cmp	r0, #6
 8006096:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800609a:	d008      	beq.n	80060ae <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800609c:	edd2 7a06 	vldr	s15, [r2, #24]
 80060a0:	79b2      	ldrb	r2, [r6, #6]
 80060a2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80060a6:	edd2 6a00 	vldr	s13, [r2]
 80060aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80060ae:	1832      	adds	r2, r6, r0
 80060b0:	ecac 7a01 	vstmia	ip!, {s14}
 80060b4:	45e6      	cmp	lr, ip
 80060b6:	f63f af50 	bhi.w	8005f5a <forward_lite_dense_if32of32wf32_lut8+0x6e>
 80060ba:	9a05      	ldr	r2, [sp, #20]
 80060bc:	eb09 0402 	add.w	r4, r9, r2
 80060c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80060c2:	b9a2      	cbnz	r2, 80060ee <forward_lite_dense_if32of32wf32_lut8+0x202>
 80060c4:	9a02      	ldr	r2, [sp, #8]
 80060c6:	42a2      	cmp	r2, r4
 80060c8:	d924      	bls.n	8006114 <forward_lite_dense_if32of32wf32_lut8+0x228>
 80060ca:	9a03      	ldr	r2, [sp, #12]
 80060cc:	45ce      	cmp	lr, r9
 80060ce:	4490      	add	r8, r2
 80060d0:	4417      	add	r7, r2
 80060d2:	d927      	bls.n	8006124 <forward_lite_dense_if32of32wf32_lut8+0x238>
 80060d4:	9a01      	ldr	r2, [sp, #4]
 80060d6:	46a1      	mov	r9, r4
 80060d8:	eb09 0e02 	add.w	lr, r9, r2
 80060dc:	45ce      	cmp	lr, r9
 80060de:	f1a7 0b20 	sub.w	fp, r7, #32
 80060e2:	f63f af38 	bhi.w	8005f56 <forward_lite_dense_if32of32wf32_lut8+0x6a>
 80060e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80060e8:	464c      	mov	r4, r9
 80060ea:	2a00      	cmp	r2, #0
 80060ec:	d0ea      	beq.n	80060c4 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 80060ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	d0e7      	beq.n	80060c4 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 80060f4:	9a01      	ldr	r2, [sp, #4]
 80060f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80060f8:	1aa2      	subs	r2, r4, r2
 80060fa:	edd2 7a00 	vldr	s15, [r2]
 80060fe:	ecb1 7a01 	vldmia	r1!, {s14}
 8006102:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006106:	ece2 7a01 	vstmia	r2!, {s15}
 800610a:	4294      	cmp	r4, r2
 800610c:	d1f5      	bne.n	80060fa <forward_lite_dense_if32of32wf32_lut8+0x20e>
 800610e:	9a02      	ldr	r2, [sp, #8]
 8006110:	42a2      	cmp	r2, r4
 8006112:	d8da      	bhi.n	80060ca <forward_lite_dense_if32of32wf32_lut8+0x1de>
 8006114:	b007      	add	sp, #28
 8006116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611a:	4632      	mov	r2, r6
 800611c:	e7c8      	b.n	80060b0 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 800611e:	4616      	mov	r6, r2
 8006120:	465a      	mov	r2, fp
 8006122:	e776      	b.n	8006012 <forward_lite_dense_if32of32wf32_lut8+0x126>
 8006124:	9b01      	ldr	r3, [sp, #4]
 8006126:	1ae3      	subs	r3, r4, r3
 8006128:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800612a:	461a      	mov	r2, r3
 800612c:	ed92 7a00 	vldr	s14, [r2]
 8006130:	ecf1 7a01 	vldmia	r1!, {s15}
 8006134:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006138:	ece2 7a01 	vstmia	r2!, {s15}
 800613c:	42a2      	cmp	r2, r4
 800613e:	d1f5      	bne.n	800612c <forward_lite_dense_if32of32wf32_lut8+0x240>
 8006140:	e7f2      	b.n	8006128 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 8006142:	bf00      	nop
 8006144:	00000000 	.word	0x00000000

08006148 <st_int8_copy>:
 8006148:	4288      	cmp	r0, r1
 800614a:	d022      	beq.n	8006192 <st_int8_copy+0x4a>
 800614c:	b30a      	cbz	r2, 8006192 <st_int8_copy+0x4a>
 800614e:	4288      	cmp	r0, r1
 8006150:	d312      	bcc.n	8006178 <st_int8_copy+0x30>
 8006152:	2a03      	cmp	r2, #3
 8006154:	d81e      	bhi.n	8006194 <st_int8_copy+0x4c>
 8006156:	f810 3b01 	ldrb.w	r3, [r0], #1
 800615a:	f801 3b01 	strb.w	r3, [r1], #1
 800615e:	2a01      	cmp	r2, #1
 8006160:	d017      	beq.n	8006192 <st_int8_copy+0x4a>
 8006162:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006166:	f801 3b01 	strb.w	r3, [r1], #1
 800616a:	2a02      	cmp	r2, #2
 800616c:	d011      	beq.n	8006192 <st_int8_copy+0x4a>
 800616e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006172:	f801 3b01 	strb.w	r3, [r1], #1
 8006176:	4770      	bx	lr
 8006178:	1883      	adds	r3, r0, r2
 800617a:	4299      	cmp	r1, r3
 800617c:	d2e9      	bcs.n	8006152 <st_int8_copy+0xa>
 800617e:	4298      	cmp	r0, r3
 8006180:	440a      	add	r2, r1
 8006182:	d206      	bcs.n	8006192 <st_int8_copy+0x4a>
 8006184:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8006188:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800618c:	4298      	cmp	r0, r3
 800618e:	d1f9      	bne.n	8006184 <st_int8_copy+0x3c>
 8006190:	4770      	bx	lr
 8006192:	4770      	bx	lr
 8006194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006198:	f001 0403 	and.w	r4, r1, #3
 800619c:	f1c4 0304 	rsb	r3, r4, #4
 80061a0:	f000 0e03 	and.w	lr, r0, #3
 80061a4:	eba2 0c03 	sub.w	ip, r2, r3
 80061a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061ac:	f801 3b01 	strb.w	r3, [r1], #1
 80061b0:	2c03      	cmp	r4, #3
 80061b2:	f1c4 0202 	rsb	r2, r4, #2
 80061b6:	d00e      	beq.n	80061d6 <st_int8_copy+0x8e>
 80061b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061bc:	f801 3b01 	strb.w	r3, [r1], #1
 80061c0:	2a00      	cmp	r2, #0
 80061c2:	dd08      	ble.n	80061d6 <st_int8_copy+0x8e>
 80061c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061c8:	f801 3b01 	strb.w	r3, [r1], #1
 80061cc:	b91c      	cbnz	r4, 80061d6 <st_int8_copy+0x8e>
 80061ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061d2:	f801 3b01 	strb.w	r3, [r1], #1
 80061d6:	4574      	cmp	r4, lr
 80061d8:	d02b      	beq.n	8006232 <st_int8_copy+0xea>
 80061da:	ea4f 131c 	mov.w	r3, ip, lsr #4
 80061de:	1e5a      	subs	r2, r3, #1
 80061e0:	b153      	cbz	r3, 80061f8 <st_int8_copy+0xb0>
 80061e2:	f850 3b04 	ldr.w	r3, [r0], #4
 80061e6:	f850 4b04 	ldr.w	r4, [r0], #4
 80061ea:	f850 5b04 	ldr.w	r5, [r0], #4
 80061ee:	f850 6b04 	ldr.w	r6, [r0], #4
 80061f2:	c178      	stmia	r1!, {r3, r4, r5, r6}
 80061f4:	3a01      	subs	r2, #1
 80061f6:	d2f4      	bcs.n	80061e2 <st_int8_copy+0x9a>
 80061f8:	f01c 0f08 	tst.w	ip, #8
 80061fc:	d004      	beq.n	8006208 <st_int8_copy+0xc0>
 80061fe:	f850 3b04 	ldr.w	r3, [r0], #4
 8006202:	f850 4b04 	ldr.w	r4, [r0], #4
 8006206:	c118      	stmia	r1!, {r3, r4}
 8006208:	f01c 0f04 	tst.w	ip, #4
 800620c:	d003      	beq.n	8006216 <st_int8_copy+0xce>
 800620e:	f850 3b04 	ldr.w	r3, [r0], #4
 8006212:	f841 3b04 	str.w	r3, [r1], #4
 8006216:	f01c 0f02 	tst.w	ip, #2
 800621a:	d003      	beq.n	8006224 <st_int8_copy+0xdc>
 800621c:	f830 3b02 	ldrh.w	r3, [r0], #2
 8006220:	f821 3b02 	strh.w	r3, [r1], #2
 8006224:	f01c 0f01 	tst.w	ip, #1
 8006228:	d001      	beq.n	800622e <st_int8_copy+0xe6>
 800622a:	7803      	ldrb	r3, [r0, #0]
 800622c:	700b      	strb	r3, [r1, #0]
 800622e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006232:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8006236:	f103 39ff 	add.w	r9, r3, #4294967295
 800623a:	b183      	cbz	r3, 800625e <st_int8_copy+0x116>
 800623c:	4688      	mov	r8, r1
 800623e:	4686      	mov	lr, r0
 8006240:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006244:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006248:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800624c:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006250:	f109 39ff 	add.w	r9, r9, #4294967295
 8006254:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006258:	4641      	mov	r1, r8
 800625a:	4670      	mov	r0, lr
 800625c:	d1ee      	bne.n	800623c <st_int8_copy+0xf4>
 800625e:	f01c 0f20 	tst.w	ip, #32
 8006262:	d007      	beq.n	8006274 <st_int8_copy+0x12c>
 8006264:	4688      	mov	r8, r1
 8006266:	4686      	mov	lr, r0
 8006268:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800626c:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8006270:	4641      	mov	r1, r8
 8006272:	4670      	mov	r0, lr
 8006274:	f01c 0f10 	tst.w	ip, #16
 8006278:	d001      	beq.n	800627e <st_int8_copy+0x136>
 800627a:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800627c:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800627e:	f01c 0f08 	tst.w	ip, #8
 8006282:	d0c1      	beq.n	8006208 <st_int8_copy+0xc0>
 8006284:	c818      	ldmia	r0!, {r3, r4}
 8006286:	c118      	stmia	r1!, {r3, r4}
 8006288:	e7be      	b.n	8006208 <st_int8_copy+0xc0>
 800628a:	bf00      	nop

0800628c <ai_array_to_buffer_fmt>:
 800628c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006290:	2b02      	cmp	r3, #2
 8006292:	d055      	beq.n	8006340 <ai_array_to_buffer_fmt+0xb4>
 8006294:	4a2d      	ldr	r2, [pc, #180]	@ (800634c <ai_array_to_buffer_fmt+0xc0>)
 8006296:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800629a:	4293      	cmp	r3, r2
 800629c:	d010      	beq.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 800629e:	dc21      	bgt.n	80062e4 <ai_array_to_buffer_fmt+0x58>
 80062a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006350 <ai_array_to_buffer_fmt+0xc4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00c      	beq.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 80062a6:	dd0f      	ble.n	80062c8 <ai_array_to_buffer_fmt+0x3c>
 80062a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006354 <ai_array_to_buffer_fmt+0xc8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d008      	beq.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 80062ae:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d004      	beq.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 80062b6:	4a28      	ldr	r2, [pc, #160]	@ (8006358 <ai_array_to_buffer_fmt+0xcc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	bf0c      	ite	eq
 80062bc:	4613      	moveq	r3, r2
 80062be:	2340      	movne	r3, #64	@ 0x40
 80062c0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80062c4:	4318      	orrs	r0, r3
 80062c6:	4770      	bx	lr
 80062c8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d0f7      	beq.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 80062d0:	dd2c      	ble.n	800632c <ai_array_to_buffer_fmt+0xa0>
 80062d2:	4a22      	ldr	r2, [pc, #136]	@ (800635c <ai_array_to_buffer_fmt+0xd0>)
 80062d4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80062d8:	4293      	cmp	r3, r2
 80062da:	bf0c      	ite	eq
 80062dc:	4613      	moveq	r3, r2
 80062de:	2340      	movne	r3, #64	@ 0x40
 80062e0:	4318      	orrs	r0, r3
 80062e2:	4770      	bx	lr
 80062e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006360 <ai_array_to_buffer_fmt+0xd4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d0ea      	beq.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 80062ea:	dd10      	ble.n	800630e <ai_array_to_buffer_fmt+0x82>
 80062ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006364 <ai_array_to_buffer_fmt+0xd8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d0e6      	beq.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 80062f2:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d0e2      	beq.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 80062fa:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 80062fe:	4293      	cmp	r3, r2
 8006300:	bf0c      	ite	eq
 8006302:	4613      	moveq	r3, r2
 8006304:	2340      	movne	r3, #64	@ 0x40
 8006306:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800630a:	4318      	orrs	r0, r3
 800630c:	4770      	bx	lr
 800630e:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8006312:	4293      	cmp	r3, r2
 8006314:	d0d4      	beq.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 8006316:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800631a:	4293      	cmp	r3, r2
 800631c:	d0d0      	beq.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 800631e:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8006322:	4293      	cmp	r3, r2
 8006324:	bf0c      	ite	eq
 8006326:	4613      	moveq	r3, r2
 8006328:	2340      	movne	r3, #64	@ 0x40
 800632a:	e7c9      	b.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 800632c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8006330:	4293      	cmp	r3, r2
 8006332:	d0c5      	beq.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 8006334:	3280      	adds	r2, #128	@ 0x80
 8006336:	4293      	cmp	r3, r2
 8006338:	bf0c      	ite	eq
 800633a:	4613      	moveq	r3, r2
 800633c:	2340      	movne	r3, #64	@ 0x40
 800633e:	e7bf      	b.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 8006340:	4b09      	ldr	r3, [pc, #36]	@ (8006368 <ai_array_to_buffer_fmt+0xdc>)
 8006342:	4003      	ands	r3, r0
 8006344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006348:	e7ba      	b.n	80062c0 <ai_array_to_buffer_fmt+0x34>
 800634a:	bf00      	nop
 800634c:	00821040 	.word	0x00821040
 8006350:	00040840 	.word	0x00040840
 8006354:	00041040 	.word	0x00041040
 8006358:	0004084f 	.word	0x0004084f
 800635c:	00040447 	.word	0x00040447
 8006360:	00840447 	.word	0x00840447
 8006364:	0084084f 	.word	0x0084084f
 8006368:	00803fff 	.word	0x00803fff

0800636c <ai_array_get_data_byte_size>:
 800636c:	b169      	cbz	r1, 800638a <ai_array_get_data_byte_size+0x1e>
 800636e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006372:	fb03 f101 	mul.w	r1, r3, r1
 8006376:	1dcb      	adds	r3, r1, #7
 8006378:	f023 0307 	bic.w	r3, r3, #7
 800637c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8006380:	fa23 f000 	lsr.w	r0, r3, r0
 8006384:	3007      	adds	r0, #7
 8006386:	08c0      	lsrs	r0, r0, #3
 8006388:	4770      	bx	lr
 800638a:	4608      	mov	r0, r1
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop

08006390 <ai_version_get>:
 8006390:	0212      	lsls	r2, r2, #8
 8006392:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006396:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800639a:	4770      	bx	lr

0800639c <get_tensor_byte_size>:
 800639c:	b410      	push	{r4}
 800639e:	6983      	ldr	r3, [r0, #24]
 80063a0:	68c4      	ldr	r4, [r0, #12]
 80063a2:	6941      	ldr	r1, [r0, #20]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68e0      	ldr	r0, [r4, #12]
 80063a8:	4a07      	ldr	r2, [pc, #28]	@ (80063c8 <get_tensor_byte_size+0x2c>)
 80063aa:	68c9      	ldr	r1, [r1, #12]
 80063ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063b0:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 80063b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80063b8:	fb01 f000 	mul.w	r0, r1, r0
 80063bc:	4293      	cmp	r3, r2
 80063be:	bf04      	itt	eq
 80063c0:	3007      	addeq	r0, #7
 80063c2:	08c0      	lsreq	r0, r0, #3
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	000400c0 	.word	0x000400c0

080063cc <malloc>:
 80063cc:	4b02      	ldr	r3, [pc, #8]	@ (80063d8 <malloc+0xc>)
 80063ce:	4601      	mov	r1, r0
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	f000 b825 	b.w	8006420 <_malloc_r>
 80063d6:	bf00      	nop
 80063d8:	200006ac 	.word	0x200006ac

080063dc <sbrk_aligned>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	4e0f      	ldr	r6, [pc, #60]	@ (800641c <sbrk_aligned+0x40>)
 80063e0:	460c      	mov	r4, r1
 80063e2:	6831      	ldr	r1, [r6, #0]
 80063e4:	4605      	mov	r5, r0
 80063e6:	b911      	cbnz	r1, 80063ee <sbrk_aligned+0x12>
 80063e8:	f000 fe92 	bl	8007110 <_sbrk_r>
 80063ec:	6030      	str	r0, [r6, #0]
 80063ee:	4621      	mov	r1, r4
 80063f0:	4628      	mov	r0, r5
 80063f2:	f000 fe8d 	bl	8007110 <_sbrk_r>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	d103      	bne.n	8006402 <sbrk_aligned+0x26>
 80063fa:	f04f 34ff 	mov.w	r4, #4294967295
 80063fe:	4620      	mov	r0, r4
 8006400:	bd70      	pop	{r4, r5, r6, pc}
 8006402:	1cc4      	adds	r4, r0, #3
 8006404:	f024 0403 	bic.w	r4, r4, #3
 8006408:	42a0      	cmp	r0, r4
 800640a:	d0f8      	beq.n	80063fe <sbrk_aligned+0x22>
 800640c:	1a21      	subs	r1, r4, r0
 800640e:	4628      	mov	r0, r5
 8006410:	f000 fe7e 	bl	8007110 <_sbrk_r>
 8006414:	3001      	adds	r0, #1
 8006416:	d1f2      	bne.n	80063fe <sbrk_aligned+0x22>
 8006418:	e7ef      	b.n	80063fa <sbrk_aligned+0x1e>
 800641a:	bf00      	nop
 800641c:	20000a9c 	.word	0x20000a9c

08006420 <_malloc_r>:
 8006420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006424:	1ccd      	adds	r5, r1, #3
 8006426:	f025 0503 	bic.w	r5, r5, #3
 800642a:	3508      	adds	r5, #8
 800642c:	2d0c      	cmp	r5, #12
 800642e:	bf38      	it	cc
 8006430:	250c      	movcc	r5, #12
 8006432:	2d00      	cmp	r5, #0
 8006434:	4606      	mov	r6, r0
 8006436:	db01      	blt.n	800643c <_malloc_r+0x1c>
 8006438:	42a9      	cmp	r1, r5
 800643a:	d904      	bls.n	8006446 <_malloc_r+0x26>
 800643c:	230c      	movs	r3, #12
 800643e:	6033      	str	r3, [r6, #0]
 8006440:	2000      	movs	r0, #0
 8006442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800651c <_malloc_r+0xfc>
 800644a:	f000 f869 	bl	8006520 <__malloc_lock>
 800644e:	f8d8 3000 	ldr.w	r3, [r8]
 8006452:	461c      	mov	r4, r3
 8006454:	bb44      	cbnz	r4, 80064a8 <_malloc_r+0x88>
 8006456:	4629      	mov	r1, r5
 8006458:	4630      	mov	r0, r6
 800645a:	f7ff ffbf 	bl	80063dc <sbrk_aligned>
 800645e:	1c43      	adds	r3, r0, #1
 8006460:	4604      	mov	r4, r0
 8006462:	d158      	bne.n	8006516 <_malloc_r+0xf6>
 8006464:	f8d8 4000 	ldr.w	r4, [r8]
 8006468:	4627      	mov	r7, r4
 800646a:	2f00      	cmp	r7, #0
 800646c:	d143      	bne.n	80064f6 <_malloc_r+0xd6>
 800646e:	2c00      	cmp	r4, #0
 8006470:	d04b      	beq.n	800650a <_malloc_r+0xea>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	4639      	mov	r1, r7
 8006476:	4630      	mov	r0, r6
 8006478:	eb04 0903 	add.w	r9, r4, r3
 800647c:	f000 fe48 	bl	8007110 <_sbrk_r>
 8006480:	4581      	cmp	r9, r0
 8006482:	d142      	bne.n	800650a <_malloc_r+0xea>
 8006484:	6821      	ldr	r1, [r4, #0]
 8006486:	1a6d      	subs	r5, r5, r1
 8006488:	4629      	mov	r1, r5
 800648a:	4630      	mov	r0, r6
 800648c:	f7ff ffa6 	bl	80063dc <sbrk_aligned>
 8006490:	3001      	adds	r0, #1
 8006492:	d03a      	beq.n	800650a <_malloc_r+0xea>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	442b      	add	r3, r5
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	f8d8 3000 	ldr.w	r3, [r8]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	bb62      	cbnz	r2, 80064fc <_malloc_r+0xdc>
 80064a2:	f8c8 7000 	str.w	r7, [r8]
 80064a6:	e00f      	b.n	80064c8 <_malloc_r+0xa8>
 80064a8:	6822      	ldr	r2, [r4, #0]
 80064aa:	1b52      	subs	r2, r2, r5
 80064ac:	d420      	bmi.n	80064f0 <_malloc_r+0xd0>
 80064ae:	2a0b      	cmp	r2, #11
 80064b0:	d917      	bls.n	80064e2 <_malloc_r+0xc2>
 80064b2:	1961      	adds	r1, r4, r5
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	6025      	str	r5, [r4, #0]
 80064b8:	bf18      	it	ne
 80064ba:	6059      	strne	r1, [r3, #4]
 80064bc:	6863      	ldr	r3, [r4, #4]
 80064be:	bf08      	it	eq
 80064c0:	f8c8 1000 	streq.w	r1, [r8]
 80064c4:	5162      	str	r2, [r4, r5]
 80064c6:	604b      	str	r3, [r1, #4]
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f82f 	bl	800652c <__malloc_unlock>
 80064ce:	f104 000b 	add.w	r0, r4, #11
 80064d2:	1d23      	adds	r3, r4, #4
 80064d4:	f020 0007 	bic.w	r0, r0, #7
 80064d8:	1ac2      	subs	r2, r0, r3
 80064da:	bf1c      	itt	ne
 80064dc:	1a1b      	subne	r3, r3, r0
 80064de:	50a3      	strne	r3, [r4, r2]
 80064e0:	e7af      	b.n	8006442 <_malloc_r+0x22>
 80064e2:	6862      	ldr	r2, [r4, #4]
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	bf0c      	ite	eq
 80064e8:	f8c8 2000 	streq.w	r2, [r8]
 80064ec:	605a      	strne	r2, [r3, #4]
 80064ee:	e7eb      	b.n	80064c8 <_malloc_r+0xa8>
 80064f0:	4623      	mov	r3, r4
 80064f2:	6864      	ldr	r4, [r4, #4]
 80064f4:	e7ae      	b.n	8006454 <_malloc_r+0x34>
 80064f6:	463c      	mov	r4, r7
 80064f8:	687f      	ldr	r7, [r7, #4]
 80064fa:	e7b6      	b.n	800646a <_malloc_r+0x4a>
 80064fc:	461a      	mov	r2, r3
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	42a3      	cmp	r3, r4
 8006502:	d1fb      	bne.n	80064fc <_malloc_r+0xdc>
 8006504:	2300      	movs	r3, #0
 8006506:	6053      	str	r3, [r2, #4]
 8006508:	e7de      	b.n	80064c8 <_malloc_r+0xa8>
 800650a:	230c      	movs	r3, #12
 800650c:	6033      	str	r3, [r6, #0]
 800650e:	4630      	mov	r0, r6
 8006510:	f000 f80c 	bl	800652c <__malloc_unlock>
 8006514:	e794      	b.n	8006440 <_malloc_r+0x20>
 8006516:	6005      	str	r5, [r0, #0]
 8006518:	e7d6      	b.n	80064c8 <_malloc_r+0xa8>
 800651a:	bf00      	nop
 800651c:	20000aa0 	.word	0x20000aa0

08006520 <__malloc_lock>:
 8006520:	4801      	ldr	r0, [pc, #4]	@ (8006528 <__malloc_lock+0x8>)
 8006522:	f000 be42 	b.w	80071aa <__retarget_lock_acquire_recursive>
 8006526:	bf00      	nop
 8006528:	20000be4 	.word	0x20000be4

0800652c <__malloc_unlock>:
 800652c:	4801      	ldr	r0, [pc, #4]	@ (8006534 <__malloc_unlock+0x8>)
 800652e:	f000 be3d 	b.w	80071ac <__retarget_lock_release_recursive>
 8006532:	bf00      	nop
 8006534:	20000be4 	.word	0x20000be4

08006538 <_realloc_r>:
 8006538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653c:	4607      	mov	r7, r0
 800653e:	4614      	mov	r4, r2
 8006540:	460d      	mov	r5, r1
 8006542:	b921      	cbnz	r1, 800654e <_realloc_r+0x16>
 8006544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006548:	4611      	mov	r1, r2
 800654a:	f7ff bf69 	b.w	8006420 <_malloc_r>
 800654e:	b92a      	cbnz	r2, 800655c <_realloc_r+0x24>
 8006550:	f001 fc96 	bl	8007e80 <_free_r>
 8006554:	4625      	mov	r5, r4
 8006556:	4628      	mov	r0, r5
 8006558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800655c:	f002 f854 	bl	8008608 <_malloc_usable_size_r>
 8006560:	4284      	cmp	r4, r0
 8006562:	4606      	mov	r6, r0
 8006564:	d802      	bhi.n	800656c <_realloc_r+0x34>
 8006566:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800656a:	d8f4      	bhi.n	8006556 <_realloc_r+0x1e>
 800656c:	4621      	mov	r1, r4
 800656e:	4638      	mov	r0, r7
 8006570:	f7ff ff56 	bl	8006420 <_malloc_r>
 8006574:	4680      	mov	r8, r0
 8006576:	b908      	cbnz	r0, 800657c <_realloc_r+0x44>
 8006578:	4645      	mov	r5, r8
 800657a:	e7ec      	b.n	8006556 <_realloc_r+0x1e>
 800657c:	42b4      	cmp	r4, r6
 800657e:	4622      	mov	r2, r4
 8006580:	4629      	mov	r1, r5
 8006582:	bf28      	it	cs
 8006584:	4632      	movcs	r2, r6
 8006586:	f000 fe12 	bl	80071ae <memcpy>
 800658a:	4629      	mov	r1, r5
 800658c:	4638      	mov	r0, r7
 800658e:	f001 fc77 	bl	8007e80 <_free_r>
 8006592:	e7f1      	b.n	8006578 <_realloc_r+0x40>

08006594 <__cvt>:
 8006594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	ec57 6b10 	vmov	r6, r7, d0
 800659c:	2f00      	cmp	r7, #0
 800659e:	460c      	mov	r4, r1
 80065a0:	4619      	mov	r1, r3
 80065a2:	463b      	mov	r3, r7
 80065a4:	bfbb      	ittet	lt
 80065a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80065aa:	461f      	movlt	r7, r3
 80065ac:	2300      	movge	r3, #0
 80065ae:	232d      	movlt	r3, #45	@ 0x2d
 80065b0:	700b      	strb	r3, [r1, #0]
 80065b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80065b8:	4691      	mov	r9, r2
 80065ba:	f023 0820 	bic.w	r8, r3, #32
 80065be:	bfbc      	itt	lt
 80065c0:	4632      	movlt	r2, r6
 80065c2:	4616      	movlt	r6, r2
 80065c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065c8:	d005      	beq.n	80065d6 <__cvt+0x42>
 80065ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80065ce:	d100      	bne.n	80065d2 <__cvt+0x3e>
 80065d0:	3401      	adds	r4, #1
 80065d2:	2102      	movs	r1, #2
 80065d4:	e000      	b.n	80065d8 <__cvt+0x44>
 80065d6:	2103      	movs	r1, #3
 80065d8:	ab03      	add	r3, sp, #12
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	ab02      	add	r3, sp, #8
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	ec47 6b10 	vmov	d0, r6, r7
 80065e4:	4653      	mov	r3, sl
 80065e6:	4622      	mov	r2, r4
 80065e8:	f000 fe7a 	bl	80072e0 <_dtoa_r>
 80065ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065f0:	4605      	mov	r5, r0
 80065f2:	d119      	bne.n	8006628 <__cvt+0x94>
 80065f4:	f019 0f01 	tst.w	r9, #1
 80065f8:	d00e      	beq.n	8006618 <__cvt+0x84>
 80065fa:	eb00 0904 	add.w	r9, r0, r4
 80065fe:	2200      	movs	r2, #0
 8006600:	2300      	movs	r3, #0
 8006602:	4630      	mov	r0, r6
 8006604:	4639      	mov	r1, r7
 8006606:	f7fa fa67 	bl	8000ad8 <__aeabi_dcmpeq>
 800660a:	b108      	cbz	r0, 8006610 <__cvt+0x7c>
 800660c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006610:	2230      	movs	r2, #48	@ 0x30
 8006612:	9b03      	ldr	r3, [sp, #12]
 8006614:	454b      	cmp	r3, r9
 8006616:	d31e      	bcc.n	8006656 <__cvt+0xc2>
 8006618:	9b03      	ldr	r3, [sp, #12]
 800661a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800661c:	1b5b      	subs	r3, r3, r5
 800661e:	4628      	mov	r0, r5
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	b004      	add	sp, #16
 8006624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006628:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800662c:	eb00 0904 	add.w	r9, r0, r4
 8006630:	d1e5      	bne.n	80065fe <__cvt+0x6a>
 8006632:	7803      	ldrb	r3, [r0, #0]
 8006634:	2b30      	cmp	r3, #48	@ 0x30
 8006636:	d10a      	bne.n	800664e <__cvt+0xba>
 8006638:	2200      	movs	r2, #0
 800663a:	2300      	movs	r3, #0
 800663c:	4630      	mov	r0, r6
 800663e:	4639      	mov	r1, r7
 8006640:	f7fa fa4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006644:	b918      	cbnz	r0, 800664e <__cvt+0xba>
 8006646:	f1c4 0401 	rsb	r4, r4, #1
 800664a:	f8ca 4000 	str.w	r4, [sl]
 800664e:	f8da 3000 	ldr.w	r3, [sl]
 8006652:	4499      	add	r9, r3
 8006654:	e7d3      	b.n	80065fe <__cvt+0x6a>
 8006656:	1c59      	adds	r1, r3, #1
 8006658:	9103      	str	r1, [sp, #12]
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	e7d9      	b.n	8006612 <__cvt+0x7e>

0800665e <__exponent>:
 800665e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006660:	2900      	cmp	r1, #0
 8006662:	bfba      	itte	lt
 8006664:	4249      	neglt	r1, r1
 8006666:	232d      	movlt	r3, #45	@ 0x2d
 8006668:	232b      	movge	r3, #43	@ 0x2b
 800666a:	2909      	cmp	r1, #9
 800666c:	7002      	strb	r2, [r0, #0]
 800666e:	7043      	strb	r3, [r0, #1]
 8006670:	dd29      	ble.n	80066c6 <__exponent+0x68>
 8006672:	f10d 0307 	add.w	r3, sp, #7
 8006676:	461d      	mov	r5, r3
 8006678:	270a      	movs	r7, #10
 800667a:	461a      	mov	r2, r3
 800667c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006680:	fb07 1416 	mls	r4, r7, r6, r1
 8006684:	3430      	adds	r4, #48	@ 0x30
 8006686:	f802 4c01 	strb.w	r4, [r2, #-1]
 800668a:	460c      	mov	r4, r1
 800668c:	2c63      	cmp	r4, #99	@ 0x63
 800668e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006692:	4631      	mov	r1, r6
 8006694:	dcf1      	bgt.n	800667a <__exponent+0x1c>
 8006696:	3130      	adds	r1, #48	@ 0x30
 8006698:	1e94      	subs	r4, r2, #2
 800669a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800669e:	1c41      	adds	r1, r0, #1
 80066a0:	4623      	mov	r3, r4
 80066a2:	42ab      	cmp	r3, r5
 80066a4:	d30a      	bcc.n	80066bc <__exponent+0x5e>
 80066a6:	f10d 0309 	add.w	r3, sp, #9
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	42ac      	cmp	r4, r5
 80066ae:	bf88      	it	hi
 80066b0:	2300      	movhi	r3, #0
 80066b2:	3302      	adds	r3, #2
 80066b4:	4403      	add	r3, r0
 80066b6:	1a18      	subs	r0, r3, r0
 80066b8:	b003      	add	sp, #12
 80066ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80066c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80066c4:	e7ed      	b.n	80066a2 <__exponent+0x44>
 80066c6:	2330      	movs	r3, #48	@ 0x30
 80066c8:	3130      	adds	r1, #48	@ 0x30
 80066ca:	7083      	strb	r3, [r0, #2]
 80066cc:	70c1      	strb	r1, [r0, #3]
 80066ce:	1d03      	adds	r3, r0, #4
 80066d0:	e7f1      	b.n	80066b6 <__exponent+0x58>
	...

080066d4 <_printf_float>:
 80066d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d8:	b08d      	sub	sp, #52	@ 0x34
 80066da:	460c      	mov	r4, r1
 80066dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80066e0:	4616      	mov	r6, r2
 80066e2:	461f      	mov	r7, r3
 80066e4:	4605      	mov	r5, r0
 80066e6:	f000 fcdb 	bl	80070a0 <_localeconv_r>
 80066ea:	6803      	ldr	r3, [r0, #0]
 80066ec:	9304      	str	r3, [sp, #16]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7f9 fdc6 	bl	8000280 <strlen>
 80066f4:	2300      	movs	r3, #0
 80066f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066f8:	f8d8 3000 	ldr.w	r3, [r8]
 80066fc:	9005      	str	r0, [sp, #20]
 80066fe:	3307      	adds	r3, #7
 8006700:	f023 0307 	bic.w	r3, r3, #7
 8006704:	f103 0208 	add.w	r2, r3, #8
 8006708:	f894 a018 	ldrb.w	sl, [r4, #24]
 800670c:	f8d4 b000 	ldr.w	fp, [r4]
 8006710:	f8c8 2000 	str.w	r2, [r8]
 8006714:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006718:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800671c:	9307      	str	r3, [sp, #28]
 800671e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006722:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800672a:	4b9c      	ldr	r3, [pc, #624]	@ (800699c <_printf_float+0x2c8>)
 800672c:	f04f 32ff 	mov.w	r2, #4294967295
 8006730:	f7fa fa04 	bl	8000b3c <__aeabi_dcmpun>
 8006734:	bb70      	cbnz	r0, 8006794 <_printf_float+0xc0>
 8006736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800673a:	4b98      	ldr	r3, [pc, #608]	@ (800699c <_printf_float+0x2c8>)
 800673c:	f04f 32ff 	mov.w	r2, #4294967295
 8006740:	f7fa f9de 	bl	8000b00 <__aeabi_dcmple>
 8006744:	bb30      	cbnz	r0, 8006794 <_printf_float+0xc0>
 8006746:	2200      	movs	r2, #0
 8006748:	2300      	movs	r3, #0
 800674a:	4640      	mov	r0, r8
 800674c:	4649      	mov	r1, r9
 800674e:	f7fa f9cd 	bl	8000aec <__aeabi_dcmplt>
 8006752:	b110      	cbz	r0, 800675a <_printf_float+0x86>
 8006754:	232d      	movs	r3, #45	@ 0x2d
 8006756:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800675a:	4a91      	ldr	r2, [pc, #580]	@ (80069a0 <_printf_float+0x2cc>)
 800675c:	4b91      	ldr	r3, [pc, #580]	@ (80069a4 <_printf_float+0x2d0>)
 800675e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006762:	bf8c      	ite	hi
 8006764:	4690      	movhi	r8, r2
 8006766:	4698      	movls	r8, r3
 8006768:	2303      	movs	r3, #3
 800676a:	6123      	str	r3, [r4, #16]
 800676c:	f02b 0304 	bic.w	r3, fp, #4
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	f04f 0900 	mov.w	r9, #0
 8006776:	9700      	str	r7, [sp, #0]
 8006778:	4633      	mov	r3, r6
 800677a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800677c:	4621      	mov	r1, r4
 800677e:	4628      	mov	r0, r5
 8006780:	f000 f9d2 	bl	8006b28 <_printf_common>
 8006784:	3001      	adds	r0, #1
 8006786:	f040 808d 	bne.w	80068a4 <_printf_float+0x1d0>
 800678a:	f04f 30ff 	mov.w	r0, #4294967295
 800678e:	b00d      	add	sp, #52	@ 0x34
 8006790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006794:	4642      	mov	r2, r8
 8006796:	464b      	mov	r3, r9
 8006798:	4640      	mov	r0, r8
 800679a:	4649      	mov	r1, r9
 800679c:	f7fa f9ce 	bl	8000b3c <__aeabi_dcmpun>
 80067a0:	b140      	cbz	r0, 80067b4 <_printf_float+0xe0>
 80067a2:	464b      	mov	r3, r9
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	bfbc      	itt	lt
 80067a8:	232d      	movlt	r3, #45	@ 0x2d
 80067aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80067ae:	4a7e      	ldr	r2, [pc, #504]	@ (80069a8 <_printf_float+0x2d4>)
 80067b0:	4b7e      	ldr	r3, [pc, #504]	@ (80069ac <_printf_float+0x2d8>)
 80067b2:	e7d4      	b.n	800675e <_printf_float+0x8a>
 80067b4:	6863      	ldr	r3, [r4, #4]
 80067b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80067ba:	9206      	str	r2, [sp, #24]
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	d13b      	bne.n	8006838 <_printf_float+0x164>
 80067c0:	2306      	movs	r3, #6
 80067c2:	6063      	str	r3, [r4, #4]
 80067c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80067c8:	2300      	movs	r3, #0
 80067ca:	6022      	str	r2, [r4, #0]
 80067cc:	9303      	str	r3, [sp, #12]
 80067ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80067d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80067d4:	ab09      	add	r3, sp, #36	@ 0x24
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	6861      	ldr	r1, [r4, #4]
 80067da:	ec49 8b10 	vmov	d0, r8, r9
 80067de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80067e2:	4628      	mov	r0, r5
 80067e4:	f7ff fed6 	bl	8006594 <__cvt>
 80067e8:	9b06      	ldr	r3, [sp, #24]
 80067ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067ec:	2b47      	cmp	r3, #71	@ 0x47
 80067ee:	4680      	mov	r8, r0
 80067f0:	d129      	bne.n	8006846 <_printf_float+0x172>
 80067f2:	1cc8      	adds	r0, r1, #3
 80067f4:	db02      	blt.n	80067fc <_printf_float+0x128>
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	4299      	cmp	r1, r3
 80067fa:	dd41      	ble.n	8006880 <_printf_float+0x1ac>
 80067fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006800:	fa5f fa8a 	uxtb.w	sl, sl
 8006804:	3901      	subs	r1, #1
 8006806:	4652      	mov	r2, sl
 8006808:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800680c:	9109      	str	r1, [sp, #36]	@ 0x24
 800680e:	f7ff ff26 	bl	800665e <__exponent>
 8006812:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006814:	1813      	adds	r3, r2, r0
 8006816:	2a01      	cmp	r2, #1
 8006818:	4681      	mov	r9, r0
 800681a:	6123      	str	r3, [r4, #16]
 800681c:	dc02      	bgt.n	8006824 <_printf_float+0x150>
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	07d2      	lsls	r2, r2, #31
 8006822:	d501      	bpl.n	8006828 <_printf_float+0x154>
 8006824:	3301      	adds	r3, #1
 8006826:	6123      	str	r3, [r4, #16]
 8006828:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0a2      	beq.n	8006776 <_printf_float+0xa2>
 8006830:	232d      	movs	r3, #45	@ 0x2d
 8006832:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006836:	e79e      	b.n	8006776 <_printf_float+0xa2>
 8006838:	9a06      	ldr	r2, [sp, #24]
 800683a:	2a47      	cmp	r2, #71	@ 0x47
 800683c:	d1c2      	bne.n	80067c4 <_printf_float+0xf0>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1c0      	bne.n	80067c4 <_printf_float+0xf0>
 8006842:	2301      	movs	r3, #1
 8006844:	e7bd      	b.n	80067c2 <_printf_float+0xee>
 8006846:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800684a:	d9db      	bls.n	8006804 <_printf_float+0x130>
 800684c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006850:	d118      	bne.n	8006884 <_printf_float+0x1b0>
 8006852:	2900      	cmp	r1, #0
 8006854:	6863      	ldr	r3, [r4, #4]
 8006856:	dd0b      	ble.n	8006870 <_printf_float+0x19c>
 8006858:	6121      	str	r1, [r4, #16]
 800685a:	b913      	cbnz	r3, 8006862 <_printf_float+0x18e>
 800685c:	6822      	ldr	r2, [r4, #0]
 800685e:	07d0      	lsls	r0, r2, #31
 8006860:	d502      	bpl.n	8006868 <_printf_float+0x194>
 8006862:	3301      	adds	r3, #1
 8006864:	440b      	add	r3, r1
 8006866:	6123      	str	r3, [r4, #16]
 8006868:	65a1      	str	r1, [r4, #88]	@ 0x58
 800686a:	f04f 0900 	mov.w	r9, #0
 800686e:	e7db      	b.n	8006828 <_printf_float+0x154>
 8006870:	b913      	cbnz	r3, 8006878 <_printf_float+0x1a4>
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	07d2      	lsls	r2, r2, #31
 8006876:	d501      	bpl.n	800687c <_printf_float+0x1a8>
 8006878:	3302      	adds	r3, #2
 800687a:	e7f4      	b.n	8006866 <_printf_float+0x192>
 800687c:	2301      	movs	r3, #1
 800687e:	e7f2      	b.n	8006866 <_printf_float+0x192>
 8006880:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006886:	4299      	cmp	r1, r3
 8006888:	db05      	blt.n	8006896 <_printf_float+0x1c2>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	6121      	str	r1, [r4, #16]
 800688e:	07d8      	lsls	r0, r3, #31
 8006890:	d5ea      	bpl.n	8006868 <_printf_float+0x194>
 8006892:	1c4b      	adds	r3, r1, #1
 8006894:	e7e7      	b.n	8006866 <_printf_float+0x192>
 8006896:	2900      	cmp	r1, #0
 8006898:	bfd4      	ite	le
 800689a:	f1c1 0202 	rsble	r2, r1, #2
 800689e:	2201      	movgt	r2, #1
 80068a0:	4413      	add	r3, r2
 80068a2:	e7e0      	b.n	8006866 <_printf_float+0x192>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	055a      	lsls	r2, r3, #21
 80068a8:	d407      	bmi.n	80068ba <_printf_float+0x1e6>
 80068aa:	6923      	ldr	r3, [r4, #16]
 80068ac:	4642      	mov	r2, r8
 80068ae:	4631      	mov	r1, r6
 80068b0:	4628      	mov	r0, r5
 80068b2:	47b8      	blx	r7
 80068b4:	3001      	adds	r0, #1
 80068b6:	d12b      	bne.n	8006910 <_printf_float+0x23c>
 80068b8:	e767      	b.n	800678a <_printf_float+0xb6>
 80068ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068be:	f240 80dd 	bls.w	8006a7c <_printf_float+0x3a8>
 80068c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068c6:	2200      	movs	r2, #0
 80068c8:	2300      	movs	r3, #0
 80068ca:	f7fa f905 	bl	8000ad8 <__aeabi_dcmpeq>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d033      	beq.n	800693a <_printf_float+0x266>
 80068d2:	4a37      	ldr	r2, [pc, #220]	@ (80069b0 <_printf_float+0x2dc>)
 80068d4:	2301      	movs	r3, #1
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	f43f af54 	beq.w	800678a <_printf_float+0xb6>
 80068e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80068e6:	4543      	cmp	r3, r8
 80068e8:	db02      	blt.n	80068f0 <_printf_float+0x21c>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	07d8      	lsls	r0, r3, #31
 80068ee:	d50f      	bpl.n	8006910 <_printf_float+0x23c>
 80068f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068f4:	4631      	mov	r1, r6
 80068f6:	4628      	mov	r0, r5
 80068f8:	47b8      	blx	r7
 80068fa:	3001      	adds	r0, #1
 80068fc:	f43f af45 	beq.w	800678a <_printf_float+0xb6>
 8006900:	f04f 0900 	mov.w	r9, #0
 8006904:	f108 38ff 	add.w	r8, r8, #4294967295
 8006908:	f104 0a1a 	add.w	sl, r4, #26
 800690c:	45c8      	cmp	r8, r9
 800690e:	dc09      	bgt.n	8006924 <_printf_float+0x250>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	079b      	lsls	r3, r3, #30
 8006914:	f100 8103 	bmi.w	8006b1e <_printf_float+0x44a>
 8006918:	68e0      	ldr	r0, [r4, #12]
 800691a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800691c:	4298      	cmp	r0, r3
 800691e:	bfb8      	it	lt
 8006920:	4618      	movlt	r0, r3
 8006922:	e734      	b.n	800678e <_printf_float+0xba>
 8006924:	2301      	movs	r3, #1
 8006926:	4652      	mov	r2, sl
 8006928:	4631      	mov	r1, r6
 800692a:	4628      	mov	r0, r5
 800692c:	47b8      	blx	r7
 800692e:	3001      	adds	r0, #1
 8006930:	f43f af2b 	beq.w	800678a <_printf_float+0xb6>
 8006934:	f109 0901 	add.w	r9, r9, #1
 8006938:	e7e8      	b.n	800690c <_printf_float+0x238>
 800693a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800693c:	2b00      	cmp	r3, #0
 800693e:	dc39      	bgt.n	80069b4 <_printf_float+0x2e0>
 8006940:	4a1b      	ldr	r2, [pc, #108]	@ (80069b0 <_printf_float+0x2dc>)
 8006942:	2301      	movs	r3, #1
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	f43f af1d 	beq.w	800678a <_printf_float+0xb6>
 8006950:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006954:	ea59 0303 	orrs.w	r3, r9, r3
 8006958:	d102      	bne.n	8006960 <_printf_float+0x28c>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	07d9      	lsls	r1, r3, #31
 800695e:	d5d7      	bpl.n	8006910 <_printf_float+0x23c>
 8006960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	f43f af0d 	beq.w	800678a <_printf_float+0xb6>
 8006970:	f04f 0a00 	mov.w	sl, #0
 8006974:	f104 0b1a 	add.w	fp, r4, #26
 8006978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800697a:	425b      	negs	r3, r3
 800697c:	4553      	cmp	r3, sl
 800697e:	dc01      	bgt.n	8006984 <_printf_float+0x2b0>
 8006980:	464b      	mov	r3, r9
 8006982:	e793      	b.n	80068ac <_printf_float+0x1d8>
 8006984:	2301      	movs	r3, #1
 8006986:	465a      	mov	r2, fp
 8006988:	4631      	mov	r1, r6
 800698a:	4628      	mov	r0, r5
 800698c:	47b8      	blx	r7
 800698e:	3001      	adds	r0, #1
 8006990:	f43f aefb 	beq.w	800678a <_printf_float+0xb6>
 8006994:	f10a 0a01 	add.w	sl, sl, #1
 8006998:	e7ee      	b.n	8006978 <_printf_float+0x2a4>
 800699a:	bf00      	nop
 800699c:	7fefffff 	.word	0x7fefffff
 80069a0:	0800972c 	.word	0x0800972c
 80069a4:	08009728 	.word	0x08009728
 80069a8:	08009734 	.word	0x08009734
 80069ac:	08009730 	.word	0x08009730
 80069b0:	08009738 	.word	0x08009738
 80069b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80069ba:	4553      	cmp	r3, sl
 80069bc:	bfa8      	it	ge
 80069be:	4653      	movge	r3, sl
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	4699      	mov	r9, r3
 80069c4:	dc36      	bgt.n	8006a34 <_printf_float+0x360>
 80069c6:	f04f 0b00 	mov.w	fp, #0
 80069ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ce:	f104 021a 	add.w	r2, r4, #26
 80069d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069d4:	9306      	str	r3, [sp, #24]
 80069d6:	eba3 0309 	sub.w	r3, r3, r9
 80069da:	455b      	cmp	r3, fp
 80069dc:	dc31      	bgt.n	8006a42 <_printf_float+0x36e>
 80069de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e0:	459a      	cmp	sl, r3
 80069e2:	dc3a      	bgt.n	8006a5a <_printf_float+0x386>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	07da      	lsls	r2, r3, #31
 80069e8:	d437      	bmi.n	8006a5a <_printf_float+0x386>
 80069ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ec:	ebaa 0903 	sub.w	r9, sl, r3
 80069f0:	9b06      	ldr	r3, [sp, #24]
 80069f2:	ebaa 0303 	sub.w	r3, sl, r3
 80069f6:	4599      	cmp	r9, r3
 80069f8:	bfa8      	it	ge
 80069fa:	4699      	movge	r9, r3
 80069fc:	f1b9 0f00 	cmp.w	r9, #0
 8006a00:	dc33      	bgt.n	8006a6a <_printf_float+0x396>
 8006a02:	f04f 0800 	mov.w	r8, #0
 8006a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a0a:	f104 0b1a 	add.w	fp, r4, #26
 8006a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a10:	ebaa 0303 	sub.w	r3, sl, r3
 8006a14:	eba3 0309 	sub.w	r3, r3, r9
 8006a18:	4543      	cmp	r3, r8
 8006a1a:	f77f af79 	ble.w	8006910 <_printf_float+0x23c>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	465a      	mov	r2, fp
 8006a22:	4631      	mov	r1, r6
 8006a24:	4628      	mov	r0, r5
 8006a26:	47b8      	blx	r7
 8006a28:	3001      	adds	r0, #1
 8006a2a:	f43f aeae 	beq.w	800678a <_printf_float+0xb6>
 8006a2e:	f108 0801 	add.w	r8, r8, #1
 8006a32:	e7ec      	b.n	8006a0e <_printf_float+0x33a>
 8006a34:	4642      	mov	r2, r8
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b8      	blx	r7
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d1c2      	bne.n	80069c6 <_printf_float+0x2f2>
 8006a40:	e6a3      	b.n	800678a <_printf_float+0xb6>
 8006a42:	2301      	movs	r3, #1
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	9206      	str	r2, [sp, #24]
 8006a4a:	47b8      	blx	r7
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	f43f ae9c 	beq.w	800678a <_printf_float+0xb6>
 8006a52:	9a06      	ldr	r2, [sp, #24]
 8006a54:	f10b 0b01 	add.w	fp, fp, #1
 8006a58:	e7bb      	b.n	80069d2 <_printf_float+0x2fe>
 8006a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	d1c0      	bne.n	80069ea <_printf_float+0x316>
 8006a68:	e68f      	b.n	800678a <_printf_float+0xb6>
 8006a6a:	9a06      	ldr	r2, [sp, #24]
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	4442      	add	r2, r8
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	d1c3      	bne.n	8006a02 <_printf_float+0x32e>
 8006a7a:	e686      	b.n	800678a <_printf_float+0xb6>
 8006a7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a80:	f1ba 0f01 	cmp.w	sl, #1
 8006a84:	dc01      	bgt.n	8006a8a <_printf_float+0x3b6>
 8006a86:	07db      	lsls	r3, r3, #31
 8006a88:	d536      	bpl.n	8006af8 <_printf_float+0x424>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b8      	blx	r7
 8006a94:	3001      	adds	r0, #1
 8006a96:	f43f ae78 	beq.w	800678a <_printf_float+0xb6>
 8006a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	f43f ae70 	beq.w	800678a <_printf_float+0xb6>
 8006aaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ab6:	f7fa f80f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aba:	b9c0      	cbnz	r0, 8006aee <_printf_float+0x41a>
 8006abc:	4653      	mov	r3, sl
 8006abe:	f108 0201 	add.w	r2, r8, #1
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d10c      	bne.n	8006ae6 <_printf_float+0x412>
 8006acc:	e65d      	b.n	800678a <_printf_float+0xb6>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	465a      	mov	r2, fp
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	47b8      	blx	r7
 8006ad8:	3001      	adds	r0, #1
 8006ada:	f43f ae56 	beq.w	800678a <_printf_float+0xb6>
 8006ade:	f108 0801 	add.w	r8, r8, #1
 8006ae2:	45d0      	cmp	r8, sl
 8006ae4:	dbf3      	blt.n	8006ace <_printf_float+0x3fa>
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006aec:	e6df      	b.n	80068ae <_printf_float+0x1da>
 8006aee:	f04f 0800 	mov.w	r8, #0
 8006af2:	f104 0b1a 	add.w	fp, r4, #26
 8006af6:	e7f4      	b.n	8006ae2 <_printf_float+0x40e>
 8006af8:	2301      	movs	r3, #1
 8006afa:	4642      	mov	r2, r8
 8006afc:	e7e1      	b.n	8006ac2 <_printf_float+0x3ee>
 8006afe:	2301      	movs	r3, #1
 8006b00:	464a      	mov	r2, r9
 8006b02:	4631      	mov	r1, r6
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b8      	blx	r7
 8006b08:	3001      	adds	r0, #1
 8006b0a:	f43f ae3e 	beq.w	800678a <_printf_float+0xb6>
 8006b0e:	f108 0801 	add.w	r8, r8, #1
 8006b12:	68e3      	ldr	r3, [r4, #12]
 8006b14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b16:	1a5b      	subs	r3, r3, r1
 8006b18:	4543      	cmp	r3, r8
 8006b1a:	dcf0      	bgt.n	8006afe <_printf_float+0x42a>
 8006b1c:	e6fc      	b.n	8006918 <_printf_float+0x244>
 8006b1e:	f04f 0800 	mov.w	r8, #0
 8006b22:	f104 0919 	add.w	r9, r4, #25
 8006b26:	e7f4      	b.n	8006b12 <_printf_float+0x43e>

08006b28 <_printf_common>:
 8006b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b2c:	4616      	mov	r6, r2
 8006b2e:	4698      	mov	r8, r3
 8006b30:	688a      	ldr	r2, [r1, #8]
 8006b32:	690b      	ldr	r3, [r1, #16]
 8006b34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	bfb8      	it	lt
 8006b3c:	4613      	movlt	r3, r2
 8006b3e:	6033      	str	r3, [r6, #0]
 8006b40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b44:	4607      	mov	r7, r0
 8006b46:	460c      	mov	r4, r1
 8006b48:	b10a      	cbz	r2, 8006b4e <_printf_common+0x26>
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	6033      	str	r3, [r6, #0]
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	0699      	lsls	r1, r3, #26
 8006b52:	bf42      	ittt	mi
 8006b54:	6833      	ldrmi	r3, [r6, #0]
 8006b56:	3302      	addmi	r3, #2
 8006b58:	6033      	strmi	r3, [r6, #0]
 8006b5a:	6825      	ldr	r5, [r4, #0]
 8006b5c:	f015 0506 	ands.w	r5, r5, #6
 8006b60:	d106      	bne.n	8006b70 <_printf_common+0x48>
 8006b62:	f104 0a19 	add.w	sl, r4, #25
 8006b66:	68e3      	ldr	r3, [r4, #12]
 8006b68:	6832      	ldr	r2, [r6, #0]
 8006b6a:	1a9b      	subs	r3, r3, r2
 8006b6c:	42ab      	cmp	r3, r5
 8006b6e:	dc26      	bgt.n	8006bbe <_printf_common+0x96>
 8006b70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b74:	6822      	ldr	r2, [r4, #0]
 8006b76:	3b00      	subs	r3, #0
 8006b78:	bf18      	it	ne
 8006b7a:	2301      	movne	r3, #1
 8006b7c:	0692      	lsls	r2, r2, #26
 8006b7e:	d42b      	bmi.n	8006bd8 <_printf_common+0xb0>
 8006b80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b84:	4641      	mov	r1, r8
 8006b86:	4638      	mov	r0, r7
 8006b88:	47c8      	blx	r9
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d01e      	beq.n	8006bcc <_printf_common+0xa4>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	6922      	ldr	r2, [r4, #16]
 8006b92:	f003 0306 	and.w	r3, r3, #6
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	bf02      	ittt	eq
 8006b9a:	68e5      	ldreq	r5, [r4, #12]
 8006b9c:	6833      	ldreq	r3, [r6, #0]
 8006b9e:	1aed      	subeq	r5, r5, r3
 8006ba0:	68a3      	ldr	r3, [r4, #8]
 8006ba2:	bf0c      	ite	eq
 8006ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ba8:	2500      	movne	r5, #0
 8006baa:	4293      	cmp	r3, r2
 8006bac:	bfc4      	itt	gt
 8006bae:	1a9b      	subgt	r3, r3, r2
 8006bb0:	18ed      	addgt	r5, r5, r3
 8006bb2:	2600      	movs	r6, #0
 8006bb4:	341a      	adds	r4, #26
 8006bb6:	42b5      	cmp	r5, r6
 8006bb8:	d11a      	bne.n	8006bf0 <_printf_common+0xc8>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	e008      	b.n	8006bd0 <_printf_common+0xa8>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4652      	mov	r2, sl
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	47c8      	blx	r9
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d103      	bne.n	8006bd4 <_printf_common+0xac>
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd4:	3501      	adds	r5, #1
 8006bd6:	e7c6      	b.n	8006b66 <_printf_common+0x3e>
 8006bd8:	18e1      	adds	r1, r4, r3
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	2030      	movs	r0, #48	@ 0x30
 8006bde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006be2:	4422      	add	r2, r4
 8006be4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006be8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bec:	3302      	adds	r3, #2
 8006bee:	e7c7      	b.n	8006b80 <_printf_common+0x58>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	4641      	mov	r1, r8
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	47c8      	blx	r9
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d0e6      	beq.n	8006bcc <_printf_common+0xa4>
 8006bfe:	3601      	adds	r6, #1
 8006c00:	e7d9      	b.n	8006bb6 <_printf_common+0x8e>
	...

08006c04 <_printf_i>:
 8006c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c08:	7e0f      	ldrb	r7, [r1, #24]
 8006c0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c0c:	2f78      	cmp	r7, #120	@ 0x78
 8006c0e:	4691      	mov	r9, r2
 8006c10:	4680      	mov	r8, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	469a      	mov	sl, r3
 8006c16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c1a:	d807      	bhi.n	8006c2c <_printf_i+0x28>
 8006c1c:	2f62      	cmp	r7, #98	@ 0x62
 8006c1e:	d80a      	bhi.n	8006c36 <_printf_i+0x32>
 8006c20:	2f00      	cmp	r7, #0
 8006c22:	f000 80d1 	beq.w	8006dc8 <_printf_i+0x1c4>
 8006c26:	2f58      	cmp	r7, #88	@ 0x58
 8006c28:	f000 80b8 	beq.w	8006d9c <_printf_i+0x198>
 8006c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c34:	e03a      	b.n	8006cac <_printf_i+0xa8>
 8006c36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c3a:	2b15      	cmp	r3, #21
 8006c3c:	d8f6      	bhi.n	8006c2c <_printf_i+0x28>
 8006c3e:	a101      	add	r1, pc, #4	@ (adr r1, 8006c44 <_printf_i+0x40>)
 8006c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c44:	08006c9d 	.word	0x08006c9d
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006c2d 	.word	0x08006c2d
 8006c50:	08006c2d 	.word	0x08006c2d
 8006c54:	08006c2d 	.word	0x08006c2d
 8006c58:	08006c2d 	.word	0x08006c2d
 8006c5c:	08006cb1 	.word	0x08006cb1
 8006c60:	08006c2d 	.word	0x08006c2d
 8006c64:	08006c2d 	.word	0x08006c2d
 8006c68:	08006c2d 	.word	0x08006c2d
 8006c6c:	08006c2d 	.word	0x08006c2d
 8006c70:	08006daf 	.word	0x08006daf
 8006c74:	08006cdb 	.word	0x08006cdb
 8006c78:	08006d69 	.word	0x08006d69
 8006c7c:	08006c2d 	.word	0x08006c2d
 8006c80:	08006c2d 	.word	0x08006c2d
 8006c84:	08006dd1 	.word	0x08006dd1
 8006c88:	08006c2d 	.word	0x08006c2d
 8006c8c:	08006cdb 	.word	0x08006cdb
 8006c90:	08006c2d 	.word	0x08006c2d
 8006c94:	08006c2d 	.word	0x08006c2d
 8006c98:	08006d71 	.word	0x08006d71
 8006c9c:	6833      	ldr	r3, [r6, #0]
 8006c9e:	1d1a      	adds	r2, r3, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6032      	str	r2, [r6, #0]
 8006ca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cac:	2301      	movs	r3, #1
 8006cae:	e09c      	b.n	8006dea <_printf_i+0x1e6>
 8006cb0:	6833      	ldr	r3, [r6, #0]
 8006cb2:	6820      	ldr	r0, [r4, #0]
 8006cb4:	1d19      	adds	r1, r3, #4
 8006cb6:	6031      	str	r1, [r6, #0]
 8006cb8:	0606      	lsls	r6, r0, #24
 8006cba:	d501      	bpl.n	8006cc0 <_printf_i+0xbc>
 8006cbc:	681d      	ldr	r5, [r3, #0]
 8006cbe:	e003      	b.n	8006cc8 <_printf_i+0xc4>
 8006cc0:	0645      	lsls	r5, r0, #25
 8006cc2:	d5fb      	bpl.n	8006cbc <_printf_i+0xb8>
 8006cc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cc8:	2d00      	cmp	r5, #0
 8006cca:	da03      	bge.n	8006cd4 <_printf_i+0xd0>
 8006ccc:	232d      	movs	r3, #45	@ 0x2d
 8006cce:	426d      	negs	r5, r5
 8006cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cd4:	4858      	ldr	r0, [pc, #352]	@ (8006e38 <_printf_i+0x234>)
 8006cd6:	230a      	movs	r3, #10
 8006cd8:	e011      	b.n	8006cfe <_printf_i+0xfa>
 8006cda:	6821      	ldr	r1, [r4, #0]
 8006cdc:	6833      	ldr	r3, [r6, #0]
 8006cde:	0608      	lsls	r0, r1, #24
 8006ce0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ce4:	d402      	bmi.n	8006cec <_printf_i+0xe8>
 8006ce6:	0649      	lsls	r1, r1, #25
 8006ce8:	bf48      	it	mi
 8006cea:	b2ad      	uxthmi	r5, r5
 8006cec:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cee:	4852      	ldr	r0, [pc, #328]	@ (8006e38 <_printf_i+0x234>)
 8006cf0:	6033      	str	r3, [r6, #0]
 8006cf2:	bf14      	ite	ne
 8006cf4:	230a      	movne	r3, #10
 8006cf6:	2308      	moveq	r3, #8
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cfe:	6866      	ldr	r6, [r4, #4]
 8006d00:	60a6      	str	r6, [r4, #8]
 8006d02:	2e00      	cmp	r6, #0
 8006d04:	db05      	blt.n	8006d12 <_printf_i+0x10e>
 8006d06:	6821      	ldr	r1, [r4, #0]
 8006d08:	432e      	orrs	r6, r5
 8006d0a:	f021 0104 	bic.w	r1, r1, #4
 8006d0e:	6021      	str	r1, [r4, #0]
 8006d10:	d04b      	beq.n	8006daa <_printf_i+0x1a6>
 8006d12:	4616      	mov	r6, r2
 8006d14:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d18:	fb03 5711 	mls	r7, r3, r1, r5
 8006d1c:	5dc7      	ldrb	r7, [r0, r7]
 8006d1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d22:	462f      	mov	r7, r5
 8006d24:	42bb      	cmp	r3, r7
 8006d26:	460d      	mov	r5, r1
 8006d28:	d9f4      	bls.n	8006d14 <_printf_i+0x110>
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d10b      	bne.n	8006d46 <_printf_i+0x142>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	07df      	lsls	r7, r3, #31
 8006d32:	d508      	bpl.n	8006d46 <_printf_i+0x142>
 8006d34:	6923      	ldr	r3, [r4, #16]
 8006d36:	6861      	ldr	r1, [r4, #4]
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	bfde      	ittt	le
 8006d3c:	2330      	movle	r3, #48	@ 0x30
 8006d3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d46:	1b92      	subs	r2, r2, r6
 8006d48:	6122      	str	r2, [r4, #16]
 8006d4a:	f8cd a000 	str.w	sl, [sp]
 8006d4e:	464b      	mov	r3, r9
 8006d50:	aa03      	add	r2, sp, #12
 8006d52:	4621      	mov	r1, r4
 8006d54:	4640      	mov	r0, r8
 8006d56:	f7ff fee7 	bl	8006b28 <_printf_common>
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	d14a      	bne.n	8006df4 <_printf_i+0x1f0>
 8006d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d62:	b004      	add	sp, #16
 8006d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	f043 0320 	orr.w	r3, r3, #32
 8006d6e:	6023      	str	r3, [r4, #0]
 8006d70:	4832      	ldr	r0, [pc, #200]	@ (8006e3c <_printf_i+0x238>)
 8006d72:	2778      	movs	r7, #120	@ 0x78
 8006d74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	6831      	ldr	r1, [r6, #0]
 8006d7c:	061f      	lsls	r7, r3, #24
 8006d7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d82:	d402      	bmi.n	8006d8a <_printf_i+0x186>
 8006d84:	065f      	lsls	r7, r3, #25
 8006d86:	bf48      	it	mi
 8006d88:	b2ad      	uxthmi	r5, r5
 8006d8a:	6031      	str	r1, [r6, #0]
 8006d8c:	07d9      	lsls	r1, r3, #31
 8006d8e:	bf44      	itt	mi
 8006d90:	f043 0320 	orrmi.w	r3, r3, #32
 8006d94:	6023      	strmi	r3, [r4, #0]
 8006d96:	b11d      	cbz	r5, 8006da0 <_printf_i+0x19c>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	e7ad      	b.n	8006cf8 <_printf_i+0xf4>
 8006d9c:	4826      	ldr	r0, [pc, #152]	@ (8006e38 <_printf_i+0x234>)
 8006d9e:	e7e9      	b.n	8006d74 <_printf_i+0x170>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	f023 0320 	bic.w	r3, r3, #32
 8006da6:	6023      	str	r3, [r4, #0]
 8006da8:	e7f6      	b.n	8006d98 <_printf_i+0x194>
 8006daa:	4616      	mov	r6, r2
 8006dac:	e7bd      	b.n	8006d2a <_printf_i+0x126>
 8006dae:	6833      	ldr	r3, [r6, #0]
 8006db0:	6825      	ldr	r5, [r4, #0]
 8006db2:	6961      	ldr	r1, [r4, #20]
 8006db4:	1d18      	adds	r0, r3, #4
 8006db6:	6030      	str	r0, [r6, #0]
 8006db8:	062e      	lsls	r6, r5, #24
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	d501      	bpl.n	8006dc2 <_printf_i+0x1be>
 8006dbe:	6019      	str	r1, [r3, #0]
 8006dc0:	e002      	b.n	8006dc8 <_printf_i+0x1c4>
 8006dc2:	0668      	lsls	r0, r5, #25
 8006dc4:	d5fb      	bpl.n	8006dbe <_printf_i+0x1ba>
 8006dc6:	8019      	strh	r1, [r3, #0]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	6123      	str	r3, [r4, #16]
 8006dcc:	4616      	mov	r6, r2
 8006dce:	e7bc      	b.n	8006d4a <_printf_i+0x146>
 8006dd0:	6833      	ldr	r3, [r6, #0]
 8006dd2:	1d1a      	adds	r2, r3, #4
 8006dd4:	6032      	str	r2, [r6, #0]
 8006dd6:	681e      	ldr	r6, [r3, #0]
 8006dd8:	6862      	ldr	r2, [r4, #4]
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f7f9 f9ff 	bl	80001e0 <memchr>
 8006de2:	b108      	cbz	r0, 8006de8 <_printf_i+0x1e4>
 8006de4:	1b80      	subs	r0, r0, r6
 8006de6:	6060      	str	r0, [r4, #4]
 8006de8:	6863      	ldr	r3, [r4, #4]
 8006dea:	6123      	str	r3, [r4, #16]
 8006dec:	2300      	movs	r3, #0
 8006dee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006df2:	e7aa      	b.n	8006d4a <_printf_i+0x146>
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	4632      	mov	r2, r6
 8006df8:	4649      	mov	r1, r9
 8006dfa:	4640      	mov	r0, r8
 8006dfc:	47d0      	blx	sl
 8006dfe:	3001      	adds	r0, #1
 8006e00:	d0ad      	beq.n	8006d5e <_printf_i+0x15a>
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	079b      	lsls	r3, r3, #30
 8006e06:	d413      	bmi.n	8006e30 <_printf_i+0x22c>
 8006e08:	68e0      	ldr	r0, [r4, #12]
 8006e0a:	9b03      	ldr	r3, [sp, #12]
 8006e0c:	4298      	cmp	r0, r3
 8006e0e:	bfb8      	it	lt
 8006e10:	4618      	movlt	r0, r3
 8006e12:	e7a6      	b.n	8006d62 <_printf_i+0x15e>
 8006e14:	2301      	movs	r3, #1
 8006e16:	4632      	mov	r2, r6
 8006e18:	4649      	mov	r1, r9
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	47d0      	blx	sl
 8006e1e:	3001      	adds	r0, #1
 8006e20:	d09d      	beq.n	8006d5e <_printf_i+0x15a>
 8006e22:	3501      	adds	r5, #1
 8006e24:	68e3      	ldr	r3, [r4, #12]
 8006e26:	9903      	ldr	r1, [sp, #12]
 8006e28:	1a5b      	subs	r3, r3, r1
 8006e2a:	42ab      	cmp	r3, r5
 8006e2c:	dcf2      	bgt.n	8006e14 <_printf_i+0x210>
 8006e2e:	e7eb      	b.n	8006e08 <_printf_i+0x204>
 8006e30:	2500      	movs	r5, #0
 8006e32:	f104 0619 	add.w	r6, r4, #25
 8006e36:	e7f5      	b.n	8006e24 <_printf_i+0x220>
 8006e38:	0800973a 	.word	0x0800973a
 8006e3c:	0800974b 	.word	0x0800974b

08006e40 <std>:
 8006e40:	2300      	movs	r3, #0
 8006e42:	b510      	push	{r4, lr}
 8006e44:	4604      	mov	r4, r0
 8006e46:	e9c0 3300 	strd	r3, r3, [r0]
 8006e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e4e:	6083      	str	r3, [r0, #8]
 8006e50:	8181      	strh	r1, [r0, #12]
 8006e52:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e54:	81c2      	strh	r2, [r0, #14]
 8006e56:	6183      	str	r3, [r0, #24]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	2208      	movs	r2, #8
 8006e5c:	305c      	adds	r0, #92	@ 0x5c
 8006e5e:	f000 f916 	bl	800708e <memset>
 8006e62:	4b0d      	ldr	r3, [pc, #52]	@ (8006e98 <std+0x58>)
 8006e64:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e66:	4b0d      	ldr	r3, [pc, #52]	@ (8006e9c <std+0x5c>)
 8006e68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea0 <std+0x60>)
 8006e6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <std+0x64>)
 8006e70:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea8 <std+0x68>)
 8006e74:	6224      	str	r4, [r4, #32]
 8006e76:	429c      	cmp	r4, r3
 8006e78:	d006      	beq.n	8006e88 <std+0x48>
 8006e7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e7e:	4294      	cmp	r4, r2
 8006e80:	d002      	beq.n	8006e88 <std+0x48>
 8006e82:	33d0      	adds	r3, #208	@ 0xd0
 8006e84:	429c      	cmp	r4, r3
 8006e86:	d105      	bne.n	8006e94 <std+0x54>
 8006e88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e90:	f000 b98a 	b.w	80071a8 <__retarget_lock_init_recursive>
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	bf00      	nop
 8006e98:	08007009 	.word	0x08007009
 8006e9c:	0800702b 	.word	0x0800702b
 8006ea0:	08007063 	.word	0x08007063
 8006ea4:	08007087 	.word	0x08007087
 8006ea8:	20000aa4 	.word	0x20000aa4

08006eac <stdio_exit_handler>:
 8006eac:	4a02      	ldr	r2, [pc, #8]	@ (8006eb8 <stdio_exit_handler+0xc>)
 8006eae:	4903      	ldr	r1, [pc, #12]	@ (8006ebc <stdio_exit_handler+0x10>)
 8006eb0:	4803      	ldr	r0, [pc, #12]	@ (8006ec0 <stdio_exit_handler+0x14>)
 8006eb2:	f000 b869 	b.w	8006f88 <_fwalk_sglue>
 8006eb6:	bf00      	nop
 8006eb8:	200006a0 	.word	0x200006a0
 8006ebc:	080089d1 	.word	0x080089d1
 8006ec0:	200006b0 	.word	0x200006b0

08006ec4 <cleanup_stdio>:
 8006ec4:	6841      	ldr	r1, [r0, #4]
 8006ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef8 <cleanup_stdio+0x34>)
 8006ec8:	4299      	cmp	r1, r3
 8006eca:	b510      	push	{r4, lr}
 8006ecc:	4604      	mov	r4, r0
 8006ece:	d001      	beq.n	8006ed4 <cleanup_stdio+0x10>
 8006ed0:	f001 fd7e 	bl	80089d0 <_fflush_r>
 8006ed4:	68a1      	ldr	r1, [r4, #8]
 8006ed6:	4b09      	ldr	r3, [pc, #36]	@ (8006efc <cleanup_stdio+0x38>)
 8006ed8:	4299      	cmp	r1, r3
 8006eda:	d002      	beq.n	8006ee2 <cleanup_stdio+0x1e>
 8006edc:	4620      	mov	r0, r4
 8006ede:	f001 fd77 	bl	80089d0 <_fflush_r>
 8006ee2:	68e1      	ldr	r1, [r4, #12]
 8006ee4:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <cleanup_stdio+0x3c>)
 8006ee6:	4299      	cmp	r1, r3
 8006ee8:	d004      	beq.n	8006ef4 <cleanup_stdio+0x30>
 8006eea:	4620      	mov	r0, r4
 8006eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef0:	f001 bd6e 	b.w	80089d0 <_fflush_r>
 8006ef4:	bd10      	pop	{r4, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000aa4 	.word	0x20000aa4
 8006efc:	20000b0c 	.word	0x20000b0c
 8006f00:	20000b74 	.word	0x20000b74

08006f04 <global_stdio_init.part.0>:
 8006f04:	b510      	push	{r4, lr}
 8006f06:	4b0b      	ldr	r3, [pc, #44]	@ (8006f34 <global_stdio_init.part.0+0x30>)
 8006f08:	4c0b      	ldr	r4, [pc, #44]	@ (8006f38 <global_stdio_init.part.0+0x34>)
 8006f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f3c <global_stdio_init.part.0+0x38>)
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	2200      	movs	r2, #0
 8006f12:	2104      	movs	r1, #4
 8006f14:	f7ff ff94 	bl	8006e40 <std>
 8006f18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	2109      	movs	r1, #9
 8006f20:	f7ff ff8e 	bl	8006e40 <std>
 8006f24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f28:	2202      	movs	r2, #2
 8006f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f2e:	2112      	movs	r1, #18
 8006f30:	f7ff bf86 	b.w	8006e40 <std>
 8006f34:	20000bdc 	.word	0x20000bdc
 8006f38:	20000aa4 	.word	0x20000aa4
 8006f3c:	08006ead 	.word	0x08006ead

08006f40 <__sfp_lock_acquire>:
 8006f40:	4801      	ldr	r0, [pc, #4]	@ (8006f48 <__sfp_lock_acquire+0x8>)
 8006f42:	f000 b932 	b.w	80071aa <__retarget_lock_acquire_recursive>
 8006f46:	bf00      	nop
 8006f48:	20000be5 	.word	0x20000be5

08006f4c <__sfp_lock_release>:
 8006f4c:	4801      	ldr	r0, [pc, #4]	@ (8006f54 <__sfp_lock_release+0x8>)
 8006f4e:	f000 b92d 	b.w	80071ac <__retarget_lock_release_recursive>
 8006f52:	bf00      	nop
 8006f54:	20000be5 	.word	0x20000be5

08006f58 <__sinit>:
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	f7ff fff0 	bl	8006f40 <__sfp_lock_acquire>
 8006f60:	6a23      	ldr	r3, [r4, #32]
 8006f62:	b11b      	cbz	r3, 8006f6c <__sinit+0x14>
 8006f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f68:	f7ff bff0 	b.w	8006f4c <__sfp_lock_release>
 8006f6c:	4b04      	ldr	r3, [pc, #16]	@ (8006f80 <__sinit+0x28>)
 8006f6e:	6223      	str	r3, [r4, #32]
 8006f70:	4b04      	ldr	r3, [pc, #16]	@ (8006f84 <__sinit+0x2c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1f5      	bne.n	8006f64 <__sinit+0xc>
 8006f78:	f7ff ffc4 	bl	8006f04 <global_stdio_init.part.0>
 8006f7c:	e7f2      	b.n	8006f64 <__sinit+0xc>
 8006f7e:	bf00      	nop
 8006f80:	08006ec5 	.word	0x08006ec5
 8006f84:	20000bdc 	.word	0x20000bdc

08006f88 <_fwalk_sglue>:
 8006f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	4688      	mov	r8, r1
 8006f90:	4614      	mov	r4, r2
 8006f92:	2600      	movs	r6, #0
 8006f94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f98:	f1b9 0901 	subs.w	r9, r9, #1
 8006f9c:	d505      	bpl.n	8006faa <_fwalk_sglue+0x22>
 8006f9e:	6824      	ldr	r4, [r4, #0]
 8006fa0:	2c00      	cmp	r4, #0
 8006fa2:	d1f7      	bne.n	8006f94 <_fwalk_sglue+0xc>
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006faa:	89ab      	ldrh	r3, [r5, #12]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d907      	bls.n	8006fc0 <_fwalk_sglue+0x38>
 8006fb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	d003      	beq.n	8006fc0 <_fwalk_sglue+0x38>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4638      	mov	r0, r7
 8006fbc:	47c0      	blx	r8
 8006fbe:	4306      	orrs	r6, r0
 8006fc0:	3568      	adds	r5, #104	@ 0x68
 8006fc2:	e7e9      	b.n	8006f98 <_fwalk_sglue+0x10>

08006fc4 <siprintf>:
 8006fc4:	b40e      	push	{r1, r2, r3}
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	b09d      	sub	sp, #116	@ 0x74
 8006fca:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006fcc:	9002      	str	r0, [sp, #8]
 8006fce:	9006      	str	r0, [sp, #24]
 8006fd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006fd4:	480a      	ldr	r0, [pc, #40]	@ (8007000 <siprintf+0x3c>)
 8006fd6:	9107      	str	r1, [sp, #28]
 8006fd8:	9104      	str	r1, [sp, #16]
 8006fda:	490a      	ldr	r1, [pc, #40]	@ (8007004 <siprintf+0x40>)
 8006fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe0:	9105      	str	r1, [sp, #20]
 8006fe2:	2400      	movs	r4, #0
 8006fe4:	a902      	add	r1, sp, #8
 8006fe6:	6800      	ldr	r0, [r0, #0]
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006fec:	f001 fb70 	bl	80086d0 <_svfiprintf_r>
 8006ff0:	9b02      	ldr	r3, [sp, #8]
 8006ff2:	701c      	strb	r4, [r3, #0]
 8006ff4:	b01d      	add	sp, #116	@ 0x74
 8006ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ffa:	b003      	add	sp, #12
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	200006ac 	.word	0x200006ac
 8007004:	ffff0208 	.word	0xffff0208

08007008 <__sread>:
 8007008:	b510      	push	{r4, lr}
 800700a:	460c      	mov	r4, r1
 800700c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007010:	f000 f86c 	bl	80070ec <_read_r>
 8007014:	2800      	cmp	r0, #0
 8007016:	bfab      	itete	ge
 8007018:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800701a:	89a3      	ldrhlt	r3, [r4, #12]
 800701c:	181b      	addge	r3, r3, r0
 800701e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007022:	bfac      	ite	ge
 8007024:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007026:	81a3      	strhlt	r3, [r4, #12]
 8007028:	bd10      	pop	{r4, pc}

0800702a <__swrite>:
 800702a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702e:	461f      	mov	r7, r3
 8007030:	898b      	ldrh	r3, [r1, #12]
 8007032:	05db      	lsls	r3, r3, #23
 8007034:	4605      	mov	r5, r0
 8007036:	460c      	mov	r4, r1
 8007038:	4616      	mov	r6, r2
 800703a:	d505      	bpl.n	8007048 <__swrite+0x1e>
 800703c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007040:	2302      	movs	r3, #2
 8007042:	2200      	movs	r2, #0
 8007044:	f000 f840 	bl	80070c8 <_lseek_r>
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800704e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007052:	81a3      	strh	r3, [r4, #12]
 8007054:	4632      	mov	r2, r6
 8007056:	463b      	mov	r3, r7
 8007058:	4628      	mov	r0, r5
 800705a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800705e:	f000 b867 	b.w	8007130 <_write_r>

08007062 <__sseek>:
 8007062:	b510      	push	{r4, lr}
 8007064:	460c      	mov	r4, r1
 8007066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706a:	f000 f82d 	bl	80070c8 <_lseek_r>
 800706e:	1c43      	adds	r3, r0, #1
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	bf15      	itete	ne
 8007074:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007076:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800707a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800707e:	81a3      	strheq	r3, [r4, #12]
 8007080:	bf18      	it	ne
 8007082:	81a3      	strhne	r3, [r4, #12]
 8007084:	bd10      	pop	{r4, pc}

08007086 <__sclose>:
 8007086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800708a:	f000 b80d 	b.w	80070a8 <_close_r>

0800708e <memset>:
 800708e:	4402      	add	r2, r0
 8007090:	4603      	mov	r3, r0
 8007092:	4293      	cmp	r3, r2
 8007094:	d100      	bne.n	8007098 <memset+0xa>
 8007096:	4770      	bx	lr
 8007098:	f803 1b01 	strb.w	r1, [r3], #1
 800709c:	e7f9      	b.n	8007092 <memset+0x4>
	...

080070a0 <_localeconv_r>:
 80070a0:	4800      	ldr	r0, [pc, #0]	@ (80070a4 <_localeconv_r+0x4>)
 80070a2:	4770      	bx	lr
 80070a4:	200007ec 	.word	0x200007ec

080070a8 <_close_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d06      	ldr	r5, [pc, #24]	@ (80070c4 <_close_r+0x1c>)
 80070ac:	2300      	movs	r3, #0
 80070ae:	4604      	mov	r4, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	f001 ffd6 	bl	8009064 <_close>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_close_r+0x1a>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_close_r+0x1a>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20000be0 	.word	0x20000be0

080070c8 <_lseek_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d07      	ldr	r5, [pc, #28]	@ (80070e8 <_lseek_r+0x20>)
 80070cc:	4604      	mov	r4, r0
 80070ce:	4608      	mov	r0, r1
 80070d0:	4611      	mov	r1, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	602a      	str	r2, [r5, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	f001 ffec 	bl	80090b4 <_lseek>
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	d102      	bne.n	80070e6 <_lseek_r+0x1e>
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	b103      	cbz	r3, 80070e6 <_lseek_r+0x1e>
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	bd38      	pop	{r3, r4, r5, pc}
 80070e8:	20000be0 	.word	0x20000be0

080070ec <_read_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4d07      	ldr	r5, [pc, #28]	@ (800710c <_read_r+0x20>)
 80070f0:	4604      	mov	r4, r0
 80070f2:	4608      	mov	r0, r1
 80070f4:	4611      	mov	r1, r2
 80070f6:	2200      	movs	r2, #0
 80070f8:	602a      	str	r2, [r5, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f001 ffe2 	bl	80090c4 <_read>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d102      	bne.n	800710a <_read_r+0x1e>
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	b103      	cbz	r3, 800710a <_read_r+0x1e>
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	20000be0 	.word	0x20000be0

08007110 <_sbrk_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4d06      	ldr	r5, [pc, #24]	@ (800712c <_sbrk_r+0x1c>)
 8007114:	2300      	movs	r3, #0
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	602b      	str	r3, [r5, #0]
 800711c:	f7fa fbc0 	bl	80018a0 <_sbrk>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_sbrk_r+0x1a>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_sbrk_r+0x1a>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	20000be0 	.word	0x20000be0

08007130 <_write_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4d07      	ldr	r5, [pc, #28]	@ (8007150 <_write_r+0x20>)
 8007134:	4604      	mov	r4, r0
 8007136:	4608      	mov	r0, r1
 8007138:	4611      	mov	r1, r2
 800713a:	2200      	movs	r2, #0
 800713c:	602a      	str	r2, [r5, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	f001 ffc8 	bl	80090d4 <_write>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_write_r+0x1e>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	b103      	cbz	r3, 800714e <_write_r+0x1e>
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	20000be0 	.word	0x20000be0

08007154 <__errno>:
 8007154:	4b01      	ldr	r3, [pc, #4]	@ (800715c <__errno+0x8>)
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	200006ac 	.word	0x200006ac

08007160 <__libc_init_array>:
 8007160:	b570      	push	{r4, r5, r6, lr}
 8007162:	4d0d      	ldr	r5, [pc, #52]	@ (8007198 <__libc_init_array+0x38>)
 8007164:	4c0d      	ldr	r4, [pc, #52]	@ (800719c <__libc_init_array+0x3c>)
 8007166:	1b64      	subs	r4, r4, r5
 8007168:	10a4      	asrs	r4, r4, #2
 800716a:	2600      	movs	r6, #0
 800716c:	42a6      	cmp	r6, r4
 800716e:	d109      	bne.n	8007184 <__libc_init_array+0x24>
 8007170:	4d0b      	ldr	r5, [pc, #44]	@ (80071a0 <__libc_init_array+0x40>)
 8007172:	4c0c      	ldr	r4, [pc, #48]	@ (80071a4 <__libc_init_array+0x44>)
 8007174:	f001 ffb8 	bl	80090e8 <_init>
 8007178:	1b64      	subs	r4, r4, r5
 800717a:	10a4      	asrs	r4, r4, #2
 800717c:	2600      	movs	r6, #0
 800717e:	42a6      	cmp	r6, r4
 8007180:	d105      	bne.n	800718e <__libc_init_array+0x2e>
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	f855 3b04 	ldr.w	r3, [r5], #4
 8007188:	4798      	blx	r3
 800718a:	3601      	adds	r6, #1
 800718c:	e7ee      	b.n	800716c <__libc_init_array+0xc>
 800718e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007192:	4798      	blx	r3
 8007194:	3601      	adds	r6, #1
 8007196:	e7f2      	b.n	800717e <__libc_init_array+0x1e>
 8007198:	08009aa4 	.word	0x08009aa4
 800719c:	08009aa4 	.word	0x08009aa4
 80071a0:	08009aa4 	.word	0x08009aa4
 80071a4:	08009aa8 	.word	0x08009aa8

080071a8 <__retarget_lock_init_recursive>:
 80071a8:	4770      	bx	lr

080071aa <__retarget_lock_acquire_recursive>:
 80071aa:	4770      	bx	lr

080071ac <__retarget_lock_release_recursive>:
 80071ac:	4770      	bx	lr

080071ae <memcpy>:
 80071ae:	440a      	add	r2, r1
 80071b0:	4291      	cmp	r1, r2
 80071b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80071b6:	d100      	bne.n	80071ba <memcpy+0xc>
 80071b8:	4770      	bx	lr
 80071ba:	b510      	push	{r4, lr}
 80071bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071c4:	4291      	cmp	r1, r2
 80071c6:	d1f9      	bne.n	80071bc <memcpy+0xe>
 80071c8:	bd10      	pop	{r4, pc}

080071ca <quorem>:
 80071ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ce:	6903      	ldr	r3, [r0, #16]
 80071d0:	690c      	ldr	r4, [r1, #16]
 80071d2:	42a3      	cmp	r3, r4
 80071d4:	4607      	mov	r7, r0
 80071d6:	db7e      	blt.n	80072d6 <quorem+0x10c>
 80071d8:	3c01      	subs	r4, #1
 80071da:	f101 0814 	add.w	r8, r1, #20
 80071de:	00a3      	lsls	r3, r4, #2
 80071e0:	f100 0514 	add.w	r5, r0, #20
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071ea:	9301      	str	r3, [sp, #4]
 80071ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071f4:	3301      	adds	r3, #1
 80071f6:	429a      	cmp	r2, r3
 80071f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007200:	d32e      	bcc.n	8007260 <quorem+0x96>
 8007202:	f04f 0a00 	mov.w	sl, #0
 8007206:	46c4      	mov	ip, r8
 8007208:	46ae      	mov	lr, r5
 800720a:	46d3      	mov	fp, sl
 800720c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007210:	b298      	uxth	r0, r3
 8007212:	fb06 a000 	mla	r0, r6, r0, sl
 8007216:	0c02      	lsrs	r2, r0, #16
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	fb06 2303 	mla	r3, r6, r3, r2
 800721e:	f8de 2000 	ldr.w	r2, [lr]
 8007222:	b280      	uxth	r0, r0
 8007224:	b292      	uxth	r2, r2
 8007226:	1a12      	subs	r2, r2, r0
 8007228:	445a      	add	r2, fp
 800722a:	f8de 0000 	ldr.w	r0, [lr]
 800722e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007232:	b29b      	uxth	r3, r3
 8007234:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007238:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800723c:	b292      	uxth	r2, r2
 800723e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007242:	45e1      	cmp	r9, ip
 8007244:	f84e 2b04 	str.w	r2, [lr], #4
 8007248:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800724c:	d2de      	bcs.n	800720c <quorem+0x42>
 800724e:	9b00      	ldr	r3, [sp, #0]
 8007250:	58eb      	ldr	r3, [r5, r3]
 8007252:	b92b      	cbnz	r3, 8007260 <quorem+0x96>
 8007254:	9b01      	ldr	r3, [sp, #4]
 8007256:	3b04      	subs	r3, #4
 8007258:	429d      	cmp	r5, r3
 800725a:	461a      	mov	r2, r3
 800725c:	d32f      	bcc.n	80072be <quorem+0xf4>
 800725e:	613c      	str	r4, [r7, #16]
 8007260:	4638      	mov	r0, r7
 8007262:	f001 f8c9 	bl	80083f8 <__mcmp>
 8007266:	2800      	cmp	r0, #0
 8007268:	db25      	blt.n	80072b6 <quorem+0xec>
 800726a:	4629      	mov	r1, r5
 800726c:	2000      	movs	r0, #0
 800726e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007272:	f8d1 c000 	ldr.w	ip, [r1]
 8007276:	fa1f fe82 	uxth.w	lr, r2
 800727a:	fa1f f38c 	uxth.w	r3, ip
 800727e:	eba3 030e 	sub.w	r3, r3, lr
 8007282:	4403      	add	r3, r0
 8007284:	0c12      	lsrs	r2, r2, #16
 8007286:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800728a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800728e:	b29b      	uxth	r3, r3
 8007290:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007294:	45c1      	cmp	r9, r8
 8007296:	f841 3b04 	str.w	r3, [r1], #4
 800729a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800729e:	d2e6      	bcs.n	800726e <quorem+0xa4>
 80072a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072a8:	b922      	cbnz	r2, 80072b4 <quorem+0xea>
 80072aa:	3b04      	subs	r3, #4
 80072ac:	429d      	cmp	r5, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	d30b      	bcc.n	80072ca <quorem+0x100>
 80072b2:	613c      	str	r4, [r7, #16]
 80072b4:	3601      	adds	r6, #1
 80072b6:	4630      	mov	r0, r6
 80072b8:	b003      	add	sp, #12
 80072ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072be:	6812      	ldr	r2, [r2, #0]
 80072c0:	3b04      	subs	r3, #4
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	d1cb      	bne.n	800725e <quorem+0x94>
 80072c6:	3c01      	subs	r4, #1
 80072c8:	e7c6      	b.n	8007258 <quorem+0x8e>
 80072ca:	6812      	ldr	r2, [r2, #0]
 80072cc:	3b04      	subs	r3, #4
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	d1ef      	bne.n	80072b2 <quorem+0xe8>
 80072d2:	3c01      	subs	r4, #1
 80072d4:	e7ea      	b.n	80072ac <quorem+0xe2>
 80072d6:	2000      	movs	r0, #0
 80072d8:	e7ee      	b.n	80072b8 <quorem+0xee>
 80072da:	0000      	movs	r0, r0
 80072dc:	0000      	movs	r0, r0
	...

080072e0 <_dtoa_r>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	69c7      	ldr	r7, [r0, #28]
 80072e6:	b097      	sub	sp, #92	@ 0x5c
 80072e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80072ec:	ec55 4b10 	vmov	r4, r5, d0
 80072f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80072f2:	9107      	str	r1, [sp, #28]
 80072f4:	4681      	mov	r9, r0
 80072f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80072f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80072fa:	b97f      	cbnz	r7, 800731c <_dtoa_r+0x3c>
 80072fc:	2010      	movs	r0, #16
 80072fe:	f7ff f865 	bl	80063cc <malloc>
 8007302:	4602      	mov	r2, r0
 8007304:	f8c9 001c 	str.w	r0, [r9, #28]
 8007308:	b920      	cbnz	r0, 8007314 <_dtoa_r+0x34>
 800730a:	4ba9      	ldr	r3, [pc, #676]	@ (80075b0 <_dtoa_r+0x2d0>)
 800730c:	21ef      	movs	r1, #239	@ 0xef
 800730e:	48a9      	ldr	r0, [pc, #676]	@ (80075b4 <_dtoa_r+0x2d4>)
 8007310:	f001 fba0 	bl	8008a54 <__assert_func>
 8007314:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007318:	6007      	str	r7, [r0, #0]
 800731a:	60c7      	str	r7, [r0, #12]
 800731c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007320:	6819      	ldr	r1, [r3, #0]
 8007322:	b159      	cbz	r1, 800733c <_dtoa_r+0x5c>
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	604a      	str	r2, [r1, #4]
 8007328:	2301      	movs	r3, #1
 800732a:	4093      	lsls	r3, r2
 800732c:	608b      	str	r3, [r1, #8]
 800732e:	4648      	mov	r0, r9
 8007330:	f000 fe30 	bl	8007f94 <_Bfree>
 8007334:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	1e2b      	subs	r3, r5, #0
 800733e:	bfb9      	ittee	lt
 8007340:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007344:	9305      	strlt	r3, [sp, #20]
 8007346:	2300      	movge	r3, #0
 8007348:	6033      	strge	r3, [r6, #0]
 800734a:	9f05      	ldr	r7, [sp, #20]
 800734c:	4b9a      	ldr	r3, [pc, #616]	@ (80075b8 <_dtoa_r+0x2d8>)
 800734e:	bfbc      	itt	lt
 8007350:	2201      	movlt	r2, #1
 8007352:	6032      	strlt	r2, [r6, #0]
 8007354:	43bb      	bics	r3, r7
 8007356:	d112      	bne.n	800737e <_dtoa_r+0x9e>
 8007358:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800735a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007364:	4323      	orrs	r3, r4
 8007366:	f000 855a 	beq.w	8007e1e <_dtoa_r+0xb3e>
 800736a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800736c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80075cc <_dtoa_r+0x2ec>
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 855c 	beq.w	8007e2e <_dtoa_r+0xb4e>
 8007376:	f10a 0303 	add.w	r3, sl, #3
 800737a:	f000 bd56 	b.w	8007e2a <_dtoa_r+0xb4a>
 800737e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007382:	2200      	movs	r2, #0
 8007384:	ec51 0b17 	vmov	r0, r1, d7
 8007388:	2300      	movs	r3, #0
 800738a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800738e:	f7f9 fba3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007392:	4680      	mov	r8, r0
 8007394:	b158      	cbz	r0, 80073ae <_dtoa_r+0xce>
 8007396:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007398:	2301      	movs	r3, #1
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800739e:	b113      	cbz	r3, 80073a6 <_dtoa_r+0xc6>
 80073a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80073a2:	4b86      	ldr	r3, [pc, #536]	@ (80075bc <_dtoa_r+0x2dc>)
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80075d0 <_dtoa_r+0x2f0>
 80073aa:	f000 bd40 	b.w	8007e2e <_dtoa_r+0xb4e>
 80073ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80073b2:	aa14      	add	r2, sp, #80	@ 0x50
 80073b4:	a915      	add	r1, sp, #84	@ 0x54
 80073b6:	4648      	mov	r0, r9
 80073b8:	f001 f8ce 	bl	8008558 <__d2b>
 80073bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80073c0:	9002      	str	r0, [sp, #8]
 80073c2:	2e00      	cmp	r6, #0
 80073c4:	d078      	beq.n	80074b8 <_dtoa_r+0x1d8>
 80073c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80073cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073e0:	4619      	mov	r1, r3
 80073e2:	2200      	movs	r2, #0
 80073e4:	4b76      	ldr	r3, [pc, #472]	@ (80075c0 <_dtoa_r+0x2e0>)
 80073e6:	f7f8 ff57 	bl	8000298 <__aeabi_dsub>
 80073ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8007598 <_dtoa_r+0x2b8>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f7f9 f90a 	bl	8000608 <__aeabi_dmul>
 80073f4:	a36a      	add	r3, pc, #424	@ (adr r3, 80075a0 <_dtoa_r+0x2c0>)
 80073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fa:	f7f8 ff4f 	bl	800029c <__adddf3>
 80073fe:	4604      	mov	r4, r0
 8007400:	4630      	mov	r0, r6
 8007402:	460d      	mov	r5, r1
 8007404:	f7f9 f896 	bl	8000534 <__aeabi_i2d>
 8007408:	a367      	add	r3, pc, #412	@ (adr r3, 80075a8 <_dtoa_r+0x2c8>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	f7f9 f8fb 	bl	8000608 <__aeabi_dmul>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	4620      	mov	r0, r4
 8007418:	4629      	mov	r1, r5
 800741a:	f7f8 ff3f 	bl	800029c <__adddf3>
 800741e:	4604      	mov	r4, r0
 8007420:	460d      	mov	r5, r1
 8007422:	f7f9 fba1 	bl	8000b68 <__aeabi_d2iz>
 8007426:	2200      	movs	r2, #0
 8007428:	4607      	mov	r7, r0
 800742a:	2300      	movs	r3, #0
 800742c:	4620      	mov	r0, r4
 800742e:	4629      	mov	r1, r5
 8007430:	f7f9 fb5c 	bl	8000aec <__aeabi_dcmplt>
 8007434:	b140      	cbz	r0, 8007448 <_dtoa_r+0x168>
 8007436:	4638      	mov	r0, r7
 8007438:	f7f9 f87c 	bl	8000534 <__aeabi_i2d>
 800743c:	4622      	mov	r2, r4
 800743e:	462b      	mov	r3, r5
 8007440:	f7f9 fb4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007444:	b900      	cbnz	r0, 8007448 <_dtoa_r+0x168>
 8007446:	3f01      	subs	r7, #1
 8007448:	2f16      	cmp	r7, #22
 800744a:	d852      	bhi.n	80074f2 <_dtoa_r+0x212>
 800744c:	4b5d      	ldr	r3, [pc, #372]	@ (80075c4 <_dtoa_r+0x2e4>)
 800744e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800745a:	f7f9 fb47 	bl	8000aec <__aeabi_dcmplt>
 800745e:	2800      	cmp	r0, #0
 8007460:	d049      	beq.n	80074f6 <_dtoa_r+0x216>
 8007462:	3f01      	subs	r7, #1
 8007464:	2300      	movs	r3, #0
 8007466:	9310      	str	r3, [sp, #64]	@ 0x40
 8007468:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800746a:	1b9b      	subs	r3, r3, r6
 800746c:	1e5a      	subs	r2, r3, #1
 800746e:	bf45      	ittet	mi
 8007470:	f1c3 0301 	rsbmi	r3, r3, #1
 8007474:	9300      	strmi	r3, [sp, #0]
 8007476:	2300      	movpl	r3, #0
 8007478:	2300      	movmi	r3, #0
 800747a:	9206      	str	r2, [sp, #24]
 800747c:	bf54      	ite	pl
 800747e:	9300      	strpl	r3, [sp, #0]
 8007480:	9306      	strmi	r3, [sp, #24]
 8007482:	2f00      	cmp	r7, #0
 8007484:	db39      	blt.n	80074fa <_dtoa_r+0x21a>
 8007486:	9b06      	ldr	r3, [sp, #24]
 8007488:	970d      	str	r7, [sp, #52]	@ 0x34
 800748a:	443b      	add	r3, r7
 800748c:	9306      	str	r3, [sp, #24]
 800748e:	2300      	movs	r3, #0
 8007490:	9308      	str	r3, [sp, #32]
 8007492:	9b07      	ldr	r3, [sp, #28]
 8007494:	2b09      	cmp	r3, #9
 8007496:	d863      	bhi.n	8007560 <_dtoa_r+0x280>
 8007498:	2b05      	cmp	r3, #5
 800749a:	bfc4      	itt	gt
 800749c:	3b04      	subgt	r3, #4
 800749e:	9307      	strgt	r3, [sp, #28]
 80074a0:	9b07      	ldr	r3, [sp, #28]
 80074a2:	f1a3 0302 	sub.w	r3, r3, #2
 80074a6:	bfcc      	ite	gt
 80074a8:	2400      	movgt	r4, #0
 80074aa:	2401      	movle	r4, #1
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d863      	bhi.n	8007578 <_dtoa_r+0x298>
 80074b0:	e8df f003 	tbb	[pc, r3]
 80074b4:	2b375452 	.word	0x2b375452
 80074b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80074bc:	441e      	add	r6, r3
 80074be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074c2:	2b20      	cmp	r3, #32
 80074c4:	bfc1      	itttt	gt
 80074c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074ca:	409f      	lslgt	r7, r3
 80074cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074d4:	bfd6      	itet	le
 80074d6:	f1c3 0320 	rsble	r3, r3, #32
 80074da:	ea47 0003 	orrgt.w	r0, r7, r3
 80074de:	fa04 f003 	lslle.w	r0, r4, r3
 80074e2:	f7f9 f817 	bl	8000514 <__aeabi_ui2d>
 80074e6:	2201      	movs	r2, #1
 80074e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074ec:	3e01      	subs	r6, #1
 80074ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80074f0:	e776      	b.n	80073e0 <_dtoa_r+0x100>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e7b7      	b.n	8007466 <_dtoa_r+0x186>
 80074f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80074f8:	e7b6      	b.n	8007468 <_dtoa_r+0x188>
 80074fa:	9b00      	ldr	r3, [sp, #0]
 80074fc:	1bdb      	subs	r3, r3, r7
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	427b      	negs	r3, r7
 8007502:	9308      	str	r3, [sp, #32]
 8007504:	2300      	movs	r3, #0
 8007506:	930d      	str	r3, [sp, #52]	@ 0x34
 8007508:	e7c3      	b.n	8007492 <_dtoa_r+0x1b2>
 800750a:	2301      	movs	r3, #1
 800750c:	9309      	str	r3, [sp, #36]	@ 0x24
 800750e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007510:	eb07 0b03 	add.w	fp, r7, r3
 8007514:	f10b 0301 	add.w	r3, fp, #1
 8007518:	2b01      	cmp	r3, #1
 800751a:	9303      	str	r3, [sp, #12]
 800751c:	bfb8      	it	lt
 800751e:	2301      	movlt	r3, #1
 8007520:	e006      	b.n	8007530 <_dtoa_r+0x250>
 8007522:	2301      	movs	r3, #1
 8007524:	9309      	str	r3, [sp, #36]	@ 0x24
 8007526:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007528:	2b00      	cmp	r3, #0
 800752a:	dd28      	ble.n	800757e <_dtoa_r+0x29e>
 800752c:	469b      	mov	fp, r3
 800752e:	9303      	str	r3, [sp, #12]
 8007530:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007534:	2100      	movs	r1, #0
 8007536:	2204      	movs	r2, #4
 8007538:	f102 0514 	add.w	r5, r2, #20
 800753c:	429d      	cmp	r5, r3
 800753e:	d926      	bls.n	800758e <_dtoa_r+0x2ae>
 8007540:	6041      	str	r1, [r0, #4]
 8007542:	4648      	mov	r0, r9
 8007544:	f000 fce6 	bl	8007f14 <_Balloc>
 8007548:	4682      	mov	sl, r0
 800754a:	2800      	cmp	r0, #0
 800754c:	d142      	bne.n	80075d4 <_dtoa_r+0x2f4>
 800754e:	4b1e      	ldr	r3, [pc, #120]	@ (80075c8 <_dtoa_r+0x2e8>)
 8007550:	4602      	mov	r2, r0
 8007552:	f240 11af 	movw	r1, #431	@ 0x1af
 8007556:	e6da      	b.n	800730e <_dtoa_r+0x2e>
 8007558:	2300      	movs	r3, #0
 800755a:	e7e3      	b.n	8007524 <_dtoa_r+0x244>
 800755c:	2300      	movs	r3, #0
 800755e:	e7d5      	b.n	800750c <_dtoa_r+0x22c>
 8007560:	2401      	movs	r4, #1
 8007562:	2300      	movs	r3, #0
 8007564:	9307      	str	r3, [sp, #28]
 8007566:	9409      	str	r4, [sp, #36]	@ 0x24
 8007568:	f04f 3bff 	mov.w	fp, #4294967295
 800756c:	2200      	movs	r2, #0
 800756e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007572:	2312      	movs	r3, #18
 8007574:	920c      	str	r2, [sp, #48]	@ 0x30
 8007576:	e7db      	b.n	8007530 <_dtoa_r+0x250>
 8007578:	2301      	movs	r3, #1
 800757a:	9309      	str	r3, [sp, #36]	@ 0x24
 800757c:	e7f4      	b.n	8007568 <_dtoa_r+0x288>
 800757e:	f04f 0b01 	mov.w	fp, #1
 8007582:	f8cd b00c 	str.w	fp, [sp, #12]
 8007586:	465b      	mov	r3, fp
 8007588:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800758c:	e7d0      	b.n	8007530 <_dtoa_r+0x250>
 800758e:	3101      	adds	r1, #1
 8007590:	0052      	lsls	r2, r2, #1
 8007592:	e7d1      	b.n	8007538 <_dtoa_r+0x258>
 8007594:	f3af 8000 	nop.w
 8007598:	636f4361 	.word	0x636f4361
 800759c:	3fd287a7 	.word	0x3fd287a7
 80075a0:	8b60c8b3 	.word	0x8b60c8b3
 80075a4:	3fc68a28 	.word	0x3fc68a28
 80075a8:	509f79fb 	.word	0x509f79fb
 80075ac:	3fd34413 	.word	0x3fd34413
 80075b0:	08009769 	.word	0x08009769
 80075b4:	08009780 	.word	0x08009780
 80075b8:	7ff00000 	.word	0x7ff00000
 80075bc:	08009739 	.word	0x08009739
 80075c0:	3ff80000 	.word	0x3ff80000
 80075c4:	080098d0 	.word	0x080098d0
 80075c8:	080097d8 	.word	0x080097d8
 80075cc:	08009765 	.word	0x08009765
 80075d0:	08009738 	.word	0x08009738
 80075d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80075d8:	6018      	str	r0, [r3, #0]
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	2b0e      	cmp	r3, #14
 80075de:	f200 80a1 	bhi.w	8007724 <_dtoa_r+0x444>
 80075e2:	2c00      	cmp	r4, #0
 80075e4:	f000 809e 	beq.w	8007724 <_dtoa_r+0x444>
 80075e8:	2f00      	cmp	r7, #0
 80075ea:	dd33      	ble.n	8007654 <_dtoa_r+0x374>
 80075ec:	4b9c      	ldr	r3, [pc, #624]	@ (8007860 <_dtoa_r+0x580>)
 80075ee:	f007 020f 	and.w	r2, r7, #15
 80075f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075f6:	ed93 7b00 	vldr	d7, [r3]
 80075fa:	05f8      	lsls	r0, r7, #23
 80075fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007600:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007604:	d516      	bpl.n	8007634 <_dtoa_r+0x354>
 8007606:	4b97      	ldr	r3, [pc, #604]	@ (8007864 <_dtoa_r+0x584>)
 8007608:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800760c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007610:	f7f9 f924 	bl	800085c <__aeabi_ddiv>
 8007614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007618:	f004 040f 	and.w	r4, r4, #15
 800761c:	2603      	movs	r6, #3
 800761e:	4d91      	ldr	r5, [pc, #580]	@ (8007864 <_dtoa_r+0x584>)
 8007620:	b954      	cbnz	r4, 8007638 <_dtoa_r+0x358>
 8007622:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800762a:	f7f9 f917 	bl	800085c <__aeabi_ddiv>
 800762e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007632:	e028      	b.n	8007686 <_dtoa_r+0x3a6>
 8007634:	2602      	movs	r6, #2
 8007636:	e7f2      	b.n	800761e <_dtoa_r+0x33e>
 8007638:	07e1      	lsls	r1, r4, #31
 800763a:	d508      	bpl.n	800764e <_dtoa_r+0x36e>
 800763c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007640:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007644:	f7f8 ffe0 	bl	8000608 <__aeabi_dmul>
 8007648:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800764c:	3601      	adds	r6, #1
 800764e:	1064      	asrs	r4, r4, #1
 8007650:	3508      	adds	r5, #8
 8007652:	e7e5      	b.n	8007620 <_dtoa_r+0x340>
 8007654:	f000 80af 	beq.w	80077b6 <_dtoa_r+0x4d6>
 8007658:	427c      	negs	r4, r7
 800765a:	4b81      	ldr	r3, [pc, #516]	@ (8007860 <_dtoa_r+0x580>)
 800765c:	4d81      	ldr	r5, [pc, #516]	@ (8007864 <_dtoa_r+0x584>)
 800765e:	f004 020f 	and.w	r2, r4, #15
 8007662:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800766e:	f7f8 ffcb 	bl	8000608 <__aeabi_dmul>
 8007672:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007676:	1124      	asrs	r4, r4, #4
 8007678:	2300      	movs	r3, #0
 800767a:	2602      	movs	r6, #2
 800767c:	2c00      	cmp	r4, #0
 800767e:	f040 808f 	bne.w	80077a0 <_dtoa_r+0x4c0>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1d3      	bne.n	800762e <_dtoa_r+0x34e>
 8007686:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007688:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8094 	beq.w	80077ba <_dtoa_r+0x4da>
 8007692:	4b75      	ldr	r3, [pc, #468]	@ (8007868 <_dtoa_r+0x588>)
 8007694:	2200      	movs	r2, #0
 8007696:	4620      	mov	r0, r4
 8007698:	4629      	mov	r1, r5
 800769a:	f7f9 fa27 	bl	8000aec <__aeabi_dcmplt>
 800769e:	2800      	cmp	r0, #0
 80076a0:	f000 808b 	beq.w	80077ba <_dtoa_r+0x4da>
 80076a4:	9b03      	ldr	r3, [sp, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 8087 	beq.w	80077ba <_dtoa_r+0x4da>
 80076ac:	f1bb 0f00 	cmp.w	fp, #0
 80076b0:	dd34      	ble.n	800771c <_dtoa_r+0x43c>
 80076b2:	4620      	mov	r0, r4
 80076b4:	4b6d      	ldr	r3, [pc, #436]	@ (800786c <_dtoa_r+0x58c>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7f8 ffa5 	bl	8000608 <__aeabi_dmul>
 80076be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076c2:	f107 38ff 	add.w	r8, r7, #4294967295
 80076c6:	3601      	adds	r6, #1
 80076c8:	465c      	mov	r4, fp
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7f8 ff32 	bl	8000534 <__aeabi_i2d>
 80076d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d4:	f7f8 ff98 	bl	8000608 <__aeabi_dmul>
 80076d8:	4b65      	ldr	r3, [pc, #404]	@ (8007870 <_dtoa_r+0x590>)
 80076da:	2200      	movs	r2, #0
 80076dc:	f7f8 fdde 	bl	800029c <__adddf3>
 80076e0:	4605      	mov	r5, r0
 80076e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076e6:	2c00      	cmp	r4, #0
 80076e8:	d16a      	bne.n	80077c0 <_dtoa_r+0x4e0>
 80076ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ee:	4b61      	ldr	r3, [pc, #388]	@ (8007874 <_dtoa_r+0x594>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	f7f8 fdd1 	bl	8000298 <__aeabi_dsub>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076fe:	462a      	mov	r2, r5
 8007700:	4633      	mov	r3, r6
 8007702:	f7f9 fa11 	bl	8000b28 <__aeabi_dcmpgt>
 8007706:	2800      	cmp	r0, #0
 8007708:	f040 8298 	bne.w	8007c3c <_dtoa_r+0x95c>
 800770c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007710:	462a      	mov	r2, r5
 8007712:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007716:	f7f9 f9e9 	bl	8000aec <__aeabi_dcmplt>
 800771a:	bb38      	cbnz	r0, 800776c <_dtoa_r+0x48c>
 800771c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007720:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007724:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007726:	2b00      	cmp	r3, #0
 8007728:	f2c0 8157 	blt.w	80079da <_dtoa_r+0x6fa>
 800772c:	2f0e      	cmp	r7, #14
 800772e:	f300 8154 	bgt.w	80079da <_dtoa_r+0x6fa>
 8007732:	4b4b      	ldr	r3, [pc, #300]	@ (8007860 <_dtoa_r+0x580>)
 8007734:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007738:	ed93 7b00 	vldr	d7, [r3]
 800773c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800773e:	2b00      	cmp	r3, #0
 8007740:	ed8d 7b00 	vstr	d7, [sp]
 8007744:	f280 80e5 	bge.w	8007912 <_dtoa_r+0x632>
 8007748:	9b03      	ldr	r3, [sp, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	f300 80e1 	bgt.w	8007912 <_dtoa_r+0x632>
 8007750:	d10c      	bne.n	800776c <_dtoa_r+0x48c>
 8007752:	4b48      	ldr	r3, [pc, #288]	@ (8007874 <_dtoa_r+0x594>)
 8007754:	2200      	movs	r2, #0
 8007756:	ec51 0b17 	vmov	r0, r1, d7
 800775a:	f7f8 ff55 	bl	8000608 <__aeabi_dmul>
 800775e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007762:	f7f9 f9d7 	bl	8000b14 <__aeabi_dcmpge>
 8007766:	2800      	cmp	r0, #0
 8007768:	f000 8266 	beq.w	8007c38 <_dtoa_r+0x958>
 800776c:	2400      	movs	r4, #0
 800776e:	4625      	mov	r5, r4
 8007770:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007772:	4656      	mov	r6, sl
 8007774:	ea6f 0803 	mvn.w	r8, r3
 8007778:	2700      	movs	r7, #0
 800777a:	4621      	mov	r1, r4
 800777c:	4648      	mov	r0, r9
 800777e:	f000 fc09 	bl	8007f94 <_Bfree>
 8007782:	2d00      	cmp	r5, #0
 8007784:	f000 80bd 	beq.w	8007902 <_dtoa_r+0x622>
 8007788:	b12f      	cbz	r7, 8007796 <_dtoa_r+0x4b6>
 800778a:	42af      	cmp	r7, r5
 800778c:	d003      	beq.n	8007796 <_dtoa_r+0x4b6>
 800778e:	4639      	mov	r1, r7
 8007790:	4648      	mov	r0, r9
 8007792:	f000 fbff 	bl	8007f94 <_Bfree>
 8007796:	4629      	mov	r1, r5
 8007798:	4648      	mov	r0, r9
 800779a:	f000 fbfb 	bl	8007f94 <_Bfree>
 800779e:	e0b0      	b.n	8007902 <_dtoa_r+0x622>
 80077a0:	07e2      	lsls	r2, r4, #31
 80077a2:	d505      	bpl.n	80077b0 <_dtoa_r+0x4d0>
 80077a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077a8:	f7f8 ff2e 	bl	8000608 <__aeabi_dmul>
 80077ac:	3601      	adds	r6, #1
 80077ae:	2301      	movs	r3, #1
 80077b0:	1064      	asrs	r4, r4, #1
 80077b2:	3508      	adds	r5, #8
 80077b4:	e762      	b.n	800767c <_dtoa_r+0x39c>
 80077b6:	2602      	movs	r6, #2
 80077b8:	e765      	b.n	8007686 <_dtoa_r+0x3a6>
 80077ba:	9c03      	ldr	r4, [sp, #12]
 80077bc:	46b8      	mov	r8, r7
 80077be:	e784      	b.n	80076ca <_dtoa_r+0x3ea>
 80077c0:	4b27      	ldr	r3, [pc, #156]	@ (8007860 <_dtoa_r+0x580>)
 80077c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077cc:	4454      	add	r4, sl
 80077ce:	2900      	cmp	r1, #0
 80077d0:	d054      	beq.n	800787c <_dtoa_r+0x59c>
 80077d2:	4929      	ldr	r1, [pc, #164]	@ (8007878 <_dtoa_r+0x598>)
 80077d4:	2000      	movs	r0, #0
 80077d6:	f7f9 f841 	bl	800085c <__aeabi_ddiv>
 80077da:	4633      	mov	r3, r6
 80077dc:	462a      	mov	r2, r5
 80077de:	f7f8 fd5b 	bl	8000298 <__aeabi_dsub>
 80077e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80077e6:	4656      	mov	r6, sl
 80077e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ec:	f7f9 f9bc 	bl	8000b68 <__aeabi_d2iz>
 80077f0:	4605      	mov	r5, r0
 80077f2:	f7f8 fe9f 	bl	8000534 <__aeabi_i2d>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077fe:	f7f8 fd4b 	bl	8000298 <__aeabi_dsub>
 8007802:	3530      	adds	r5, #48	@ 0x30
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800780c:	f806 5b01 	strb.w	r5, [r6], #1
 8007810:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007814:	f7f9 f96a 	bl	8000aec <__aeabi_dcmplt>
 8007818:	2800      	cmp	r0, #0
 800781a:	d172      	bne.n	8007902 <_dtoa_r+0x622>
 800781c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007820:	4911      	ldr	r1, [pc, #68]	@ (8007868 <_dtoa_r+0x588>)
 8007822:	2000      	movs	r0, #0
 8007824:	f7f8 fd38 	bl	8000298 <__aeabi_dsub>
 8007828:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800782c:	f7f9 f95e 	bl	8000aec <__aeabi_dcmplt>
 8007830:	2800      	cmp	r0, #0
 8007832:	f040 80b4 	bne.w	800799e <_dtoa_r+0x6be>
 8007836:	42a6      	cmp	r6, r4
 8007838:	f43f af70 	beq.w	800771c <_dtoa_r+0x43c>
 800783c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007840:	4b0a      	ldr	r3, [pc, #40]	@ (800786c <_dtoa_r+0x58c>)
 8007842:	2200      	movs	r2, #0
 8007844:	f7f8 fee0 	bl	8000608 <__aeabi_dmul>
 8007848:	4b08      	ldr	r3, [pc, #32]	@ (800786c <_dtoa_r+0x58c>)
 800784a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800784e:	2200      	movs	r2, #0
 8007850:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007854:	f7f8 fed8 	bl	8000608 <__aeabi_dmul>
 8007858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800785c:	e7c4      	b.n	80077e8 <_dtoa_r+0x508>
 800785e:	bf00      	nop
 8007860:	080098d0 	.word	0x080098d0
 8007864:	080098a8 	.word	0x080098a8
 8007868:	3ff00000 	.word	0x3ff00000
 800786c:	40240000 	.word	0x40240000
 8007870:	401c0000 	.word	0x401c0000
 8007874:	40140000 	.word	0x40140000
 8007878:	3fe00000 	.word	0x3fe00000
 800787c:	4631      	mov	r1, r6
 800787e:	4628      	mov	r0, r5
 8007880:	f7f8 fec2 	bl	8000608 <__aeabi_dmul>
 8007884:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007888:	9413      	str	r4, [sp, #76]	@ 0x4c
 800788a:	4656      	mov	r6, sl
 800788c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007890:	f7f9 f96a 	bl	8000b68 <__aeabi_d2iz>
 8007894:	4605      	mov	r5, r0
 8007896:	f7f8 fe4d 	bl	8000534 <__aeabi_i2d>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078a2:	f7f8 fcf9 	bl	8000298 <__aeabi_dsub>
 80078a6:	3530      	adds	r5, #48	@ 0x30
 80078a8:	f806 5b01 	strb.w	r5, [r6], #1
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	42a6      	cmp	r6, r4
 80078b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	d124      	bne.n	8007906 <_dtoa_r+0x626>
 80078bc:	4baf      	ldr	r3, [pc, #700]	@ (8007b7c <_dtoa_r+0x89c>)
 80078be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80078c2:	f7f8 fceb 	bl	800029c <__adddf3>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078ce:	f7f9 f92b 	bl	8000b28 <__aeabi_dcmpgt>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d163      	bne.n	800799e <_dtoa_r+0x6be>
 80078d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80078da:	49a8      	ldr	r1, [pc, #672]	@ (8007b7c <_dtoa_r+0x89c>)
 80078dc:	2000      	movs	r0, #0
 80078de:	f7f8 fcdb 	bl	8000298 <__aeabi_dsub>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078ea:	f7f9 f8ff 	bl	8000aec <__aeabi_dcmplt>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f43f af14 	beq.w	800771c <_dtoa_r+0x43c>
 80078f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80078f6:	1e73      	subs	r3, r6, #1
 80078f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078fe:	2b30      	cmp	r3, #48	@ 0x30
 8007900:	d0f8      	beq.n	80078f4 <_dtoa_r+0x614>
 8007902:	4647      	mov	r7, r8
 8007904:	e03b      	b.n	800797e <_dtoa_r+0x69e>
 8007906:	4b9e      	ldr	r3, [pc, #632]	@ (8007b80 <_dtoa_r+0x8a0>)
 8007908:	f7f8 fe7e 	bl	8000608 <__aeabi_dmul>
 800790c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007910:	e7bc      	b.n	800788c <_dtoa_r+0x5ac>
 8007912:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007916:	4656      	mov	r6, sl
 8007918:	e9dd 2300 	ldrd	r2, r3, [sp]
 800791c:	4620      	mov	r0, r4
 800791e:	4629      	mov	r1, r5
 8007920:	f7f8 ff9c 	bl	800085c <__aeabi_ddiv>
 8007924:	f7f9 f920 	bl	8000b68 <__aeabi_d2iz>
 8007928:	4680      	mov	r8, r0
 800792a:	f7f8 fe03 	bl	8000534 <__aeabi_i2d>
 800792e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007932:	f7f8 fe69 	bl	8000608 <__aeabi_dmul>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4620      	mov	r0, r4
 800793c:	4629      	mov	r1, r5
 800793e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007942:	f7f8 fca9 	bl	8000298 <__aeabi_dsub>
 8007946:	f806 4b01 	strb.w	r4, [r6], #1
 800794a:	9d03      	ldr	r5, [sp, #12]
 800794c:	eba6 040a 	sub.w	r4, r6, sl
 8007950:	42a5      	cmp	r5, r4
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	d133      	bne.n	80079c0 <_dtoa_r+0x6e0>
 8007958:	f7f8 fca0 	bl	800029c <__adddf3>
 800795c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007960:	4604      	mov	r4, r0
 8007962:	460d      	mov	r5, r1
 8007964:	f7f9 f8e0 	bl	8000b28 <__aeabi_dcmpgt>
 8007968:	b9c0      	cbnz	r0, 800799c <_dtoa_r+0x6bc>
 800796a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800796e:	4620      	mov	r0, r4
 8007970:	4629      	mov	r1, r5
 8007972:	f7f9 f8b1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007976:	b110      	cbz	r0, 800797e <_dtoa_r+0x69e>
 8007978:	f018 0f01 	tst.w	r8, #1
 800797c:	d10e      	bne.n	800799c <_dtoa_r+0x6bc>
 800797e:	9902      	ldr	r1, [sp, #8]
 8007980:	4648      	mov	r0, r9
 8007982:	f000 fb07 	bl	8007f94 <_Bfree>
 8007986:	2300      	movs	r3, #0
 8007988:	7033      	strb	r3, [r6, #0]
 800798a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800798c:	3701      	adds	r7, #1
 800798e:	601f      	str	r7, [r3, #0]
 8007990:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 824b 	beq.w	8007e2e <_dtoa_r+0xb4e>
 8007998:	601e      	str	r6, [r3, #0]
 800799a:	e248      	b.n	8007e2e <_dtoa_r+0xb4e>
 800799c:	46b8      	mov	r8, r7
 800799e:	4633      	mov	r3, r6
 80079a0:	461e      	mov	r6, r3
 80079a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079a6:	2a39      	cmp	r2, #57	@ 0x39
 80079a8:	d106      	bne.n	80079b8 <_dtoa_r+0x6d8>
 80079aa:	459a      	cmp	sl, r3
 80079ac:	d1f8      	bne.n	80079a0 <_dtoa_r+0x6c0>
 80079ae:	2230      	movs	r2, #48	@ 0x30
 80079b0:	f108 0801 	add.w	r8, r8, #1
 80079b4:	f88a 2000 	strb.w	r2, [sl]
 80079b8:	781a      	ldrb	r2, [r3, #0]
 80079ba:	3201      	adds	r2, #1
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	e7a0      	b.n	8007902 <_dtoa_r+0x622>
 80079c0:	4b6f      	ldr	r3, [pc, #444]	@ (8007b80 <_dtoa_r+0x8a0>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	f7f8 fe20 	bl	8000608 <__aeabi_dmul>
 80079c8:	2200      	movs	r2, #0
 80079ca:	2300      	movs	r3, #0
 80079cc:	4604      	mov	r4, r0
 80079ce:	460d      	mov	r5, r1
 80079d0:	f7f9 f882 	bl	8000ad8 <__aeabi_dcmpeq>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d09f      	beq.n	8007918 <_dtoa_r+0x638>
 80079d8:	e7d1      	b.n	800797e <_dtoa_r+0x69e>
 80079da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079dc:	2a00      	cmp	r2, #0
 80079de:	f000 80ea 	beq.w	8007bb6 <_dtoa_r+0x8d6>
 80079e2:	9a07      	ldr	r2, [sp, #28]
 80079e4:	2a01      	cmp	r2, #1
 80079e6:	f300 80cd 	bgt.w	8007b84 <_dtoa_r+0x8a4>
 80079ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80079ec:	2a00      	cmp	r2, #0
 80079ee:	f000 80c1 	beq.w	8007b74 <_dtoa_r+0x894>
 80079f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079f6:	9c08      	ldr	r4, [sp, #32]
 80079f8:	9e00      	ldr	r6, [sp, #0]
 80079fa:	9a00      	ldr	r2, [sp, #0]
 80079fc:	441a      	add	r2, r3
 80079fe:	9200      	str	r2, [sp, #0]
 8007a00:	9a06      	ldr	r2, [sp, #24]
 8007a02:	2101      	movs	r1, #1
 8007a04:	441a      	add	r2, r3
 8007a06:	4648      	mov	r0, r9
 8007a08:	9206      	str	r2, [sp, #24]
 8007a0a:	f000 fb77 	bl	80080fc <__i2b>
 8007a0e:	4605      	mov	r5, r0
 8007a10:	b166      	cbz	r6, 8007a2c <_dtoa_r+0x74c>
 8007a12:	9b06      	ldr	r3, [sp, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dd09      	ble.n	8007a2c <_dtoa_r+0x74c>
 8007a18:	42b3      	cmp	r3, r6
 8007a1a:	9a00      	ldr	r2, [sp, #0]
 8007a1c:	bfa8      	it	ge
 8007a1e:	4633      	movge	r3, r6
 8007a20:	1ad2      	subs	r2, r2, r3
 8007a22:	9200      	str	r2, [sp, #0]
 8007a24:	9a06      	ldr	r2, [sp, #24]
 8007a26:	1af6      	subs	r6, r6, r3
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	9306      	str	r3, [sp, #24]
 8007a2c:	9b08      	ldr	r3, [sp, #32]
 8007a2e:	b30b      	cbz	r3, 8007a74 <_dtoa_r+0x794>
 8007a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 80c6 	beq.w	8007bc4 <_dtoa_r+0x8e4>
 8007a38:	2c00      	cmp	r4, #0
 8007a3a:	f000 80c0 	beq.w	8007bbe <_dtoa_r+0x8de>
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4622      	mov	r2, r4
 8007a42:	4648      	mov	r0, r9
 8007a44:	f000 fc12 	bl	800826c <__pow5mult>
 8007a48:	9a02      	ldr	r2, [sp, #8]
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	4648      	mov	r0, r9
 8007a50:	f000 fb6a 	bl	8008128 <__multiply>
 8007a54:	9902      	ldr	r1, [sp, #8]
 8007a56:	4680      	mov	r8, r0
 8007a58:	4648      	mov	r0, r9
 8007a5a:	f000 fa9b 	bl	8007f94 <_Bfree>
 8007a5e:	9b08      	ldr	r3, [sp, #32]
 8007a60:	1b1b      	subs	r3, r3, r4
 8007a62:	9308      	str	r3, [sp, #32]
 8007a64:	f000 80b1 	beq.w	8007bca <_dtoa_r+0x8ea>
 8007a68:	9a08      	ldr	r2, [sp, #32]
 8007a6a:	4641      	mov	r1, r8
 8007a6c:	4648      	mov	r0, r9
 8007a6e:	f000 fbfd 	bl	800826c <__pow5mult>
 8007a72:	9002      	str	r0, [sp, #8]
 8007a74:	2101      	movs	r1, #1
 8007a76:	4648      	mov	r0, r9
 8007a78:	f000 fb40 	bl	80080fc <__i2b>
 8007a7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a7e:	4604      	mov	r4, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 81d8 	beq.w	8007e36 <_dtoa_r+0xb56>
 8007a86:	461a      	mov	r2, r3
 8007a88:	4601      	mov	r1, r0
 8007a8a:	4648      	mov	r0, r9
 8007a8c:	f000 fbee 	bl	800826c <__pow5mult>
 8007a90:	9b07      	ldr	r3, [sp, #28]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	4604      	mov	r4, r0
 8007a96:	f300 809f 	bgt.w	8007bd8 <_dtoa_r+0x8f8>
 8007a9a:	9b04      	ldr	r3, [sp, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f040 8097 	bne.w	8007bd0 <_dtoa_r+0x8f0>
 8007aa2:	9b05      	ldr	r3, [sp, #20]
 8007aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f040 8093 	bne.w	8007bd4 <_dtoa_r+0x8f4>
 8007aae:	9b05      	ldr	r3, [sp, #20]
 8007ab0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ab4:	0d1b      	lsrs	r3, r3, #20
 8007ab6:	051b      	lsls	r3, r3, #20
 8007ab8:	b133      	cbz	r3, 8007ac8 <_dtoa_r+0x7e8>
 8007aba:	9b00      	ldr	r3, [sp, #0]
 8007abc:	3301      	adds	r3, #1
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	9b06      	ldr	r3, [sp, #24]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	9306      	str	r3, [sp, #24]
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	9308      	str	r3, [sp, #32]
 8007aca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 81b8 	beq.w	8007e42 <_dtoa_r+0xb62>
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ad8:	6918      	ldr	r0, [r3, #16]
 8007ada:	f000 fac3 	bl	8008064 <__hi0bits>
 8007ade:	f1c0 0020 	rsb	r0, r0, #32
 8007ae2:	9b06      	ldr	r3, [sp, #24]
 8007ae4:	4418      	add	r0, r3
 8007ae6:	f010 001f 	ands.w	r0, r0, #31
 8007aea:	f000 8082 	beq.w	8007bf2 <_dtoa_r+0x912>
 8007aee:	f1c0 0320 	rsb	r3, r0, #32
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	dd73      	ble.n	8007bde <_dtoa_r+0x8fe>
 8007af6:	9b00      	ldr	r3, [sp, #0]
 8007af8:	f1c0 001c 	rsb	r0, r0, #28
 8007afc:	4403      	add	r3, r0
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	9b06      	ldr	r3, [sp, #24]
 8007b02:	4403      	add	r3, r0
 8007b04:	4406      	add	r6, r0
 8007b06:	9306      	str	r3, [sp, #24]
 8007b08:	9b00      	ldr	r3, [sp, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	dd05      	ble.n	8007b1a <_dtoa_r+0x83a>
 8007b0e:	9902      	ldr	r1, [sp, #8]
 8007b10:	461a      	mov	r2, r3
 8007b12:	4648      	mov	r0, r9
 8007b14:	f000 fc04 	bl	8008320 <__lshift>
 8007b18:	9002      	str	r0, [sp, #8]
 8007b1a:	9b06      	ldr	r3, [sp, #24]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	dd05      	ble.n	8007b2c <_dtoa_r+0x84c>
 8007b20:	4621      	mov	r1, r4
 8007b22:	461a      	mov	r2, r3
 8007b24:	4648      	mov	r0, r9
 8007b26:	f000 fbfb 	bl	8008320 <__lshift>
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d061      	beq.n	8007bf6 <_dtoa_r+0x916>
 8007b32:	9802      	ldr	r0, [sp, #8]
 8007b34:	4621      	mov	r1, r4
 8007b36:	f000 fc5f 	bl	80083f8 <__mcmp>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	da5b      	bge.n	8007bf6 <_dtoa_r+0x916>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	9902      	ldr	r1, [sp, #8]
 8007b42:	220a      	movs	r2, #10
 8007b44:	4648      	mov	r0, r9
 8007b46:	f000 fa47 	bl	8007fd8 <__multadd>
 8007b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4c:	9002      	str	r0, [sp, #8]
 8007b4e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 8177 	beq.w	8007e46 <_dtoa_r+0xb66>
 8007b58:	4629      	mov	r1, r5
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	220a      	movs	r2, #10
 8007b5e:	4648      	mov	r0, r9
 8007b60:	f000 fa3a 	bl	8007fd8 <__multadd>
 8007b64:	f1bb 0f00 	cmp.w	fp, #0
 8007b68:	4605      	mov	r5, r0
 8007b6a:	dc6f      	bgt.n	8007c4c <_dtoa_r+0x96c>
 8007b6c:	9b07      	ldr	r3, [sp, #28]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	dc49      	bgt.n	8007c06 <_dtoa_r+0x926>
 8007b72:	e06b      	b.n	8007c4c <_dtoa_r+0x96c>
 8007b74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b7a:	e73c      	b.n	80079f6 <_dtoa_r+0x716>
 8007b7c:	3fe00000 	.word	0x3fe00000
 8007b80:	40240000 	.word	0x40240000
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	1e5c      	subs	r4, r3, #1
 8007b88:	9b08      	ldr	r3, [sp, #32]
 8007b8a:	42a3      	cmp	r3, r4
 8007b8c:	db09      	blt.n	8007ba2 <_dtoa_r+0x8c2>
 8007b8e:	1b1c      	subs	r4, r3, r4
 8007b90:	9b03      	ldr	r3, [sp, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f6bf af30 	bge.w	80079f8 <_dtoa_r+0x718>
 8007b98:	9b00      	ldr	r3, [sp, #0]
 8007b9a:	9a03      	ldr	r2, [sp, #12]
 8007b9c:	1a9e      	subs	r6, r3, r2
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e72b      	b.n	80079fa <_dtoa_r+0x71a>
 8007ba2:	9b08      	ldr	r3, [sp, #32]
 8007ba4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ba6:	9408      	str	r4, [sp, #32]
 8007ba8:	1ae3      	subs	r3, r4, r3
 8007baa:	441a      	add	r2, r3
 8007bac:	9e00      	ldr	r6, [sp, #0]
 8007bae:	9b03      	ldr	r3, [sp, #12]
 8007bb0:	920d      	str	r2, [sp, #52]	@ 0x34
 8007bb2:	2400      	movs	r4, #0
 8007bb4:	e721      	b.n	80079fa <_dtoa_r+0x71a>
 8007bb6:	9c08      	ldr	r4, [sp, #32]
 8007bb8:	9e00      	ldr	r6, [sp, #0]
 8007bba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007bbc:	e728      	b.n	8007a10 <_dtoa_r+0x730>
 8007bbe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007bc2:	e751      	b.n	8007a68 <_dtoa_r+0x788>
 8007bc4:	9a08      	ldr	r2, [sp, #32]
 8007bc6:	9902      	ldr	r1, [sp, #8]
 8007bc8:	e750      	b.n	8007a6c <_dtoa_r+0x78c>
 8007bca:	f8cd 8008 	str.w	r8, [sp, #8]
 8007bce:	e751      	b.n	8007a74 <_dtoa_r+0x794>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	e779      	b.n	8007ac8 <_dtoa_r+0x7e8>
 8007bd4:	9b04      	ldr	r3, [sp, #16]
 8007bd6:	e777      	b.n	8007ac8 <_dtoa_r+0x7e8>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	9308      	str	r3, [sp, #32]
 8007bdc:	e779      	b.n	8007ad2 <_dtoa_r+0x7f2>
 8007bde:	d093      	beq.n	8007b08 <_dtoa_r+0x828>
 8007be0:	9a00      	ldr	r2, [sp, #0]
 8007be2:	331c      	adds	r3, #28
 8007be4:	441a      	add	r2, r3
 8007be6:	9200      	str	r2, [sp, #0]
 8007be8:	9a06      	ldr	r2, [sp, #24]
 8007bea:	441a      	add	r2, r3
 8007bec:	441e      	add	r6, r3
 8007bee:	9206      	str	r2, [sp, #24]
 8007bf0:	e78a      	b.n	8007b08 <_dtoa_r+0x828>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	e7f4      	b.n	8007be0 <_dtoa_r+0x900>
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	46b8      	mov	r8, r7
 8007bfc:	dc20      	bgt.n	8007c40 <_dtoa_r+0x960>
 8007bfe:	469b      	mov	fp, r3
 8007c00:	9b07      	ldr	r3, [sp, #28]
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	dd1e      	ble.n	8007c44 <_dtoa_r+0x964>
 8007c06:	f1bb 0f00 	cmp.w	fp, #0
 8007c0a:	f47f adb1 	bne.w	8007770 <_dtoa_r+0x490>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	465b      	mov	r3, fp
 8007c12:	2205      	movs	r2, #5
 8007c14:	4648      	mov	r0, r9
 8007c16:	f000 f9df 	bl	8007fd8 <__multadd>
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	9802      	ldr	r0, [sp, #8]
 8007c20:	f000 fbea 	bl	80083f8 <__mcmp>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	f77f ada3 	ble.w	8007770 <_dtoa_r+0x490>
 8007c2a:	4656      	mov	r6, sl
 8007c2c:	2331      	movs	r3, #49	@ 0x31
 8007c2e:	f806 3b01 	strb.w	r3, [r6], #1
 8007c32:	f108 0801 	add.w	r8, r8, #1
 8007c36:	e59f      	b.n	8007778 <_dtoa_r+0x498>
 8007c38:	9c03      	ldr	r4, [sp, #12]
 8007c3a:	46b8      	mov	r8, r7
 8007c3c:	4625      	mov	r5, r4
 8007c3e:	e7f4      	b.n	8007c2a <_dtoa_r+0x94a>
 8007c40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 8101 	beq.w	8007e4e <_dtoa_r+0xb6e>
 8007c4c:	2e00      	cmp	r6, #0
 8007c4e:	dd05      	ble.n	8007c5c <_dtoa_r+0x97c>
 8007c50:	4629      	mov	r1, r5
 8007c52:	4632      	mov	r2, r6
 8007c54:	4648      	mov	r0, r9
 8007c56:	f000 fb63 	bl	8008320 <__lshift>
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	9b08      	ldr	r3, [sp, #32]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d05c      	beq.n	8007d1c <_dtoa_r+0xa3c>
 8007c62:	6869      	ldr	r1, [r5, #4]
 8007c64:	4648      	mov	r0, r9
 8007c66:	f000 f955 	bl	8007f14 <_Balloc>
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	b928      	cbnz	r0, 8007c7a <_dtoa_r+0x99a>
 8007c6e:	4b82      	ldr	r3, [pc, #520]	@ (8007e78 <_dtoa_r+0xb98>)
 8007c70:	4602      	mov	r2, r0
 8007c72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c76:	f7ff bb4a 	b.w	800730e <_dtoa_r+0x2e>
 8007c7a:	692a      	ldr	r2, [r5, #16]
 8007c7c:	3202      	adds	r2, #2
 8007c7e:	0092      	lsls	r2, r2, #2
 8007c80:	f105 010c 	add.w	r1, r5, #12
 8007c84:	300c      	adds	r0, #12
 8007c86:	f7ff fa92 	bl	80071ae <memcpy>
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4648      	mov	r0, r9
 8007c90:	f000 fb46 	bl	8008320 <__lshift>
 8007c94:	f10a 0301 	add.w	r3, sl, #1
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	eb0a 030b 	add.w	r3, sl, fp
 8007c9e:	9308      	str	r3, [sp, #32]
 8007ca0:	9b04      	ldr	r3, [sp, #16]
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	462f      	mov	r7, r5
 8007ca8:	9306      	str	r3, [sp, #24]
 8007caa:	4605      	mov	r5, r0
 8007cac:	9b00      	ldr	r3, [sp, #0]
 8007cae:	9802      	ldr	r0, [sp, #8]
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	f103 3bff 	add.w	fp, r3, #4294967295
 8007cb6:	f7ff fa88 	bl	80071ca <quorem>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	3330      	adds	r3, #48	@ 0x30
 8007cbe:	9003      	str	r0, [sp, #12]
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	9802      	ldr	r0, [sp, #8]
 8007cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cc6:	f000 fb97 	bl	80083f8 <__mcmp>
 8007cca:	462a      	mov	r2, r5
 8007ccc:	9004      	str	r0, [sp, #16]
 8007cce:	4621      	mov	r1, r4
 8007cd0:	4648      	mov	r0, r9
 8007cd2:	f000 fbad 	bl	8008430 <__mdiff>
 8007cd6:	68c2      	ldr	r2, [r0, #12]
 8007cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cda:	4606      	mov	r6, r0
 8007cdc:	bb02      	cbnz	r2, 8007d20 <_dtoa_r+0xa40>
 8007cde:	4601      	mov	r1, r0
 8007ce0:	9802      	ldr	r0, [sp, #8]
 8007ce2:	f000 fb89 	bl	80083f8 <__mcmp>
 8007ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4631      	mov	r1, r6
 8007cec:	4648      	mov	r0, r9
 8007cee:	920c      	str	r2, [sp, #48]	@ 0x30
 8007cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cf2:	f000 f94f 	bl	8007f94 <_Bfree>
 8007cf6:	9b07      	ldr	r3, [sp, #28]
 8007cf8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007cfa:	9e00      	ldr	r6, [sp, #0]
 8007cfc:	ea42 0103 	orr.w	r1, r2, r3
 8007d00:	9b06      	ldr	r3, [sp, #24]
 8007d02:	4319      	orrs	r1, r3
 8007d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d06:	d10d      	bne.n	8007d24 <_dtoa_r+0xa44>
 8007d08:	2b39      	cmp	r3, #57	@ 0x39
 8007d0a:	d027      	beq.n	8007d5c <_dtoa_r+0xa7c>
 8007d0c:	9a04      	ldr	r2, [sp, #16]
 8007d0e:	2a00      	cmp	r2, #0
 8007d10:	dd01      	ble.n	8007d16 <_dtoa_r+0xa36>
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	3331      	adds	r3, #49	@ 0x31
 8007d16:	f88b 3000 	strb.w	r3, [fp]
 8007d1a:	e52e      	b.n	800777a <_dtoa_r+0x49a>
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	e7b9      	b.n	8007c94 <_dtoa_r+0x9b4>
 8007d20:	2201      	movs	r2, #1
 8007d22:	e7e2      	b.n	8007cea <_dtoa_r+0xa0a>
 8007d24:	9904      	ldr	r1, [sp, #16]
 8007d26:	2900      	cmp	r1, #0
 8007d28:	db04      	blt.n	8007d34 <_dtoa_r+0xa54>
 8007d2a:	9807      	ldr	r0, [sp, #28]
 8007d2c:	4301      	orrs	r1, r0
 8007d2e:	9806      	ldr	r0, [sp, #24]
 8007d30:	4301      	orrs	r1, r0
 8007d32:	d120      	bne.n	8007d76 <_dtoa_r+0xa96>
 8007d34:	2a00      	cmp	r2, #0
 8007d36:	ddee      	ble.n	8007d16 <_dtoa_r+0xa36>
 8007d38:	9902      	ldr	r1, [sp, #8]
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	4648      	mov	r0, r9
 8007d40:	f000 faee 	bl	8008320 <__lshift>
 8007d44:	4621      	mov	r1, r4
 8007d46:	9002      	str	r0, [sp, #8]
 8007d48:	f000 fb56 	bl	80083f8 <__mcmp>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	9b00      	ldr	r3, [sp, #0]
 8007d50:	dc02      	bgt.n	8007d58 <_dtoa_r+0xa78>
 8007d52:	d1e0      	bne.n	8007d16 <_dtoa_r+0xa36>
 8007d54:	07da      	lsls	r2, r3, #31
 8007d56:	d5de      	bpl.n	8007d16 <_dtoa_r+0xa36>
 8007d58:	2b39      	cmp	r3, #57	@ 0x39
 8007d5a:	d1da      	bne.n	8007d12 <_dtoa_r+0xa32>
 8007d5c:	2339      	movs	r3, #57	@ 0x39
 8007d5e:	f88b 3000 	strb.w	r3, [fp]
 8007d62:	4633      	mov	r3, r6
 8007d64:	461e      	mov	r6, r3
 8007d66:	3b01      	subs	r3, #1
 8007d68:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d6c:	2a39      	cmp	r2, #57	@ 0x39
 8007d6e:	d04e      	beq.n	8007e0e <_dtoa_r+0xb2e>
 8007d70:	3201      	adds	r2, #1
 8007d72:	701a      	strb	r2, [r3, #0]
 8007d74:	e501      	b.n	800777a <_dtoa_r+0x49a>
 8007d76:	2a00      	cmp	r2, #0
 8007d78:	dd03      	ble.n	8007d82 <_dtoa_r+0xaa2>
 8007d7a:	2b39      	cmp	r3, #57	@ 0x39
 8007d7c:	d0ee      	beq.n	8007d5c <_dtoa_r+0xa7c>
 8007d7e:	3301      	adds	r3, #1
 8007d80:	e7c9      	b.n	8007d16 <_dtoa_r+0xa36>
 8007d82:	9a00      	ldr	r2, [sp, #0]
 8007d84:	9908      	ldr	r1, [sp, #32]
 8007d86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d8a:	428a      	cmp	r2, r1
 8007d8c:	d028      	beq.n	8007de0 <_dtoa_r+0xb00>
 8007d8e:	9902      	ldr	r1, [sp, #8]
 8007d90:	2300      	movs	r3, #0
 8007d92:	220a      	movs	r2, #10
 8007d94:	4648      	mov	r0, r9
 8007d96:	f000 f91f 	bl	8007fd8 <__multadd>
 8007d9a:	42af      	cmp	r7, r5
 8007d9c:	9002      	str	r0, [sp, #8]
 8007d9e:	f04f 0300 	mov.w	r3, #0
 8007da2:	f04f 020a 	mov.w	r2, #10
 8007da6:	4639      	mov	r1, r7
 8007da8:	4648      	mov	r0, r9
 8007daa:	d107      	bne.n	8007dbc <_dtoa_r+0xadc>
 8007dac:	f000 f914 	bl	8007fd8 <__multadd>
 8007db0:	4607      	mov	r7, r0
 8007db2:	4605      	mov	r5, r0
 8007db4:	9b00      	ldr	r3, [sp, #0]
 8007db6:	3301      	adds	r3, #1
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	e777      	b.n	8007cac <_dtoa_r+0x9cc>
 8007dbc:	f000 f90c 	bl	8007fd8 <__multadd>
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	4607      	mov	r7, r0
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	220a      	movs	r2, #10
 8007dc8:	4648      	mov	r0, r9
 8007dca:	f000 f905 	bl	8007fd8 <__multadd>
 8007dce:	4605      	mov	r5, r0
 8007dd0:	e7f0      	b.n	8007db4 <_dtoa_r+0xad4>
 8007dd2:	f1bb 0f00 	cmp.w	fp, #0
 8007dd6:	bfcc      	ite	gt
 8007dd8:	465e      	movgt	r6, fp
 8007dda:	2601      	movle	r6, #1
 8007ddc:	4456      	add	r6, sl
 8007dde:	2700      	movs	r7, #0
 8007de0:	9902      	ldr	r1, [sp, #8]
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	2201      	movs	r2, #1
 8007de6:	4648      	mov	r0, r9
 8007de8:	f000 fa9a 	bl	8008320 <__lshift>
 8007dec:	4621      	mov	r1, r4
 8007dee:	9002      	str	r0, [sp, #8]
 8007df0:	f000 fb02 	bl	80083f8 <__mcmp>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	dcb4      	bgt.n	8007d62 <_dtoa_r+0xa82>
 8007df8:	d102      	bne.n	8007e00 <_dtoa_r+0xb20>
 8007dfa:	9b00      	ldr	r3, [sp, #0]
 8007dfc:	07db      	lsls	r3, r3, #31
 8007dfe:	d4b0      	bmi.n	8007d62 <_dtoa_r+0xa82>
 8007e00:	4633      	mov	r3, r6
 8007e02:	461e      	mov	r6, r3
 8007e04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e08:	2a30      	cmp	r2, #48	@ 0x30
 8007e0a:	d0fa      	beq.n	8007e02 <_dtoa_r+0xb22>
 8007e0c:	e4b5      	b.n	800777a <_dtoa_r+0x49a>
 8007e0e:	459a      	cmp	sl, r3
 8007e10:	d1a8      	bne.n	8007d64 <_dtoa_r+0xa84>
 8007e12:	2331      	movs	r3, #49	@ 0x31
 8007e14:	f108 0801 	add.w	r8, r8, #1
 8007e18:	f88a 3000 	strb.w	r3, [sl]
 8007e1c:	e4ad      	b.n	800777a <_dtoa_r+0x49a>
 8007e1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e20:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007e7c <_dtoa_r+0xb9c>
 8007e24:	b11b      	cbz	r3, 8007e2e <_dtoa_r+0xb4e>
 8007e26:	f10a 0308 	add.w	r3, sl, #8
 8007e2a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	4650      	mov	r0, sl
 8007e30:	b017      	add	sp, #92	@ 0x5c
 8007e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e36:	9b07      	ldr	r3, [sp, #28]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	f77f ae2e 	ble.w	8007a9a <_dtoa_r+0x7ba>
 8007e3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e40:	9308      	str	r3, [sp, #32]
 8007e42:	2001      	movs	r0, #1
 8007e44:	e64d      	b.n	8007ae2 <_dtoa_r+0x802>
 8007e46:	f1bb 0f00 	cmp.w	fp, #0
 8007e4a:	f77f aed9 	ble.w	8007c00 <_dtoa_r+0x920>
 8007e4e:	4656      	mov	r6, sl
 8007e50:	9802      	ldr	r0, [sp, #8]
 8007e52:	4621      	mov	r1, r4
 8007e54:	f7ff f9b9 	bl	80071ca <quorem>
 8007e58:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007e5c:	f806 3b01 	strb.w	r3, [r6], #1
 8007e60:	eba6 020a 	sub.w	r2, r6, sl
 8007e64:	4593      	cmp	fp, r2
 8007e66:	ddb4      	ble.n	8007dd2 <_dtoa_r+0xaf2>
 8007e68:	9902      	ldr	r1, [sp, #8]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	220a      	movs	r2, #10
 8007e6e:	4648      	mov	r0, r9
 8007e70:	f000 f8b2 	bl	8007fd8 <__multadd>
 8007e74:	9002      	str	r0, [sp, #8]
 8007e76:	e7eb      	b.n	8007e50 <_dtoa_r+0xb70>
 8007e78:	080097d8 	.word	0x080097d8
 8007e7c:	0800975c 	.word	0x0800975c

08007e80 <_free_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4605      	mov	r5, r0
 8007e84:	2900      	cmp	r1, #0
 8007e86:	d041      	beq.n	8007f0c <_free_r+0x8c>
 8007e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e8c:	1f0c      	subs	r4, r1, #4
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bfb8      	it	lt
 8007e92:	18e4      	addlt	r4, r4, r3
 8007e94:	f7fe fb44 	bl	8006520 <__malloc_lock>
 8007e98:	4a1d      	ldr	r2, [pc, #116]	@ (8007f10 <_free_r+0x90>)
 8007e9a:	6813      	ldr	r3, [r2, #0]
 8007e9c:	b933      	cbnz	r3, 8007eac <_free_r+0x2c>
 8007e9e:	6063      	str	r3, [r4, #4]
 8007ea0:	6014      	str	r4, [r2, #0]
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea8:	f7fe bb40 	b.w	800652c <__malloc_unlock>
 8007eac:	42a3      	cmp	r3, r4
 8007eae:	d908      	bls.n	8007ec2 <_free_r+0x42>
 8007eb0:	6820      	ldr	r0, [r4, #0]
 8007eb2:	1821      	adds	r1, r4, r0
 8007eb4:	428b      	cmp	r3, r1
 8007eb6:	bf01      	itttt	eq
 8007eb8:	6819      	ldreq	r1, [r3, #0]
 8007eba:	685b      	ldreq	r3, [r3, #4]
 8007ebc:	1809      	addeq	r1, r1, r0
 8007ebe:	6021      	streq	r1, [r4, #0]
 8007ec0:	e7ed      	b.n	8007e9e <_free_r+0x1e>
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	b10b      	cbz	r3, 8007ecc <_free_r+0x4c>
 8007ec8:	42a3      	cmp	r3, r4
 8007eca:	d9fa      	bls.n	8007ec2 <_free_r+0x42>
 8007ecc:	6811      	ldr	r1, [r2, #0]
 8007ece:	1850      	adds	r0, r2, r1
 8007ed0:	42a0      	cmp	r0, r4
 8007ed2:	d10b      	bne.n	8007eec <_free_r+0x6c>
 8007ed4:	6820      	ldr	r0, [r4, #0]
 8007ed6:	4401      	add	r1, r0
 8007ed8:	1850      	adds	r0, r2, r1
 8007eda:	4283      	cmp	r3, r0
 8007edc:	6011      	str	r1, [r2, #0]
 8007ede:	d1e0      	bne.n	8007ea2 <_free_r+0x22>
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	6053      	str	r3, [r2, #4]
 8007ee6:	4408      	add	r0, r1
 8007ee8:	6010      	str	r0, [r2, #0]
 8007eea:	e7da      	b.n	8007ea2 <_free_r+0x22>
 8007eec:	d902      	bls.n	8007ef4 <_free_r+0x74>
 8007eee:	230c      	movs	r3, #12
 8007ef0:	602b      	str	r3, [r5, #0]
 8007ef2:	e7d6      	b.n	8007ea2 <_free_r+0x22>
 8007ef4:	6820      	ldr	r0, [r4, #0]
 8007ef6:	1821      	adds	r1, r4, r0
 8007ef8:	428b      	cmp	r3, r1
 8007efa:	bf04      	itt	eq
 8007efc:	6819      	ldreq	r1, [r3, #0]
 8007efe:	685b      	ldreq	r3, [r3, #4]
 8007f00:	6063      	str	r3, [r4, #4]
 8007f02:	bf04      	itt	eq
 8007f04:	1809      	addeq	r1, r1, r0
 8007f06:	6021      	streq	r1, [r4, #0]
 8007f08:	6054      	str	r4, [r2, #4]
 8007f0a:	e7ca      	b.n	8007ea2 <_free_r+0x22>
 8007f0c:	bd38      	pop	{r3, r4, r5, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000aa0 	.word	0x20000aa0

08007f14 <_Balloc>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	69c6      	ldr	r6, [r0, #28]
 8007f18:	4604      	mov	r4, r0
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	b976      	cbnz	r6, 8007f3c <_Balloc+0x28>
 8007f1e:	2010      	movs	r0, #16
 8007f20:	f7fe fa54 	bl	80063cc <malloc>
 8007f24:	4602      	mov	r2, r0
 8007f26:	61e0      	str	r0, [r4, #28]
 8007f28:	b920      	cbnz	r0, 8007f34 <_Balloc+0x20>
 8007f2a:	4b18      	ldr	r3, [pc, #96]	@ (8007f8c <_Balloc+0x78>)
 8007f2c:	4818      	ldr	r0, [pc, #96]	@ (8007f90 <_Balloc+0x7c>)
 8007f2e:	216b      	movs	r1, #107	@ 0x6b
 8007f30:	f000 fd90 	bl	8008a54 <__assert_func>
 8007f34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f38:	6006      	str	r6, [r0, #0]
 8007f3a:	60c6      	str	r6, [r0, #12]
 8007f3c:	69e6      	ldr	r6, [r4, #28]
 8007f3e:	68f3      	ldr	r3, [r6, #12]
 8007f40:	b183      	cbz	r3, 8007f64 <_Balloc+0x50>
 8007f42:	69e3      	ldr	r3, [r4, #28]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f4a:	b9b8      	cbnz	r0, 8007f7c <_Balloc+0x68>
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	fa01 f605 	lsl.w	r6, r1, r5
 8007f52:	1d72      	adds	r2, r6, #5
 8007f54:	0092      	lsls	r2, r2, #2
 8007f56:	4620      	mov	r0, r4
 8007f58:	f000 fd9a 	bl	8008a90 <_calloc_r>
 8007f5c:	b160      	cbz	r0, 8007f78 <_Balloc+0x64>
 8007f5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f62:	e00e      	b.n	8007f82 <_Balloc+0x6e>
 8007f64:	2221      	movs	r2, #33	@ 0x21
 8007f66:	2104      	movs	r1, #4
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 fd91 	bl	8008a90 <_calloc_r>
 8007f6e:	69e3      	ldr	r3, [r4, #28]
 8007f70:	60f0      	str	r0, [r6, #12]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e4      	bne.n	8007f42 <_Balloc+0x2e>
 8007f78:	2000      	movs	r0, #0
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	6802      	ldr	r2, [r0, #0]
 8007f7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f82:	2300      	movs	r3, #0
 8007f84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f88:	e7f7      	b.n	8007f7a <_Balloc+0x66>
 8007f8a:	bf00      	nop
 8007f8c:	08009769 	.word	0x08009769
 8007f90:	080097e9 	.word	0x080097e9

08007f94 <_Bfree>:
 8007f94:	b570      	push	{r4, r5, r6, lr}
 8007f96:	69c6      	ldr	r6, [r0, #28]
 8007f98:	4605      	mov	r5, r0
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	b976      	cbnz	r6, 8007fbc <_Bfree+0x28>
 8007f9e:	2010      	movs	r0, #16
 8007fa0:	f7fe fa14 	bl	80063cc <malloc>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	61e8      	str	r0, [r5, #28]
 8007fa8:	b920      	cbnz	r0, 8007fb4 <_Bfree+0x20>
 8007faa:	4b09      	ldr	r3, [pc, #36]	@ (8007fd0 <_Bfree+0x3c>)
 8007fac:	4809      	ldr	r0, [pc, #36]	@ (8007fd4 <_Bfree+0x40>)
 8007fae:	218f      	movs	r1, #143	@ 0x8f
 8007fb0:	f000 fd50 	bl	8008a54 <__assert_func>
 8007fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fb8:	6006      	str	r6, [r0, #0]
 8007fba:	60c6      	str	r6, [r0, #12]
 8007fbc:	b13c      	cbz	r4, 8007fce <_Bfree+0x3a>
 8007fbe:	69eb      	ldr	r3, [r5, #28]
 8007fc0:	6862      	ldr	r2, [r4, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fc8:	6021      	str	r1, [r4, #0]
 8007fca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fce:	bd70      	pop	{r4, r5, r6, pc}
 8007fd0:	08009769 	.word	0x08009769
 8007fd4:	080097e9 	.word	0x080097e9

08007fd8 <__multadd>:
 8007fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fdc:	690d      	ldr	r5, [r1, #16]
 8007fde:	4607      	mov	r7, r0
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	461e      	mov	r6, r3
 8007fe4:	f101 0c14 	add.w	ip, r1, #20
 8007fe8:	2000      	movs	r0, #0
 8007fea:	f8dc 3000 	ldr.w	r3, [ip]
 8007fee:	b299      	uxth	r1, r3
 8007ff0:	fb02 6101 	mla	r1, r2, r1, r6
 8007ff4:	0c1e      	lsrs	r6, r3, #16
 8007ff6:	0c0b      	lsrs	r3, r1, #16
 8007ff8:	fb02 3306 	mla	r3, r2, r6, r3
 8007ffc:	b289      	uxth	r1, r1
 8007ffe:	3001      	adds	r0, #1
 8008000:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008004:	4285      	cmp	r5, r0
 8008006:	f84c 1b04 	str.w	r1, [ip], #4
 800800a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800800e:	dcec      	bgt.n	8007fea <__multadd+0x12>
 8008010:	b30e      	cbz	r6, 8008056 <__multadd+0x7e>
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	42ab      	cmp	r3, r5
 8008016:	dc19      	bgt.n	800804c <__multadd+0x74>
 8008018:	6861      	ldr	r1, [r4, #4]
 800801a:	4638      	mov	r0, r7
 800801c:	3101      	adds	r1, #1
 800801e:	f7ff ff79 	bl	8007f14 <_Balloc>
 8008022:	4680      	mov	r8, r0
 8008024:	b928      	cbnz	r0, 8008032 <__multadd+0x5a>
 8008026:	4602      	mov	r2, r0
 8008028:	4b0c      	ldr	r3, [pc, #48]	@ (800805c <__multadd+0x84>)
 800802a:	480d      	ldr	r0, [pc, #52]	@ (8008060 <__multadd+0x88>)
 800802c:	21ba      	movs	r1, #186	@ 0xba
 800802e:	f000 fd11 	bl	8008a54 <__assert_func>
 8008032:	6922      	ldr	r2, [r4, #16]
 8008034:	3202      	adds	r2, #2
 8008036:	f104 010c 	add.w	r1, r4, #12
 800803a:	0092      	lsls	r2, r2, #2
 800803c:	300c      	adds	r0, #12
 800803e:	f7ff f8b6 	bl	80071ae <memcpy>
 8008042:	4621      	mov	r1, r4
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff ffa5 	bl	8007f94 <_Bfree>
 800804a:	4644      	mov	r4, r8
 800804c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008050:	3501      	adds	r5, #1
 8008052:	615e      	str	r6, [r3, #20]
 8008054:	6125      	str	r5, [r4, #16]
 8008056:	4620      	mov	r0, r4
 8008058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800805c:	080097d8 	.word	0x080097d8
 8008060:	080097e9 	.word	0x080097e9

08008064 <__hi0bits>:
 8008064:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008068:	4603      	mov	r3, r0
 800806a:	bf36      	itet	cc
 800806c:	0403      	lslcc	r3, r0, #16
 800806e:	2000      	movcs	r0, #0
 8008070:	2010      	movcc	r0, #16
 8008072:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008076:	bf3c      	itt	cc
 8008078:	021b      	lslcc	r3, r3, #8
 800807a:	3008      	addcc	r0, #8
 800807c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008080:	bf3c      	itt	cc
 8008082:	011b      	lslcc	r3, r3, #4
 8008084:	3004      	addcc	r0, #4
 8008086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800808a:	bf3c      	itt	cc
 800808c:	009b      	lslcc	r3, r3, #2
 800808e:	3002      	addcc	r0, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	db05      	blt.n	80080a0 <__hi0bits+0x3c>
 8008094:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008098:	f100 0001 	add.w	r0, r0, #1
 800809c:	bf08      	it	eq
 800809e:	2020      	moveq	r0, #32
 80080a0:	4770      	bx	lr

080080a2 <__lo0bits>:
 80080a2:	6803      	ldr	r3, [r0, #0]
 80080a4:	4602      	mov	r2, r0
 80080a6:	f013 0007 	ands.w	r0, r3, #7
 80080aa:	d00b      	beq.n	80080c4 <__lo0bits+0x22>
 80080ac:	07d9      	lsls	r1, r3, #31
 80080ae:	d421      	bmi.n	80080f4 <__lo0bits+0x52>
 80080b0:	0798      	lsls	r0, r3, #30
 80080b2:	bf49      	itett	mi
 80080b4:	085b      	lsrmi	r3, r3, #1
 80080b6:	089b      	lsrpl	r3, r3, #2
 80080b8:	2001      	movmi	r0, #1
 80080ba:	6013      	strmi	r3, [r2, #0]
 80080bc:	bf5c      	itt	pl
 80080be:	6013      	strpl	r3, [r2, #0]
 80080c0:	2002      	movpl	r0, #2
 80080c2:	4770      	bx	lr
 80080c4:	b299      	uxth	r1, r3
 80080c6:	b909      	cbnz	r1, 80080cc <__lo0bits+0x2a>
 80080c8:	0c1b      	lsrs	r3, r3, #16
 80080ca:	2010      	movs	r0, #16
 80080cc:	b2d9      	uxtb	r1, r3
 80080ce:	b909      	cbnz	r1, 80080d4 <__lo0bits+0x32>
 80080d0:	3008      	adds	r0, #8
 80080d2:	0a1b      	lsrs	r3, r3, #8
 80080d4:	0719      	lsls	r1, r3, #28
 80080d6:	bf04      	itt	eq
 80080d8:	091b      	lsreq	r3, r3, #4
 80080da:	3004      	addeq	r0, #4
 80080dc:	0799      	lsls	r1, r3, #30
 80080de:	bf04      	itt	eq
 80080e0:	089b      	lsreq	r3, r3, #2
 80080e2:	3002      	addeq	r0, #2
 80080e4:	07d9      	lsls	r1, r3, #31
 80080e6:	d403      	bmi.n	80080f0 <__lo0bits+0x4e>
 80080e8:	085b      	lsrs	r3, r3, #1
 80080ea:	f100 0001 	add.w	r0, r0, #1
 80080ee:	d003      	beq.n	80080f8 <__lo0bits+0x56>
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	4770      	bx	lr
 80080f4:	2000      	movs	r0, #0
 80080f6:	4770      	bx	lr
 80080f8:	2020      	movs	r0, #32
 80080fa:	4770      	bx	lr

080080fc <__i2b>:
 80080fc:	b510      	push	{r4, lr}
 80080fe:	460c      	mov	r4, r1
 8008100:	2101      	movs	r1, #1
 8008102:	f7ff ff07 	bl	8007f14 <_Balloc>
 8008106:	4602      	mov	r2, r0
 8008108:	b928      	cbnz	r0, 8008116 <__i2b+0x1a>
 800810a:	4b05      	ldr	r3, [pc, #20]	@ (8008120 <__i2b+0x24>)
 800810c:	4805      	ldr	r0, [pc, #20]	@ (8008124 <__i2b+0x28>)
 800810e:	f240 1145 	movw	r1, #325	@ 0x145
 8008112:	f000 fc9f 	bl	8008a54 <__assert_func>
 8008116:	2301      	movs	r3, #1
 8008118:	6144      	str	r4, [r0, #20]
 800811a:	6103      	str	r3, [r0, #16]
 800811c:	bd10      	pop	{r4, pc}
 800811e:	bf00      	nop
 8008120:	080097d8 	.word	0x080097d8
 8008124:	080097e9 	.word	0x080097e9

08008128 <__multiply>:
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	4617      	mov	r7, r2
 800812e:	690a      	ldr	r2, [r1, #16]
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	429a      	cmp	r2, r3
 8008134:	bfa8      	it	ge
 8008136:	463b      	movge	r3, r7
 8008138:	4689      	mov	r9, r1
 800813a:	bfa4      	itt	ge
 800813c:	460f      	movge	r7, r1
 800813e:	4699      	movge	r9, r3
 8008140:	693d      	ldr	r5, [r7, #16]
 8008142:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	eb05 060a 	add.w	r6, r5, sl
 800814e:	42b3      	cmp	r3, r6
 8008150:	b085      	sub	sp, #20
 8008152:	bfb8      	it	lt
 8008154:	3101      	addlt	r1, #1
 8008156:	f7ff fedd 	bl	8007f14 <_Balloc>
 800815a:	b930      	cbnz	r0, 800816a <__multiply+0x42>
 800815c:	4602      	mov	r2, r0
 800815e:	4b41      	ldr	r3, [pc, #260]	@ (8008264 <__multiply+0x13c>)
 8008160:	4841      	ldr	r0, [pc, #260]	@ (8008268 <__multiply+0x140>)
 8008162:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008166:	f000 fc75 	bl	8008a54 <__assert_func>
 800816a:	f100 0414 	add.w	r4, r0, #20
 800816e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008172:	4623      	mov	r3, r4
 8008174:	2200      	movs	r2, #0
 8008176:	4573      	cmp	r3, lr
 8008178:	d320      	bcc.n	80081bc <__multiply+0x94>
 800817a:	f107 0814 	add.w	r8, r7, #20
 800817e:	f109 0114 	add.w	r1, r9, #20
 8008182:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008186:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800818a:	9302      	str	r3, [sp, #8]
 800818c:	1beb      	subs	r3, r5, r7
 800818e:	3b15      	subs	r3, #21
 8008190:	f023 0303 	bic.w	r3, r3, #3
 8008194:	3304      	adds	r3, #4
 8008196:	3715      	adds	r7, #21
 8008198:	42bd      	cmp	r5, r7
 800819a:	bf38      	it	cc
 800819c:	2304      	movcc	r3, #4
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	9b02      	ldr	r3, [sp, #8]
 80081a2:	9103      	str	r1, [sp, #12]
 80081a4:	428b      	cmp	r3, r1
 80081a6:	d80c      	bhi.n	80081c2 <__multiply+0x9a>
 80081a8:	2e00      	cmp	r6, #0
 80081aa:	dd03      	ble.n	80081b4 <__multiply+0x8c>
 80081ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d055      	beq.n	8008260 <__multiply+0x138>
 80081b4:	6106      	str	r6, [r0, #16]
 80081b6:	b005      	add	sp, #20
 80081b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081bc:	f843 2b04 	str.w	r2, [r3], #4
 80081c0:	e7d9      	b.n	8008176 <__multiply+0x4e>
 80081c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80081c6:	f1ba 0f00 	cmp.w	sl, #0
 80081ca:	d01f      	beq.n	800820c <__multiply+0xe4>
 80081cc:	46c4      	mov	ip, r8
 80081ce:	46a1      	mov	r9, r4
 80081d0:	2700      	movs	r7, #0
 80081d2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80081d6:	f8d9 3000 	ldr.w	r3, [r9]
 80081da:	fa1f fb82 	uxth.w	fp, r2
 80081de:	b29b      	uxth	r3, r3
 80081e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80081e4:	443b      	add	r3, r7
 80081e6:	f8d9 7000 	ldr.w	r7, [r9]
 80081ea:	0c12      	lsrs	r2, r2, #16
 80081ec:	0c3f      	lsrs	r7, r7, #16
 80081ee:	fb0a 7202 	mla	r2, sl, r2, r7
 80081f2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081fc:	4565      	cmp	r5, ip
 80081fe:	f849 3b04 	str.w	r3, [r9], #4
 8008202:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008206:	d8e4      	bhi.n	80081d2 <__multiply+0xaa>
 8008208:	9b01      	ldr	r3, [sp, #4]
 800820a:	50e7      	str	r7, [r4, r3]
 800820c:	9b03      	ldr	r3, [sp, #12]
 800820e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008212:	3104      	adds	r1, #4
 8008214:	f1b9 0f00 	cmp.w	r9, #0
 8008218:	d020      	beq.n	800825c <__multiply+0x134>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	4647      	mov	r7, r8
 800821e:	46a4      	mov	ip, r4
 8008220:	f04f 0a00 	mov.w	sl, #0
 8008224:	f8b7 b000 	ldrh.w	fp, [r7]
 8008228:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800822c:	fb09 220b 	mla	r2, r9, fp, r2
 8008230:	4452      	add	r2, sl
 8008232:	b29b      	uxth	r3, r3
 8008234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008238:	f84c 3b04 	str.w	r3, [ip], #4
 800823c:	f857 3b04 	ldr.w	r3, [r7], #4
 8008240:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008244:	f8bc 3000 	ldrh.w	r3, [ip]
 8008248:	fb09 330a 	mla	r3, r9, sl, r3
 800824c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008250:	42bd      	cmp	r5, r7
 8008252:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008256:	d8e5      	bhi.n	8008224 <__multiply+0xfc>
 8008258:	9a01      	ldr	r2, [sp, #4]
 800825a:	50a3      	str	r3, [r4, r2]
 800825c:	3404      	adds	r4, #4
 800825e:	e79f      	b.n	80081a0 <__multiply+0x78>
 8008260:	3e01      	subs	r6, #1
 8008262:	e7a1      	b.n	80081a8 <__multiply+0x80>
 8008264:	080097d8 	.word	0x080097d8
 8008268:	080097e9 	.word	0x080097e9

0800826c <__pow5mult>:
 800826c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008270:	4615      	mov	r5, r2
 8008272:	f012 0203 	ands.w	r2, r2, #3
 8008276:	4607      	mov	r7, r0
 8008278:	460e      	mov	r6, r1
 800827a:	d007      	beq.n	800828c <__pow5mult+0x20>
 800827c:	4c25      	ldr	r4, [pc, #148]	@ (8008314 <__pow5mult+0xa8>)
 800827e:	3a01      	subs	r2, #1
 8008280:	2300      	movs	r3, #0
 8008282:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008286:	f7ff fea7 	bl	8007fd8 <__multadd>
 800828a:	4606      	mov	r6, r0
 800828c:	10ad      	asrs	r5, r5, #2
 800828e:	d03d      	beq.n	800830c <__pow5mult+0xa0>
 8008290:	69fc      	ldr	r4, [r7, #28]
 8008292:	b97c      	cbnz	r4, 80082b4 <__pow5mult+0x48>
 8008294:	2010      	movs	r0, #16
 8008296:	f7fe f899 	bl	80063cc <malloc>
 800829a:	4602      	mov	r2, r0
 800829c:	61f8      	str	r0, [r7, #28]
 800829e:	b928      	cbnz	r0, 80082ac <__pow5mult+0x40>
 80082a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008318 <__pow5mult+0xac>)
 80082a2:	481e      	ldr	r0, [pc, #120]	@ (800831c <__pow5mult+0xb0>)
 80082a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082a8:	f000 fbd4 	bl	8008a54 <__assert_func>
 80082ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082b0:	6004      	str	r4, [r0, #0]
 80082b2:	60c4      	str	r4, [r0, #12]
 80082b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082bc:	b94c      	cbnz	r4, 80082d2 <__pow5mult+0x66>
 80082be:	f240 2171 	movw	r1, #625	@ 0x271
 80082c2:	4638      	mov	r0, r7
 80082c4:	f7ff ff1a 	bl	80080fc <__i2b>
 80082c8:	2300      	movs	r3, #0
 80082ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80082ce:	4604      	mov	r4, r0
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	f04f 0900 	mov.w	r9, #0
 80082d6:	07eb      	lsls	r3, r5, #31
 80082d8:	d50a      	bpl.n	80082f0 <__pow5mult+0x84>
 80082da:	4631      	mov	r1, r6
 80082dc:	4622      	mov	r2, r4
 80082de:	4638      	mov	r0, r7
 80082e0:	f7ff ff22 	bl	8008128 <__multiply>
 80082e4:	4631      	mov	r1, r6
 80082e6:	4680      	mov	r8, r0
 80082e8:	4638      	mov	r0, r7
 80082ea:	f7ff fe53 	bl	8007f94 <_Bfree>
 80082ee:	4646      	mov	r6, r8
 80082f0:	106d      	asrs	r5, r5, #1
 80082f2:	d00b      	beq.n	800830c <__pow5mult+0xa0>
 80082f4:	6820      	ldr	r0, [r4, #0]
 80082f6:	b938      	cbnz	r0, 8008308 <__pow5mult+0x9c>
 80082f8:	4622      	mov	r2, r4
 80082fa:	4621      	mov	r1, r4
 80082fc:	4638      	mov	r0, r7
 80082fe:	f7ff ff13 	bl	8008128 <__multiply>
 8008302:	6020      	str	r0, [r4, #0]
 8008304:	f8c0 9000 	str.w	r9, [r0]
 8008308:	4604      	mov	r4, r0
 800830a:	e7e4      	b.n	80082d6 <__pow5mult+0x6a>
 800830c:	4630      	mov	r0, r6
 800830e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008312:	bf00      	nop
 8008314:	0800989c 	.word	0x0800989c
 8008318:	08009769 	.word	0x08009769
 800831c:	080097e9 	.word	0x080097e9

08008320 <__lshift>:
 8008320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008324:	460c      	mov	r4, r1
 8008326:	6849      	ldr	r1, [r1, #4]
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800832e:	68a3      	ldr	r3, [r4, #8]
 8008330:	4607      	mov	r7, r0
 8008332:	4691      	mov	r9, r2
 8008334:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008338:	f108 0601 	add.w	r6, r8, #1
 800833c:	42b3      	cmp	r3, r6
 800833e:	db0b      	blt.n	8008358 <__lshift+0x38>
 8008340:	4638      	mov	r0, r7
 8008342:	f7ff fde7 	bl	8007f14 <_Balloc>
 8008346:	4605      	mov	r5, r0
 8008348:	b948      	cbnz	r0, 800835e <__lshift+0x3e>
 800834a:	4602      	mov	r2, r0
 800834c:	4b28      	ldr	r3, [pc, #160]	@ (80083f0 <__lshift+0xd0>)
 800834e:	4829      	ldr	r0, [pc, #164]	@ (80083f4 <__lshift+0xd4>)
 8008350:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008354:	f000 fb7e 	bl	8008a54 <__assert_func>
 8008358:	3101      	adds	r1, #1
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	e7ee      	b.n	800833c <__lshift+0x1c>
 800835e:	2300      	movs	r3, #0
 8008360:	f100 0114 	add.w	r1, r0, #20
 8008364:	f100 0210 	add.w	r2, r0, #16
 8008368:	4618      	mov	r0, r3
 800836a:	4553      	cmp	r3, sl
 800836c:	db33      	blt.n	80083d6 <__lshift+0xb6>
 800836e:	6920      	ldr	r0, [r4, #16]
 8008370:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008374:	f104 0314 	add.w	r3, r4, #20
 8008378:	f019 091f 	ands.w	r9, r9, #31
 800837c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008380:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008384:	d02b      	beq.n	80083de <__lshift+0xbe>
 8008386:	f1c9 0e20 	rsb	lr, r9, #32
 800838a:	468a      	mov	sl, r1
 800838c:	2200      	movs	r2, #0
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	fa00 f009 	lsl.w	r0, r0, r9
 8008394:	4310      	orrs	r0, r2
 8008396:	f84a 0b04 	str.w	r0, [sl], #4
 800839a:	f853 2b04 	ldr.w	r2, [r3], #4
 800839e:	459c      	cmp	ip, r3
 80083a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80083a4:	d8f3      	bhi.n	800838e <__lshift+0x6e>
 80083a6:	ebac 0304 	sub.w	r3, ip, r4
 80083aa:	3b15      	subs	r3, #21
 80083ac:	f023 0303 	bic.w	r3, r3, #3
 80083b0:	3304      	adds	r3, #4
 80083b2:	f104 0015 	add.w	r0, r4, #21
 80083b6:	4560      	cmp	r0, ip
 80083b8:	bf88      	it	hi
 80083ba:	2304      	movhi	r3, #4
 80083bc:	50ca      	str	r2, [r1, r3]
 80083be:	b10a      	cbz	r2, 80083c4 <__lshift+0xa4>
 80083c0:	f108 0602 	add.w	r6, r8, #2
 80083c4:	3e01      	subs	r6, #1
 80083c6:	4638      	mov	r0, r7
 80083c8:	612e      	str	r6, [r5, #16]
 80083ca:	4621      	mov	r1, r4
 80083cc:	f7ff fde2 	bl	8007f94 <_Bfree>
 80083d0:	4628      	mov	r0, r5
 80083d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80083da:	3301      	adds	r3, #1
 80083dc:	e7c5      	b.n	800836a <__lshift+0x4a>
 80083de:	3904      	subs	r1, #4
 80083e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80083e8:	459c      	cmp	ip, r3
 80083ea:	d8f9      	bhi.n	80083e0 <__lshift+0xc0>
 80083ec:	e7ea      	b.n	80083c4 <__lshift+0xa4>
 80083ee:	bf00      	nop
 80083f0:	080097d8 	.word	0x080097d8
 80083f4:	080097e9 	.word	0x080097e9

080083f8 <__mcmp>:
 80083f8:	690a      	ldr	r2, [r1, #16]
 80083fa:	4603      	mov	r3, r0
 80083fc:	6900      	ldr	r0, [r0, #16]
 80083fe:	1a80      	subs	r0, r0, r2
 8008400:	b530      	push	{r4, r5, lr}
 8008402:	d10e      	bne.n	8008422 <__mcmp+0x2a>
 8008404:	3314      	adds	r3, #20
 8008406:	3114      	adds	r1, #20
 8008408:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800840c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008410:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008414:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008418:	4295      	cmp	r5, r2
 800841a:	d003      	beq.n	8008424 <__mcmp+0x2c>
 800841c:	d205      	bcs.n	800842a <__mcmp+0x32>
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	bd30      	pop	{r4, r5, pc}
 8008424:	42a3      	cmp	r3, r4
 8008426:	d3f3      	bcc.n	8008410 <__mcmp+0x18>
 8008428:	e7fb      	b.n	8008422 <__mcmp+0x2a>
 800842a:	2001      	movs	r0, #1
 800842c:	e7f9      	b.n	8008422 <__mcmp+0x2a>
	...

08008430 <__mdiff>:
 8008430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	4689      	mov	r9, r1
 8008436:	4606      	mov	r6, r0
 8008438:	4611      	mov	r1, r2
 800843a:	4648      	mov	r0, r9
 800843c:	4614      	mov	r4, r2
 800843e:	f7ff ffdb 	bl	80083f8 <__mcmp>
 8008442:	1e05      	subs	r5, r0, #0
 8008444:	d112      	bne.n	800846c <__mdiff+0x3c>
 8008446:	4629      	mov	r1, r5
 8008448:	4630      	mov	r0, r6
 800844a:	f7ff fd63 	bl	8007f14 <_Balloc>
 800844e:	4602      	mov	r2, r0
 8008450:	b928      	cbnz	r0, 800845e <__mdiff+0x2e>
 8008452:	4b3f      	ldr	r3, [pc, #252]	@ (8008550 <__mdiff+0x120>)
 8008454:	f240 2137 	movw	r1, #567	@ 0x237
 8008458:	483e      	ldr	r0, [pc, #248]	@ (8008554 <__mdiff+0x124>)
 800845a:	f000 fafb 	bl	8008a54 <__assert_func>
 800845e:	2301      	movs	r3, #1
 8008460:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008464:	4610      	mov	r0, r2
 8008466:	b003      	add	sp, #12
 8008468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846c:	bfbc      	itt	lt
 800846e:	464b      	movlt	r3, r9
 8008470:	46a1      	movlt	r9, r4
 8008472:	4630      	mov	r0, r6
 8008474:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008478:	bfba      	itte	lt
 800847a:	461c      	movlt	r4, r3
 800847c:	2501      	movlt	r5, #1
 800847e:	2500      	movge	r5, #0
 8008480:	f7ff fd48 	bl	8007f14 <_Balloc>
 8008484:	4602      	mov	r2, r0
 8008486:	b918      	cbnz	r0, 8008490 <__mdiff+0x60>
 8008488:	4b31      	ldr	r3, [pc, #196]	@ (8008550 <__mdiff+0x120>)
 800848a:	f240 2145 	movw	r1, #581	@ 0x245
 800848e:	e7e3      	b.n	8008458 <__mdiff+0x28>
 8008490:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008494:	6926      	ldr	r6, [r4, #16]
 8008496:	60c5      	str	r5, [r0, #12]
 8008498:	f109 0310 	add.w	r3, r9, #16
 800849c:	f109 0514 	add.w	r5, r9, #20
 80084a0:	f104 0e14 	add.w	lr, r4, #20
 80084a4:	f100 0b14 	add.w	fp, r0, #20
 80084a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	46d9      	mov	r9, fp
 80084b4:	f04f 0c00 	mov.w	ip, #0
 80084b8:	9b01      	ldr	r3, [sp, #4]
 80084ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	fa1f f38a 	uxth.w	r3, sl
 80084c8:	4619      	mov	r1, r3
 80084ca:	b283      	uxth	r3, r0
 80084cc:	1acb      	subs	r3, r1, r3
 80084ce:	0c00      	lsrs	r0, r0, #16
 80084d0:	4463      	add	r3, ip
 80084d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80084d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80084da:	b29b      	uxth	r3, r3
 80084dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80084e0:	4576      	cmp	r6, lr
 80084e2:	f849 3b04 	str.w	r3, [r9], #4
 80084e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084ea:	d8e5      	bhi.n	80084b8 <__mdiff+0x88>
 80084ec:	1b33      	subs	r3, r6, r4
 80084ee:	3b15      	subs	r3, #21
 80084f0:	f023 0303 	bic.w	r3, r3, #3
 80084f4:	3415      	adds	r4, #21
 80084f6:	3304      	adds	r3, #4
 80084f8:	42a6      	cmp	r6, r4
 80084fa:	bf38      	it	cc
 80084fc:	2304      	movcc	r3, #4
 80084fe:	441d      	add	r5, r3
 8008500:	445b      	add	r3, fp
 8008502:	461e      	mov	r6, r3
 8008504:	462c      	mov	r4, r5
 8008506:	4544      	cmp	r4, r8
 8008508:	d30e      	bcc.n	8008528 <__mdiff+0xf8>
 800850a:	f108 0103 	add.w	r1, r8, #3
 800850e:	1b49      	subs	r1, r1, r5
 8008510:	f021 0103 	bic.w	r1, r1, #3
 8008514:	3d03      	subs	r5, #3
 8008516:	45a8      	cmp	r8, r5
 8008518:	bf38      	it	cc
 800851a:	2100      	movcc	r1, #0
 800851c:	440b      	add	r3, r1
 800851e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008522:	b191      	cbz	r1, 800854a <__mdiff+0x11a>
 8008524:	6117      	str	r7, [r2, #16]
 8008526:	e79d      	b.n	8008464 <__mdiff+0x34>
 8008528:	f854 1b04 	ldr.w	r1, [r4], #4
 800852c:	46e6      	mov	lr, ip
 800852e:	0c08      	lsrs	r0, r1, #16
 8008530:	fa1c fc81 	uxtah	ip, ip, r1
 8008534:	4471      	add	r1, lr
 8008536:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800853a:	b289      	uxth	r1, r1
 800853c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008540:	f846 1b04 	str.w	r1, [r6], #4
 8008544:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008548:	e7dd      	b.n	8008506 <__mdiff+0xd6>
 800854a:	3f01      	subs	r7, #1
 800854c:	e7e7      	b.n	800851e <__mdiff+0xee>
 800854e:	bf00      	nop
 8008550:	080097d8 	.word	0x080097d8
 8008554:	080097e9 	.word	0x080097e9

08008558 <__d2b>:
 8008558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800855c:	460f      	mov	r7, r1
 800855e:	2101      	movs	r1, #1
 8008560:	ec59 8b10 	vmov	r8, r9, d0
 8008564:	4616      	mov	r6, r2
 8008566:	f7ff fcd5 	bl	8007f14 <_Balloc>
 800856a:	4604      	mov	r4, r0
 800856c:	b930      	cbnz	r0, 800857c <__d2b+0x24>
 800856e:	4602      	mov	r2, r0
 8008570:	4b23      	ldr	r3, [pc, #140]	@ (8008600 <__d2b+0xa8>)
 8008572:	4824      	ldr	r0, [pc, #144]	@ (8008604 <__d2b+0xac>)
 8008574:	f240 310f 	movw	r1, #783	@ 0x30f
 8008578:	f000 fa6c 	bl	8008a54 <__assert_func>
 800857c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008580:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008584:	b10d      	cbz	r5, 800858a <__d2b+0x32>
 8008586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	f1b8 0300 	subs.w	r3, r8, #0
 8008590:	d023      	beq.n	80085da <__d2b+0x82>
 8008592:	4668      	mov	r0, sp
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	f7ff fd84 	bl	80080a2 <__lo0bits>
 800859a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800859e:	b1d0      	cbz	r0, 80085d6 <__d2b+0x7e>
 80085a0:	f1c0 0320 	rsb	r3, r0, #32
 80085a4:	fa02 f303 	lsl.w	r3, r2, r3
 80085a8:	430b      	orrs	r3, r1
 80085aa:	40c2      	lsrs	r2, r0
 80085ac:	6163      	str	r3, [r4, #20]
 80085ae:	9201      	str	r2, [sp, #4]
 80085b0:	9b01      	ldr	r3, [sp, #4]
 80085b2:	61a3      	str	r3, [r4, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	bf0c      	ite	eq
 80085b8:	2201      	moveq	r2, #1
 80085ba:	2202      	movne	r2, #2
 80085bc:	6122      	str	r2, [r4, #16]
 80085be:	b1a5      	cbz	r5, 80085ea <__d2b+0x92>
 80085c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80085c4:	4405      	add	r5, r0
 80085c6:	603d      	str	r5, [r7, #0]
 80085c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80085cc:	6030      	str	r0, [r6, #0]
 80085ce:	4620      	mov	r0, r4
 80085d0:	b003      	add	sp, #12
 80085d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085d6:	6161      	str	r1, [r4, #20]
 80085d8:	e7ea      	b.n	80085b0 <__d2b+0x58>
 80085da:	a801      	add	r0, sp, #4
 80085dc:	f7ff fd61 	bl	80080a2 <__lo0bits>
 80085e0:	9b01      	ldr	r3, [sp, #4]
 80085e2:	6163      	str	r3, [r4, #20]
 80085e4:	3020      	adds	r0, #32
 80085e6:	2201      	movs	r2, #1
 80085e8:	e7e8      	b.n	80085bc <__d2b+0x64>
 80085ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80085f2:	6038      	str	r0, [r7, #0]
 80085f4:	6918      	ldr	r0, [r3, #16]
 80085f6:	f7ff fd35 	bl	8008064 <__hi0bits>
 80085fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085fe:	e7e5      	b.n	80085cc <__d2b+0x74>
 8008600:	080097d8 	.word	0x080097d8
 8008604:	080097e9 	.word	0x080097e9

08008608 <_malloc_usable_size_r>:
 8008608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800860c:	1f18      	subs	r0, r3, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	bfbc      	itt	lt
 8008612:	580b      	ldrlt	r3, [r1, r0]
 8008614:	18c0      	addlt	r0, r0, r3
 8008616:	4770      	bx	lr

08008618 <__ssputs_r>:
 8008618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	688e      	ldr	r6, [r1, #8]
 800861e:	461f      	mov	r7, r3
 8008620:	42be      	cmp	r6, r7
 8008622:	680b      	ldr	r3, [r1, #0]
 8008624:	4682      	mov	sl, r0
 8008626:	460c      	mov	r4, r1
 8008628:	4690      	mov	r8, r2
 800862a:	d82d      	bhi.n	8008688 <__ssputs_r+0x70>
 800862c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008630:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008634:	d026      	beq.n	8008684 <__ssputs_r+0x6c>
 8008636:	6965      	ldr	r5, [r4, #20]
 8008638:	6909      	ldr	r1, [r1, #16]
 800863a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800863e:	eba3 0901 	sub.w	r9, r3, r1
 8008642:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008646:	1c7b      	adds	r3, r7, #1
 8008648:	444b      	add	r3, r9
 800864a:	106d      	asrs	r5, r5, #1
 800864c:	429d      	cmp	r5, r3
 800864e:	bf38      	it	cc
 8008650:	461d      	movcc	r5, r3
 8008652:	0553      	lsls	r3, r2, #21
 8008654:	d527      	bpl.n	80086a6 <__ssputs_r+0x8e>
 8008656:	4629      	mov	r1, r5
 8008658:	f7fd fee2 	bl	8006420 <_malloc_r>
 800865c:	4606      	mov	r6, r0
 800865e:	b360      	cbz	r0, 80086ba <__ssputs_r+0xa2>
 8008660:	6921      	ldr	r1, [r4, #16]
 8008662:	464a      	mov	r2, r9
 8008664:	f7fe fda3 	bl	80071ae <memcpy>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800866e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	6126      	str	r6, [r4, #16]
 8008676:	6165      	str	r5, [r4, #20]
 8008678:	444e      	add	r6, r9
 800867a:	eba5 0509 	sub.w	r5, r5, r9
 800867e:	6026      	str	r6, [r4, #0]
 8008680:	60a5      	str	r5, [r4, #8]
 8008682:	463e      	mov	r6, r7
 8008684:	42be      	cmp	r6, r7
 8008686:	d900      	bls.n	800868a <__ssputs_r+0x72>
 8008688:	463e      	mov	r6, r7
 800868a:	6820      	ldr	r0, [r4, #0]
 800868c:	4632      	mov	r2, r6
 800868e:	4641      	mov	r1, r8
 8008690:	f000 f9c6 	bl	8008a20 <memmove>
 8008694:	68a3      	ldr	r3, [r4, #8]
 8008696:	1b9b      	subs	r3, r3, r6
 8008698:	60a3      	str	r3, [r4, #8]
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	4433      	add	r3, r6
 800869e:	6023      	str	r3, [r4, #0]
 80086a0:	2000      	movs	r0, #0
 80086a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086a6:	462a      	mov	r2, r5
 80086a8:	f7fd ff46 	bl	8006538 <_realloc_r>
 80086ac:	4606      	mov	r6, r0
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d1e0      	bne.n	8008674 <__ssputs_r+0x5c>
 80086b2:	6921      	ldr	r1, [r4, #16]
 80086b4:	4650      	mov	r0, sl
 80086b6:	f7ff fbe3 	bl	8007e80 <_free_r>
 80086ba:	230c      	movs	r3, #12
 80086bc:	f8ca 3000 	str.w	r3, [sl]
 80086c0:	89a3      	ldrh	r3, [r4, #12]
 80086c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086c6:	81a3      	strh	r3, [r4, #12]
 80086c8:	f04f 30ff 	mov.w	r0, #4294967295
 80086cc:	e7e9      	b.n	80086a2 <__ssputs_r+0x8a>
	...

080086d0 <_svfiprintf_r>:
 80086d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d4:	4698      	mov	r8, r3
 80086d6:	898b      	ldrh	r3, [r1, #12]
 80086d8:	061b      	lsls	r3, r3, #24
 80086da:	b09d      	sub	sp, #116	@ 0x74
 80086dc:	4607      	mov	r7, r0
 80086de:	460d      	mov	r5, r1
 80086e0:	4614      	mov	r4, r2
 80086e2:	d510      	bpl.n	8008706 <_svfiprintf_r+0x36>
 80086e4:	690b      	ldr	r3, [r1, #16]
 80086e6:	b973      	cbnz	r3, 8008706 <_svfiprintf_r+0x36>
 80086e8:	2140      	movs	r1, #64	@ 0x40
 80086ea:	f7fd fe99 	bl	8006420 <_malloc_r>
 80086ee:	6028      	str	r0, [r5, #0]
 80086f0:	6128      	str	r0, [r5, #16]
 80086f2:	b930      	cbnz	r0, 8008702 <_svfiprintf_r+0x32>
 80086f4:	230c      	movs	r3, #12
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	f04f 30ff 	mov.w	r0, #4294967295
 80086fc:	b01d      	add	sp, #116	@ 0x74
 80086fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008702:	2340      	movs	r3, #64	@ 0x40
 8008704:	616b      	str	r3, [r5, #20]
 8008706:	2300      	movs	r3, #0
 8008708:	9309      	str	r3, [sp, #36]	@ 0x24
 800870a:	2320      	movs	r3, #32
 800870c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008710:	f8cd 800c 	str.w	r8, [sp, #12]
 8008714:	2330      	movs	r3, #48	@ 0x30
 8008716:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80088b4 <_svfiprintf_r+0x1e4>
 800871a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800871e:	f04f 0901 	mov.w	r9, #1
 8008722:	4623      	mov	r3, r4
 8008724:	469a      	mov	sl, r3
 8008726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800872a:	b10a      	cbz	r2, 8008730 <_svfiprintf_r+0x60>
 800872c:	2a25      	cmp	r2, #37	@ 0x25
 800872e:	d1f9      	bne.n	8008724 <_svfiprintf_r+0x54>
 8008730:	ebba 0b04 	subs.w	fp, sl, r4
 8008734:	d00b      	beq.n	800874e <_svfiprintf_r+0x7e>
 8008736:	465b      	mov	r3, fp
 8008738:	4622      	mov	r2, r4
 800873a:	4629      	mov	r1, r5
 800873c:	4638      	mov	r0, r7
 800873e:	f7ff ff6b 	bl	8008618 <__ssputs_r>
 8008742:	3001      	adds	r0, #1
 8008744:	f000 80a7 	beq.w	8008896 <_svfiprintf_r+0x1c6>
 8008748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800874a:	445a      	add	r2, fp
 800874c:	9209      	str	r2, [sp, #36]	@ 0x24
 800874e:	f89a 3000 	ldrb.w	r3, [sl]
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 809f 	beq.w	8008896 <_svfiprintf_r+0x1c6>
 8008758:	2300      	movs	r3, #0
 800875a:	f04f 32ff 	mov.w	r2, #4294967295
 800875e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008762:	f10a 0a01 	add.w	sl, sl, #1
 8008766:	9304      	str	r3, [sp, #16]
 8008768:	9307      	str	r3, [sp, #28]
 800876a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800876e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008770:	4654      	mov	r4, sl
 8008772:	2205      	movs	r2, #5
 8008774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008778:	484e      	ldr	r0, [pc, #312]	@ (80088b4 <_svfiprintf_r+0x1e4>)
 800877a:	f7f7 fd31 	bl	80001e0 <memchr>
 800877e:	9a04      	ldr	r2, [sp, #16]
 8008780:	b9d8      	cbnz	r0, 80087ba <_svfiprintf_r+0xea>
 8008782:	06d0      	lsls	r0, r2, #27
 8008784:	bf44      	itt	mi
 8008786:	2320      	movmi	r3, #32
 8008788:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800878c:	0711      	lsls	r1, r2, #28
 800878e:	bf44      	itt	mi
 8008790:	232b      	movmi	r3, #43	@ 0x2b
 8008792:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008796:	f89a 3000 	ldrb.w	r3, [sl]
 800879a:	2b2a      	cmp	r3, #42	@ 0x2a
 800879c:	d015      	beq.n	80087ca <_svfiprintf_r+0xfa>
 800879e:	9a07      	ldr	r2, [sp, #28]
 80087a0:	4654      	mov	r4, sl
 80087a2:	2000      	movs	r0, #0
 80087a4:	f04f 0c0a 	mov.w	ip, #10
 80087a8:	4621      	mov	r1, r4
 80087aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087ae:	3b30      	subs	r3, #48	@ 0x30
 80087b0:	2b09      	cmp	r3, #9
 80087b2:	d94b      	bls.n	800884c <_svfiprintf_r+0x17c>
 80087b4:	b1b0      	cbz	r0, 80087e4 <_svfiprintf_r+0x114>
 80087b6:	9207      	str	r2, [sp, #28]
 80087b8:	e014      	b.n	80087e4 <_svfiprintf_r+0x114>
 80087ba:	eba0 0308 	sub.w	r3, r0, r8
 80087be:	fa09 f303 	lsl.w	r3, r9, r3
 80087c2:	4313      	orrs	r3, r2
 80087c4:	9304      	str	r3, [sp, #16]
 80087c6:	46a2      	mov	sl, r4
 80087c8:	e7d2      	b.n	8008770 <_svfiprintf_r+0xa0>
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	1d19      	adds	r1, r3, #4
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	9103      	str	r1, [sp, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	bfbb      	ittet	lt
 80087d6:	425b      	neglt	r3, r3
 80087d8:	f042 0202 	orrlt.w	r2, r2, #2
 80087dc:	9307      	strge	r3, [sp, #28]
 80087de:	9307      	strlt	r3, [sp, #28]
 80087e0:	bfb8      	it	lt
 80087e2:	9204      	strlt	r2, [sp, #16]
 80087e4:	7823      	ldrb	r3, [r4, #0]
 80087e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80087e8:	d10a      	bne.n	8008800 <_svfiprintf_r+0x130>
 80087ea:	7863      	ldrb	r3, [r4, #1]
 80087ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ee:	d132      	bne.n	8008856 <_svfiprintf_r+0x186>
 80087f0:	9b03      	ldr	r3, [sp, #12]
 80087f2:	1d1a      	adds	r2, r3, #4
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	9203      	str	r2, [sp, #12]
 80087f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087fc:	3402      	adds	r4, #2
 80087fe:	9305      	str	r3, [sp, #20]
 8008800:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80088c4 <_svfiprintf_r+0x1f4>
 8008804:	7821      	ldrb	r1, [r4, #0]
 8008806:	2203      	movs	r2, #3
 8008808:	4650      	mov	r0, sl
 800880a:	f7f7 fce9 	bl	80001e0 <memchr>
 800880e:	b138      	cbz	r0, 8008820 <_svfiprintf_r+0x150>
 8008810:	9b04      	ldr	r3, [sp, #16]
 8008812:	eba0 000a 	sub.w	r0, r0, sl
 8008816:	2240      	movs	r2, #64	@ 0x40
 8008818:	4082      	lsls	r2, r0
 800881a:	4313      	orrs	r3, r2
 800881c:	3401      	adds	r4, #1
 800881e:	9304      	str	r3, [sp, #16]
 8008820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008824:	4824      	ldr	r0, [pc, #144]	@ (80088b8 <_svfiprintf_r+0x1e8>)
 8008826:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800882a:	2206      	movs	r2, #6
 800882c:	f7f7 fcd8 	bl	80001e0 <memchr>
 8008830:	2800      	cmp	r0, #0
 8008832:	d036      	beq.n	80088a2 <_svfiprintf_r+0x1d2>
 8008834:	4b21      	ldr	r3, [pc, #132]	@ (80088bc <_svfiprintf_r+0x1ec>)
 8008836:	bb1b      	cbnz	r3, 8008880 <_svfiprintf_r+0x1b0>
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	3307      	adds	r3, #7
 800883c:	f023 0307 	bic.w	r3, r3, #7
 8008840:	3308      	adds	r3, #8
 8008842:	9303      	str	r3, [sp, #12]
 8008844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008846:	4433      	add	r3, r6
 8008848:	9309      	str	r3, [sp, #36]	@ 0x24
 800884a:	e76a      	b.n	8008722 <_svfiprintf_r+0x52>
 800884c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008850:	460c      	mov	r4, r1
 8008852:	2001      	movs	r0, #1
 8008854:	e7a8      	b.n	80087a8 <_svfiprintf_r+0xd8>
 8008856:	2300      	movs	r3, #0
 8008858:	3401      	adds	r4, #1
 800885a:	9305      	str	r3, [sp, #20]
 800885c:	4619      	mov	r1, r3
 800885e:	f04f 0c0a 	mov.w	ip, #10
 8008862:	4620      	mov	r0, r4
 8008864:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008868:	3a30      	subs	r2, #48	@ 0x30
 800886a:	2a09      	cmp	r2, #9
 800886c:	d903      	bls.n	8008876 <_svfiprintf_r+0x1a6>
 800886e:	2b00      	cmp	r3, #0
 8008870:	d0c6      	beq.n	8008800 <_svfiprintf_r+0x130>
 8008872:	9105      	str	r1, [sp, #20]
 8008874:	e7c4      	b.n	8008800 <_svfiprintf_r+0x130>
 8008876:	fb0c 2101 	mla	r1, ip, r1, r2
 800887a:	4604      	mov	r4, r0
 800887c:	2301      	movs	r3, #1
 800887e:	e7f0      	b.n	8008862 <_svfiprintf_r+0x192>
 8008880:	ab03      	add	r3, sp, #12
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	462a      	mov	r2, r5
 8008886:	4b0e      	ldr	r3, [pc, #56]	@ (80088c0 <_svfiprintf_r+0x1f0>)
 8008888:	a904      	add	r1, sp, #16
 800888a:	4638      	mov	r0, r7
 800888c:	f7fd ff22 	bl	80066d4 <_printf_float>
 8008890:	1c42      	adds	r2, r0, #1
 8008892:	4606      	mov	r6, r0
 8008894:	d1d6      	bne.n	8008844 <_svfiprintf_r+0x174>
 8008896:	89ab      	ldrh	r3, [r5, #12]
 8008898:	065b      	lsls	r3, r3, #25
 800889a:	f53f af2d 	bmi.w	80086f8 <_svfiprintf_r+0x28>
 800889e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088a0:	e72c      	b.n	80086fc <_svfiprintf_r+0x2c>
 80088a2:	ab03      	add	r3, sp, #12
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	462a      	mov	r2, r5
 80088a8:	4b05      	ldr	r3, [pc, #20]	@ (80088c0 <_svfiprintf_r+0x1f0>)
 80088aa:	a904      	add	r1, sp, #16
 80088ac:	4638      	mov	r0, r7
 80088ae:	f7fe f9a9 	bl	8006c04 <_printf_i>
 80088b2:	e7ed      	b.n	8008890 <_svfiprintf_r+0x1c0>
 80088b4:	08009842 	.word	0x08009842
 80088b8:	0800984c 	.word	0x0800984c
 80088bc:	080066d5 	.word	0x080066d5
 80088c0:	08008619 	.word	0x08008619
 80088c4:	08009848 	.word	0x08009848

080088c8 <__sflush_r>:
 80088c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d0:	0716      	lsls	r6, r2, #28
 80088d2:	4605      	mov	r5, r0
 80088d4:	460c      	mov	r4, r1
 80088d6:	d454      	bmi.n	8008982 <__sflush_r+0xba>
 80088d8:	684b      	ldr	r3, [r1, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	dc02      	bgt.n	80088e4 <__sflush_r+0x1c>
 80088de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	dd48      	ble.n	8008976 <__sflush_r+0xae>
 80088e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	d045      	beq.n	8008976 <__sflush_r+0xae>
 80088ea:	2300      	movs	r3, #0
 80088ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088f0:	682f      	ldr	r7, [r5, #0]
 80088f2:	6a21      	ldr	r1, [r4, #32]
 80088f4:	602b      	str	r3, [r5, #0]
 80088f6:	d030      	beq.n	800895a <__sflush_r+0x92>
 80088f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	0759      	lsls	r1, r3, #29
 80088fe:	d505      	bpl.n	800890c <__sflush_r+0x44>
 8008900:	6863      	ldr	r3, [r4, #4]
 8008902:	1ad2      	subs	r2, r2, r3
 8008904:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008906:	b10b      	cbz	r3, 800890c <__sflush_r+0x44>
 8008908:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800890a:	1ad2      	subs	r2, r2, r3
 800890c:	2300      	movs	r3, #0
 800890e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008910:	6a21      	ldr	r1, [r4, #32]
 8008912:	4628      	mov	r0, r5
 8008914:	47b0      	blx	r6
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	d106      	bne.n	800892a <__sflush_r+0x62>
 800891c:	6829      	ldr	r1, [r5, #0]
 800891e:	291d      	cmp	r1, #29
 8008920:	d82b      	bhi.n	800897a <__sflush_r+0xb2>
 8008922:	4a2a      	ldr	r2, [pc, #168]	@ (80089cc <__sflush_r+0x104>)
 8008924:	40ca      	lsrs	r2, r1
 8008926:	07d6      	lsls	r6, r2, #31
 8008928:	d527      	bpl.n	800897a <__sflush_r+0xb2>
 800892a:	2200      	movs	r2, #0
 800892c:	6062      	str	r2, [r4, #4]
 800892e:	04d9      	lsls	r1, r3, #19
 8008930:	6922      	ldr	r2, [r4, #16]
 8008932:	6022      	str	r2, [r4, #0]
 8008934:	d504      	bpl.n	8008940 <__sflush_r+0x78>
 8008936:	1c42      	adds	r2, r0, #1
 8008938:	d101      	bne.n	800893e <__sflush_r+0x76>
 800893a:	682b      	ldr	r3, [r5, #0]
 800893c:	b903      	cbnz	r3, 8008940 <__sflush_r+0x78>
 800893e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008942:	602f      	str	r7, [r5, #0]
 8008944:	b1b9      	cbz	r1, 8008976 <__sflush_r+0xae>
 8008946:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800894a:	4299      	cmp	r1, r3
 800894c:	d002      	beq.n	8008954 <__sflush_r+0x8c>
 800894e:	4628      	mov	r0, r5
 8008950:	f7ff fa96 	bl	8007e80 <_free_r>
 8008954:	2300      	movs	r3, #0
 8008956:	6363      	str	r3, [r4, #52]	@ 0x34
 8008958:	e00d      	b.n	8008976 <__sflush_r+0xae>
 800895a:	2301      	movs	r3, #1
 800895c:	4628      	mov	r0, r5
 800895e:	47b0      	blx	r6
 8008960:	4602      	mov	r2, r0
 8008962:	1c50      	adds	r0, r2, #1
 8008964:	d1c9      	bne.n	80088fa <__sflush_r+0x32>
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0c6      	beq.n	80088fa <__sflush_r+0x32>
 800896c:	2b1d      	cmp	r3, #29
 800896e:	d001      	beq.n	8008974 <__sflush_r+0xac>
 8008970:	2b16      	cmp	r3, #22
 8008972:	d11e      	bne.n	80089b2 <__sflush_r+0xea>
 8008974:	602f      	str	r7, [r5, #0]
 8008976:	2000      	movs	r0, #0
 8008978:	e022      	b.n	80089c0 <__sflush_r+0xf8>
 800897a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800897e:	b21b      	sxth	r3, r3
 8008980:	e01b      	b.n	80089ba <__sflush_r+0xf2>
 8008982:	690f      	ldr	r7, [r1, #16]
 8008984:	2f00      	cmp	r7, #0
 8008986:	d0f6      	beq.n	8008976 <__sflush_r+0xae>
 8008988:	0793      	lsls	r3, r2, #30
 800898a:	680e      	ldr	r6, [r1, #0]
 800898c:	bf08      	it	eq
 800898e:	694b      	ldreq	r3, [r1, #20]
 8008990:	600f      	str	r7, [r1, #0]
 8008992:	bf18      	it	ne
 8008994:	2300      	movne	r3, #0
 8008996:	eba6 0807 	sub.w	r8, r6, r7
 800899a:	608b      	str	r3, [r1, #8]
 800899c:	f1b8 0f00 	cmp.w	r8, #0
 80089a0:	dde9      	ble.n	8008976 <__sflush_r+0xae>
 80089a2:	6a21      	ldr	r1, [r4, #32]
 80089a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80089a6:	4643      	mov	r3, r8
 80089a8:	463a      	mov	r2, r7
 80089aa:	4628      	mov	r0, r5
 80089ac:	47b0      	blx	r6
 80089ae:	2800      	cmp	r0, #0
 80089b0:	dc08      	bgt.n	80089c4 <__sflush_r+0xfc>
 80089b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089ba:	81a3      	strh	r3, [r4, #12]
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c4:	4407      	add	r7, r0
 80089c6:	eba8 0800 	sub.w	r8, r8, r0
 80089ca:	e7e7      	b.n	800899c <__sflush_r+0xd4>
 80089cc:	20400001 	.word	0x20400001

080089d0 <_fflush_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	690b      	ldr	r3, [r1, #16]
 80089d4:	4605      	mov	r5, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	b913      	cbnz	r3, 80089e0 <_fflush_r+0x10>
 80089da:	2500      	movs	r5, #0
 80089dc:	4628      	mov	r0, r5
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	b118      	cbz	r0, 80089ea <_fflush_r+0x1a>
 80089e2:	6a03      	ldr	r3, [r0, #32]
 80089e4:	b90b      	cbnz	r3, 80089ea <_fflush_r+0x1a>
 80089e6:	f7fe fab7 	bl	8006f58 <__sinit>
 80089ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0f3      	beq.n	80089da <_fflush_r+0xa>
 80089f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089f4:	07d0      	lsls	r0, r2, #31
 80089f6:	d404      	bmi.n	8008a02 <_fflush_r+0x32>
 80089f8:	0599      	lsls	r1, r3, #22
 80089fa:	d402      	bmi.n	8008a02 <_fflush_r+0x32>
 80089fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089fe:	f7fe fbd4 	bl	80071aa <__retarget_lock_acquire_recursive>
 8008a02:	4628      	mov	r0, r5
 8008a04:	4621      	mov	r1, r4
 8008a06:	f7ff ff5f 	bl	80088c8 <__sflush_r>
 8008a0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a0c:	07da      	lsls	r2, r3, #31
 8008a0e:	4605      	mov	r5, r0
 8008a10:	d4e4      	bmi.n	80089dc <_fflush_r+0xc>
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	059b      	lsls	r3, r3, #22
 8008a16:	d4e1      	bmi.n	80089dc <_fflush_r+0xc>
 8008a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a1a:	f7fe fbc7 	bl	80071ac <__retarget_lock_release_recursive>
 8008a1e:	e7dd      	b.n	80089dc <_fflush_r+0xc>

08008a20 <memmove>:
 8008a20:	4288      	cmp	r0, r1
 8008a22:	b510      	push	{r4, lr}
 8008a24:	eb01 0402 	add.w	r4, r1, r2
 8008a28:	d902      	bls.n	8008a30 <memmove+0x10>
 8008a2a:	4284      	cmp	r4, r0
 8008a2c:	4623      	mov	r3, r4
 8008a2e:	d807      	bhi.n	8008a40 <memmove+0x20>
 8008a30:	1e43      	subs	r3, r0, #1
 8008a32:	42a1      	cmp	r1, r4
 8008a34:	d008      	beq.n	8008a48 <memmove+0x28>
 8008a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a3e:	e7f8      	b.n	8008a32 <memmove+0x12>
 8008a40:	4402      	add	r2, r0
 8008a42:	4601      	mov	r1, r0
 8008a44:	428a      	cmp	r2, r1
 8008a46:	d100      	bne.n	8008a4a <memmove+0x2a>
 8008a48:	bd10      	pop	{r4, pc}
 8008a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a52:	e7f7      	b.n	8008a44 <memmove+0x24>

08008a54 <__assert_func>:
 8008a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a56:	4614      	mov	r4, r2
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4b09      	ldr	r3, [pc, #36]	@ (8008a80 <__assert_func+0x2c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4605      	mov	r5, r0
 8008a60:	68d8      	ldr	r0, [r3, #12]
 8008a62:	b14c      	cbz	r4, 8008a78 <__assert_func+0x24>
 8008a64:	4b07      	ldr	r3, [pc, #28]	@ (8008a84 <__assert_func+0x30>)
 8008a66:	9100      	str	r1, [sp, #0]
 8008a68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a6c:	4906      	ldr	r1, [pc, #24]	@ (8008a88 <__assert_func+0x34>)
 8008a6e:	462b      	mov	r3, r5
 8008a70:	f000 f842 	bl	8008af8 <fiprintf>
 8008a74:	f000 f852 	bl	8008b1c <abort>
 8008a78:	4b04      	ldr	r3, [pc, #16]	@ (8008a8c <__assert_func+0x38>)
 8008a7a:	461c      	mov	r4, r3
 8008a7c:	e7f3      	b.n	8008a66 <__assert_func+0x12>
 8008a7e:	bf00      	nop
 8008a80:	200006ac 	.word	0x200006ac
 8008a84:	0800985d 	.word	0x0800985d
 8008a88:	0800986a 	.word	0x0800986a
 8008a8c:	08009898 	.word	0x08009898

08008a90 <_calloc_r>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	fba1 5402 	umull	r5, r4, r1, r2
 8008a96:	b934      	cbnz	r4, 8008aa6 <_calloc_r+0x16>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7fd fcc1 	bl	8006420 <_malloc_r>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	b928      	cbnz	r0, 8008aae <_calloc_r+0x1e>
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	bd70      	pop	{r4, r5, r6, pc}
 8008aa6:	220c      	movs	r2, #12
 8008aa8:	6002      	str	r2, [r0, #0]
 8008aaa:	2600      	movs	r6, #0
 8008aac:	e7f9      	b.n	8008aa2 <_calloc_r+0x12>
 8008aae:	462a      	mov	r2, r5
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	f7fe faec 	bl	800708e <memset>
 8008ab6:	e7f4      	b.n	8008aa2 <_calloc_r+0x12>

08008ab8 <__ascii_mbtowc>:
 8008ab8:	b082      	sub	sp, #8
 8008aba:	b901      	cbnz	r1, 8008abe <__ascii_mbtowc+0x6>
 8008abc:	a901      	add	r1, sp, #4
 8008abe:	b142      	cbz	r2, 8008ad2 <__ascii_mbtowc+0x1a>
 8008ac0:	b14b      	cbz	r3, 8008ad6 <__ascii_mbtowc+0x1e>
 8008ac2:	7813      	ldrb	r3, [r2, #0]
 8008ac4:	600b      	str	r3, [r1, #0]
 8008ac6:	7812      	ldrb	r2, [r2, #0]
 8008ac8:	1e10      	subs	r0, r2, #0
 8008aca:	bf18      	it	ne
 8008acc:	2001      	movne	r0, #1
 8008ace:	b002      	add	sp, #8
 8008ad0:	4770      	bx	lr
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	e7fb      	b.n	8008ace <__ascii_mbtowc+0x16>
 8008ad6:	f06f 0001 	mvn.w	r0, #1
 8008ada:	e7f8      	b.n	8008ace <__ascii_mbtowc+0x16>

08008adc <__ascii_wctomb>:
 8008adc:	4603      	mov	r3, r0
 8008ade:	4608      	mov	r0, r1
 8008ae0:	b141      	cbz	r1, 8008af4 <__ascii_wctomb+0x18>
 8008ae2:	2aff      	cmp	r2, #255	@ 0xff
 8008ae4:	d904      	bls.n	8008af0 <__ascii_wctomb+0x14>
 8008ae6:	228a      	movs	r2, #138	@ 0x8a
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	f04f 30ff 	mov.w	r0, #4294967295
 8008aee:	4770      	bx	lr
 8008af0:	700a      	strb	r2, [r1, #0]
 8008af2:	2001      	movs	r0, #1
 8008af4:	4770      	bx	lr
	...

08008af8 <fiprintf>:
 8008af8:	b40e      	push	{r1, r2, r3}
 8008afa:	b503      	push	{r0, r1, lr}
 8008afc:	4601      	mov	r1, r0
 8008afe:	ab03      	add	r3, sp, #12
 8008b00:	4805      	ldr	r0, [pc, #20]	@ (8008b18 <fiprintf+0x20>)
 8008b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b06:	6800      	ldr	r0, [r0, #0]
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	f000 f837 	bl	8008b7c <_vfiprintf_r>
 8008b0e:	b002      	add	sp, #8
 8008b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b14:	b003      	add	sp, #12
 8008b16:	4770      	bx	lr
 8008b18:	200006ac 	.word	0x200006ac

08008b1c <abort>:
 8008b1c:	b508      	push	{r3, lr}
 8008b1e:	2006      	movs	r0, #6
 8008b20:	f000 fa00 	bl	8008f24 <raise>
 8008b24:	2001      	movs	r0, #1
 8008b26:	f000 fadd 	bl	80090e4 <_exit>

08008b2a <__sfputc_r>:
 8008b2a:	6893      	ldr	r3, [r2, #8]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	b410      	push	{r4}
 8008b32:	6093      	str	r3, [r2, #8]
 8008b34:	da08      	bge.n	8008b48 <__sfputc_r+0x1e>
 8008b36:	6994      	ldr	r4, [r2, #24]
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	db01      	blt.n	8008b40 <__sfputc_r+0x16>
 8008b3c:	290a      	cmp	r1, #10
 8008b3e:	d103      	bne.n	8008b48 <__sfputc_r+0x1e>
 8008b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b44:	f000 b932 	b.w	8008dac <__swbuf_r>
 8008b48:	6813      	ldr	r3, [r2, #0]
 8008b4a:	1c58      	adds	r0, r3, #1
 8008b4c:	6010      	str	r0, [r2, #0]
 8008b4e:	7019      	strb	r1, [r3, #0]
 8008b50:	4608      	mov	r0, r1
 8008b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <__sfputs_r>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	460f      	mov	r7, r1
 8008b5e:	4614      	mov	r4, r2
 8008b60:	18d5      	adds	r5, r2, r3
 8008b62:	42ac      	cmp	r4, r5
 8008b64:	d101      	bne.n	8008b6a <__sfputs_r+0x12>
 8008b66:	2000      	movs	r0, #0
 8008b68:	e007      	b.n	8008b7a <__sfputs_r+0x22>
 8008b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b6e:	463a      	mov	r2, r7
 8008b70:	4630      	mov	r0, r6
 8008b72:	f7ff ffda 	bl	8008b2a <__sfputc_r>
 8008b76:	1c43      	adds	r3, r0, #1
 8008b78:	d1f3      	bne.n	8008b62 <__sfputs_r+0xa>
 8008b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b7c <_vfiprintf_r>:
 8008b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b80:	460d      	mov	r5, r1
 8008b82:	b09d      	sub	sp, #116	@ 0x74
 8008b84:	4614      	mov	r4, r2
 8008b86:	4698      	mov	r8, r3
 8008b88:	4606      	mov	r6, r0
 8008b8a:	b118      	cbz	r0, 8008b94 <_vfiprintf_r+0x18>
 8008b8c:	6a03      	ldr	r3, [r0, #32]
 8008b8e:	b90b      	cbnz	r3, 8008b94 <_vfiprintf_r+0x18>
 8008b90:	f7fe f9e2 	bl	8006f58 <__sinit>
 8008b94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b96:	07d9      	lsls	r1, r3, #31
 8008b98:	d405      	bmi.n	8008ba6 <_vfiprintf_r+0x2a>
 8008b9a:	89ab      	ldrh	r3, [r5, #12]
 8008b9c:	059a      	lsls	r2, r3, #22
 8008b9e:	d402      	bmi.n	8008ba6 <_vfiprintf_r+0x2a>
 8008ba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ba2:	f7fe fb02 	bl	80071aa <__retarget_lock_acquire_recursive>
 8008ba6:	89ab      	ldrh	r3, [r5, #12]
 8008ba8:	071b      	lsls	r3, r3, #28
 8008baa:	d501      	bpl.n	8008bb0 <_vfiprintf_r+0x34>
 8008bac:	692b      	ldr	r3, [r5, #16]
 8008bae:	b99b      	cbnz	r3, 8008bd8 <_vfiprintf_r+0x5c>
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	f000 f938 	bl	8008e28 <__swsetup_r>
 8008bb8:	b170      	cbz	r0, 8008bd8 <_vfiprintf_r+0x5c>
 8008bba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bbc:	07dc      	lsls	r4, r3, #31
 8008bbe:	d504      	bpl.n	8008bca <_vfiprintf_r+0x4e>
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	b01d      	add	sp, #116	@ 0x74
 8008bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bca:	89ab      	ldrh	r3, [r5, #12]
 8008bcc:	0598      	lsls	r0, r3, #22
 8008bce:	d4f7      	bmi.n	8008bc0 <_vfiprintf_r+0x44>
 8008bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bd2:	f7fe faeb 	bl	80071ac <__retarget_lock_release_recursive>
 8008bd6:	e7f3      	b.n	8008bc0 <_vfiprintf_r+0x44>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bdc:	2320      	movs	r3, #32
 8008bde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008be2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008be6:	2330      	movs	r3, #48	@ 0x30
 8008be8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d98 <_vfiprintf_r+0x21c>
 8008bec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bf0:	f04f 0901 	mov.w	r9, #1
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	469a      	mov	sl, r3
 8008bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bfc:	b10a      	cbz	r2, 8008c02 <_vfiprintf_r+0x86>
 8008bfe:	2a25      	cmp	r2, #37	@ 0x25
 8008c00:	d1f9      	bne.n	8008bf6 <_vfiprintf_r+0x7a>
 8008c02:	ebba 0b04 	subs.w	fp, sl, r4
 8008c06:	d00b      	beq.n	8008c20 <_vfiprintf_r+0xa4>
 8008c08:	465b      	mov	r3, fp
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f7ff ffa2 	bl	8008b58 <__sfputs_r>
 8008c14:	3001      	adds	r0, #1
 8008c16:	f000 80a7 	beq.w	8008d68 <_vfiprintf_r+0x1ec>
 8008c1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c1c:	445a      	add	r2, fp
 8008c1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c20:	f89a 3000 	ldrb.w	r3, [sl]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 809f 	beq.w	8008d68 <_vfiprintf_r+0x1ec>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c34:	f10a 0a01 	add.w	sl, sl, #1
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	9307      	str	r3, [sp, #28]
 8008c3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c40:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c42:	4654      	mov	r4, sl
 8008c44:	2205      	movs	r2, #5
 8008c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4a:	4853      	ldr	r0, [pc, #332]	@ (8008d98 <_vfiprintf_r+0x21c>)
 8008c4c:	f7f7 fac8 	bl	80001e0 <memchr>
 8008c50:	9a04      	ldr	r2, [sp, #16]
 8008c52:	b9d8      	cbnz	r0, 8008c8c <_vfiprintf_r+0x110>
 8008c54:	06d1      	lsls	r1, r2, #27
 8008c56:	bf44      	itt	mi
 8008c58:	2320      	movmi	r3, #32
 8008c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c5e:	0713      	lsls	r3, r2, #28
 8008c60:	bf44      	itt	mi
 8008c62:	232b      	movmi	r3, #43	@ 0x2b
 8008c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c68:	f89a 3000 	ldrb.w	r3, [sl]
 8008c6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c6e:	d015      	beq.n	8008c9c <_vfiprintf_r+0x120>
 8008c70:	9a07      	ldr	r2, [sp, #28]
 8008c72:	4654      	mov	r4, sl
 8008c74:	2000      	movs	r0, #0
 8008c76:	f04f 0c0a 	mov.w	ip, #10
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c80:	3b30      	subs	r3, #48	@ 0x30
 8008c82:	2b09      	cmp	r3, #9
 8008c84:	d94b      	bls.n	8008d1e <_vfiprintf_r+0x1a2>
 8008c86:	b1b0      	cbz	r0, 8008cb6 <_vfiprintf_r+0x13a>
 8008c88:	9207      	str	r2, [sp, #28]
 8008c8a:	e014      	b.n	8008cb6 <_vfiprintf_r+0x13a>
 8008c8c:	eba0 0308 	sub.w	r3, r0, r8
 8008c90:	fa09 f303 	lsl.w	r3, r9, r3
 8008c94:	4313      	orrs	r3, r2
 8008c96:	9304      	str	r3, [sp, #16]
 8008c98:	46a2      	mov	sl, r4
 8008c9a:	e7d2      	b.n	8008c42 <_vfiprintf_r+0xc6>
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	1d19      	adds	r1, r3, #4
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	9103      	str	r1, [sp, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bfbb      	ittet	lt
 8008ca8:	425b      	neglt	r3, r3
 8008caa:	f042 0202 	orrlt.w	r2, r2, #2
 8008cae:	9307      	strge	r3, [sp, #28]
 8008cb0:	9307      	strlt	r3, [sp, #28]
 8008cb2:	bfb8      	it	lt
 8008cb4:	9204      	strlt	r2, [sp, #16]
 8008cb6:	7823      	ldrb	r3, [r4, #0]
 8008cb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cba:	d10a      	bne.n	8008cd2 <_vfiprintf_r+0x156>
 8008cbc:	7863      	ldrb	r3, [r4, #1]
 8008cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cc0:	d132      	bne.n	8008d28 <_vfiprintf_r+0x1ac>
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	1d1a      	adds	r2, r3, #4
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	9203      	str	r2, [sp, #12]
 8008cca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cce:	3402      	adds	r4, #2
 8008cd0:	9305      	str	r3, [sp, #20]
 8008cd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008da8 <_vfiprintf_r+0x22c>
 8008cd6:	7821      	ldrb	r1, [r4, #0]
 8008cd8:	2203      	movs	r2, #3
 8008cda:	4650      	mov	r0, sl
 8008cdc:	f7f7 fa80 	bl	80001e0 <memchr>
 8008ce0:	b138      	cbz	r0, 8008cf2 <_vfiprintf_r+0x176>
 8008ce2:	9b04      	ldr	r3, [sp, #16]
 8008ce4:	eba0 000a 	sub.w	r0, r0, sl
 8008ce8:	2240      	movs	r2, #64	@ 0x40
 8008cea:	4082      	lsls	r2, r0
 8008cec:	4313      	orrs	r3, r2
 8008cee:	3401      	adds	r4, #1
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf6:	4829      	ldr	r0, [pc, #164]	@ (8008d9c <_vfiprintf_r+0x220>)
 8008cf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cfc:	2206      	movs	r2, #6
 8008cfe:	f7f7 fa6f 	bl	80001e0 <memchr>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d03f      	beq.n	8008d86 <_vfiprintf_r+0x20a>
 8008d06:	4b26      	ldr	r3, [pc, #152]	@ (8008da0 <_vfiprintf_r+0x224>)
 8008d08:	bb1b      	cbnz	r3, 8008d52 <_vfiprintf_r+0x1d6>
 8008d0a:	9b03      	ldr	r3, [sp, #12]
 8008d0c:	3307      	adds	r3, #7
 8008d0e:	f023 0307 	bic.w	r3, r3, #7
 8008d12:	3308      	adds	r3, #8
 8008d14:	9303      	str	r3, [sp, #12]
 8008d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d18:	443b      	add	r3, r7
 8008d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d1c:	e76a      	b.n	8008bf4 <_vfiprintf_r+0x78>
 8008d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d22:	460c      	mov	r4, r1
 8008d24:	2001      	movs	r0, #1
 8008d26:	e7a8      	b.n	8008c7a <_vfiprintf_r+0xfe>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	3401      	adds	r4, #1
 8008d2c:	9305      	str	r3, [sp, #20]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	f04f 0c0a 	mov.w	ip, #10
 8008d34:	4620      	mov	r0, r4
 8008d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d3a:	3a30      	subs	r2, #48	@ 0x30
 8008d3c:	2a09      	cmp	r2, #9
 8008d3e:	d903      	bls.n	8008d48 <_vfiprintf_r+0x1cc>
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0c6      	beq.n	8008cd2 <_vfiprintf_r+0x156>
 8008d44:	9105      	str	r1, [sp, #20]
 8008d46:	e7c4      	b.n	8008cd2 <_vfiprintf_r+0x156>
 8008d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e7f0      	b.n	8008d34 <_vfiprintf_r+0x1b8>
 8008d52:	ab03      	add	r3, sp, #12
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	462a      	mov	r2, r5
 8008d58:	4b12      	ldr	r3, [pc, #72]	@ (8008da4 <_vfiprintf_r+0x228>)
 8008d5a:	a904      	add	r1, sp, #16
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f7fd fcb9 	bl	80066d4 <_printf_float>
 8008d62:	4607      	mov	r7, r0
 8008d64:	1c78      	adds	r0, r7, #1
 8008d66:	d1d6      	bne.n	8008d16 <_vfiprintf_r+0x19a>
 8008d68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d6a:	07d9      	lsls	r1, r3, #31
 8008d6c:	d405      	bmi.n	8008d7a <_vfiprintf_r+0x1fe>
 8008d6e:	89ab      	ldrh	r3, [r5, #12]
 8008d70:	059a      	lsls	r2, r3, #22
 8008d72:	d402      	bmi.n	8008d7a <_vfiprintf_r+0x1fe>
 8008d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d76:	f7fe fa19 	bl	80071ac <__retarget_lock_release_recursive>
 8008d7a:	89ab      	ldrh	r3, [r5, #12]
 8008d7c:	065b      	lsls	r3, r3, #25
 8008d7e:	f53f af1f 	bmi.w	8008bc0 <_vfiprintf_r+0x44>
 8008d82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d84:	e71e      	b.n	8008bc4 <_vfiprintf_r+0x48>
 8008d86:	ab03      	add	r3, sp, #12
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	4b05      	ldr	r3, [pc, #20]	@ (8008da4 <_vfiprintf_r+0x228>)
 8008d8e:	a904      	add	r1, sp, #16
 8008d90:	4630      	mov	r0, r6
 8008d92:	f7fd ff37 	bl	8006c04 <_printf_i>
 8008d96:	e7e4      	b.n	8008d62 <_vfiprintf_r+0x1e6>
 8008d98:	08009842 	.word	0x08009842
 8008d9c:	0800984c 	.word	0x0800984c
 8008da0:	080066d5 	.word	0x080066d5
 8008da4:	08008b59 	.word	0x08008b59
 8008da8:	08009848 	.word	0x08009848

08008dac <__swbuf_r>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	460e      	mov	r6, r1
 8008db0:	4614      	mov	r4, r2
 8008db2:	4605      	mov	r5, r0
 8008db4:	b118      	cbz	r0, 8008dbe <__swbuf_r+0x12>
 8008db6:	6a03      	ldr	r3, [r0, #32]
 8008db8:	b90b      	cbnz	r3, 8008dbe <__swbuf_r+0x12>
 8008dba:	f7fe f8cd 	bl	8006f58 <__sinit>
 8008dbe:	69a3      	ldr	r3, [r4, #24]
 8008dc0:	60a3      	str	r3, [r4, #8]
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	071a      	lsls	r2, r3, #28
 8008dc6:	d501      	bpl.n	8008dcc <__swbuf_r+0x20>
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	b943      	cbnz	r3, 8008dde <__swbuf_r+0x32>
 8008dcc:	4621      	mov	r1, r4
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f000 f82a 	bl	8008e28 <__swsetup_r>
 8008dd4:	b118      	cbz	r0, 8008dde <__swbuf_r+0x32>
 8008dd6:	f04f 37ff 	mov.w	r7, #4294967295
 8008dda:	4638      	mov	r0, r7
 8008ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	6922      	ldr	r2, [r4, #16]
 8008de2:	1a98      	subs	r0, r3, r2
 8008de4:	6963      	ldr	r3, [r4, #20]
 8008de6:	b2f6      	uxtb	r6, r6
 8008de8:	4283      	cmp	r3, r0
 8008dea:	4637      	mov	r7, r6
 8008dec:	dc05      	bgt.n	8008dfa <__swbuf_r+0x4e>
 8008dee:	4621      	mov	r1, r4
 8008df0:	4628      	mov	r0, r5
 8008df2:	f7ff fded 	bl	80089d0 <_fflush_r>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d1ed      	bne.n	8008dd6 <__swbuf_r+0x2a>
 8008dfa:	68a3      	ldr	r3, [r4, #8]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	60a3      	str	r3, [r4, #8]
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	1c5a      	adds	r2, r3, #1
 8008e04:	6022      	str	r2, [r4, #0]
 8008e06:	701e      	strb	r6, [r3, #0]
 8008e08:	6962      	ldr	r2, [r4, #20]
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d004      	beq.n	8008e1a <__swbuf_r+0x6e>
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	07db      	lsls	r3, r3, #31
 8008e14:	d5e1      	bpl.n	8008dda <__swbuf_r+0x2e>
 8008e16:	2e0a      	cmp	r6, #10
 8008e18:	d1df      	bne.n	8008dda <__swbuf_r+0x2e>
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f7ff fdd7 	bl	80089d0 <_fflush_r>
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d0d9      	beq.n	8008dda <__swbuf_r+0x2e>
 8008e26:	e7d6      	b.n	8008dd6 <__swbuf_r+0x2a>

08008e28 <__swsetup_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4b29      	ldr	r3, [pc, #164]	@ (8008ed0 <__swsetup_r+0xa8>)
 8008e2c:	4605      	mov	r5, r0
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	460c      	mov	r4, r1
 8008e32:	b118      	cbz	r0, 8008e3c <__swsetup_r+0x14>
 8008e34:	6a03      	ldr	r3, [r0, #32]
 8008e36:	b90b      	cbnz	r3, 8008e3c <__swsetup_r+0x14>
 8008e38:	f7fe f88e 	bl	8006f58 <__sinit>
 8008e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e40:	0719      	lsls	r1, r3, #28
 8008e42:	d422      	bmi.n	8008e8a <__swsetup_r+0x62>
 8008e44:	06da      	lsls	r2, r3, #27
 8008e46:	d407      	bmi.n	8008e58 <__swsetup_r+0x30>
 8008e48:	2209      	movs	r2, #9
 8008e4a:	602a      	str	r2, [r5, #0]
 8008e4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e50:	81a3      	strh	r3, [r4, #12]
 8008e52:	f04f 30ff 	mov.w	r0, #4294967295
 8008e56:	e033      	b.n	8008ec0 <__swsetup_r+0x98>
 8008e58:	0758      	lsls	r0, r3, #29
 8008e5a:	d512      	bpl.n	8008e82 <__swsetup_r+0x5a>
 8008e5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e5e:	b141      	cbz	r1, 8008e72 <__swsetup_r+0x4a>
 8008e60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e64:	4299      	cmp	r1, r3
 8008e66:	d002      	beq.n	8008e6e <__swsetup_r+0x46>
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f7ff f809 	bl	8007e80 <_free_r>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e78:	81a3      	strh	r3, [r4, #12]
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	6063      	str	r3, [r4, #4]
 8008e7e:	6923      	ldr	r3, [r4, #16]
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	f043 0308 	orr.w	r3, r3, #8
 8008e88:	81a3      	strh	r3, [r4, #12]
 8008e8a:	6923      	ldr	r3, [r4, #16]
 8008e8c:	b94b      	cbnz	r3, 8008ea2 <__swsetup_r+0x7a>
 8008e8e:	89a3      	ldrh	r3, [r4, #12]
 8008e90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e98:	d003      	beq.n	8008ea2 <__swsetup_r+0x7a>
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f000 f883 	bl	8008fa8 <__smakebuf_r>
 8008ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea6:	f013 0201 	ands.w	r2, r3, #1
 8008eaa:	d00a      	beq.n	8008ec2 <__swsetup_r+0x9a>
 8008eac:	2200      	movs	r2, #0
 8008eae:	60a2      	str	r2, [r4, #8]
 8008eb0:	6962      	ldr	r2, [r4, #20]
 8008eb2:	4252      	negs	r2, r2
 8008eb4:	61a2      	str	r2, [r4, #24]
 8008eb6:	6922      	ldr	r2, [r4, #16]
 8008eb8:	b942      	cbnz	r2, 8008ecc <__swsetup_r+0xa4>
 8008eba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ebe:	d1c5      	bne.n	8008e4c <__swsetup_r+0x24>
 8008ec0:	bd38      	pop	{r3, r4, r5, pc}
 8008ec2:	0799      	lsls	r1, r3, #30
 8008ec4:	bf58      	it	pl
 8008ec6:	6962      	ldrpl	r2, [r4, #20]
 8008ec8:	60a2      	str	r2, [r4, #8]
 8008eca:	e7f4      	b.n	8008eb6 <__swsetup_r+0x8e>
 8008ecc:	2000      	movs	r0, #0
 8008ece:	e7f7      	b.n	8008ec0 <__swsetup_r+0x98>
 8008ed0:	200006ac 	.word	0x200006ac

08008ed4 <_raise_r>:
 8008ed4:	291f      	cmp	r1, #31
 8008ed6:	b538      	push	{r3, r4, r5, lr}
 8008ed8:	4605      	mov	r5, r0
 8008eda:	460c      	mov	r4, r1
 8008edc:	d904      	bls.n	8008ee8 <_raise_r+0x14>
 8008ede:	2316      	movs	r3, #22
 8008ee0:	6003      	str	r3, [r0, #0]
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008eea:	b112      	cbz	r2, 8008ef2 <_raise_r+0x1e>
 8008eec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ef0:	b94b      	cbnz	r3, 8008f06 <_raise_r+0x32>
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f000 f830 	bl	8008f58 <_getpid_r>
 8008ef8:	4622      	mov	r2, r4
 8008efa:	4601      	mov	r1, r0
 8008efc:	4628      	mov	r0, r5
 8008efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f02:	f000 b817 	b.w	8008f34 <_kill_r>
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d00a      	beq.n	8008f20 <_raise_r+0x4c>
 8008f0a:	1c59      	adds	r1, r3, #1
 8008f0c:	d103      	bne.n	8008f16 <_raise_r+0x42>
 8008f0e:	2316      	movs	r3, #22
 8008f10:	6003      	str	r3, [r0, #0]
 8008f12:	2001      	movs	r0, #1
 8008f14:	e7e7      	b.n	8008ee6 <_raise_r+0x12>
 8008f16:	2100      	movs	r1, #0
 8008f18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	4798      	blx	r3
 8008f20:	2000      	movs	r0, #0
 8008f22:	e7e0      	b.n	8008ee6 <_raise_r+0x12>

08008f24 <raise>:
 8008f24:	4b02      	ldr	r3, [pc, #8]	@ (8008f30 <raise+0xc>)
 8008f26:	4601      	mov	r1, r0
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	f7ff bfd3 	b.w	8008ed4 <_raise_r>
 8008f2e:	bf00      	nop
 8008f30:	200006ac 	.word	0x200006ac

08008f34 <_kill_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4d07      	ldr	r5, [pc, #28]	@ (8008f54 <_kill_r+0x20>)
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	4611      	mov	r1, r2
 8008f40:	602b      	str	r3, [r5, #0]
 8008f42:	f000 f8af 	bl	80090a4 <_kill>
 8008f46:	1c43      	adds	r3, r0, #1
 8008f48:	d102      	bne.n	8008f50 <_kill_r+0x1c>
 8008f4a:	682b      	ldr	r3, [r5, #0]
 8008f4c:	b103      	cbz	r3, 8008f50 <_kill_r+0x1c>
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	bd38      	pop	{r3, r4, r5, pc}
 8008f52:	bf00      	nop
 8008f54:	20000be0 	.word	0x20000be0

08008f58 <_getpid_r>:
 8008f58:	f000 b894 	b.w	8009084 <_getpid>

08008f5c <__swhatbuf_r>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	460c      	mov	r4, r1
 8008f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f64:	2900      	cmp	r1, #0
 8008f66:	b096      	sub	sp, #88	@ 0x58
 8008f68:	4615      	mov	r5, r2
 8008f6a:	461e      	mov	r6, r3
 8008f6c:	da0d      	bge.n	8008f8a <__swhatbuf_r+0x2e>
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f74:	f04f 0100 	mov.w	r1, #0
 8008f78:	bf14      	ite	ne
 8008f7a:	2340      	movne	r3, #64	@ 0x40
 8008f7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f80:	2000      	movs	r0, #0
 8008f82:	6031      	str	r1, [r6, #0]
 8008f84:	602b      	str	r3, [r5, #0]
 8008f86:	b016      	add	sp, #88	@ 0x58
 8008f88:	bd70      	pop	{r4, r5, r6, pc}
 8008f8a:	466a      	mov	r2, sp
 8008f8c:	f000 f848 	bl	8009020 <_fstat_r>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	dbec      	blt.n	8008f6e <__swhatbuf_r+0x12>
 8008f94:	9901      	ldr	r1, [sp, #4]
 8008f96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f9e:	4259      	negs	r1, r3
 8008fa0:	4159      	adcs	r1, r3
 8008fa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fa6:	e7eb      	b.n	8008f80 <__swhatbuf_r+0x24>

08008fa8 <__smakebuf_r>:
 8008fa8:	898b      	ldrh	r3, [r1, #12]
 8008faa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fac:	079d      	lsls	r5, r3, #30
 8008fae:	4606      	mov	r6, r0
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	d507      	bpl.n	8008fc4 <__smakebuf_r+0x1c>
 8008fb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	6123      	str	r3, [r4, #16]
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	6163      	str	r3, [r4, #20]
 8008fc0:	b003      	add	sp, #12
 8008fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fc4:	ab01      	add	r3, sp, #4
 8008fc6:	466a      	mov	r2, sp
 8008fc8:	f7ff ffc8 	bl	8008f5c <__swhatbuf_r>
 8008fcc:	9f00      	ldr	r7, [sp, #0]
 8008fce:	4605      	mov	r5, r0
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f7fd fa24 	bl	8006420 <_malloc_r>
 8008fd8:	b948      	cbnz	r0, 8008fee <__smakebuf_r+0x46>
 8008fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fde:	059a      	lsls	r2, r3, #22
 8008fe0:	d4ee      	bmi.n	8008fc0 <__smakebuf_r+0x18>
 8008fe2:	f023 0303 	bic.w	r3, r3, #3
 8008fe6:	f043 0302 	orr.w	r3, r3, #2
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	e7e2      	b.n	8008fb4 <__smakebuf_r+0xc>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	6020      	str	r0, [r4, #0]
 8008ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	9b01      	ldr	r3, [sp, #4]
 8008ffa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ffe:	b15b      	cbz	r3, 8009018 <__smakebuf_r+0x70>
 8009000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009004:	4630      	mov	r0, r6
 8009006:	f000 f81d 	bl	8009044 <_isatty_r>
 800900a:	b128      	cbz	r0, 8009018 <__smakebuf_r+0x70>
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	f023 0303 	bic.w	r3, r3, #3
 8009012:	f043 0301 	orr.w	r3, r3, #1
 8009016:	81a3      	strh	r3, [r4, #12]
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	431d      	orrs	r5, r3
 800901c:	81a5      	strh	r5, [r4, #12]
 800901e:	e7cf      	b.n	8008fc0 <__smakebuf_r+0x18>

08009020 <_fstat_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d07      	ldr	r5, [pc, #28]	@ (8009040 <_fstat_r+0x20>)
 8009024:	2300      	movs	r3, #0
 8009026:	4604      	mov	r4, r0
 8009028:	4608      	mov	r0, r1
 800902a:	4611      	mov	r1, r2
 800902c:	602b      	str	r3, [r5, #0]
 800902e:	f000 f821 	bl	8009074 <_fstat>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	d102      	bne.n	800903c <_fstat_r+0x1c>
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	b103      	cbz	r3, 800903c <_fstat_r+0x1c>
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	bd38      	pop	{r3, r4, r5, pc}
 800903e:	bf00      	nop
 8009040:	20000be0 	.word	0x20000be0

08009044 <_isatty_r>:
 8009044:	b538      	push	{r3, r4, r5, lr}
 8009046:	4d06      	ldr	r5, [pc, #24]	@ (8009060 <_isatty_r+0x1c>)
 8009048:	2300      	movs	r3, #0
 800904a:	4604      	mov	r4, r0
 800904c:	4608      	mov	r0, r1
 800904e:	602b      	str	r3, [r5, #0]
 8009050:	f000 f820 	bl	8009094 <_isatty>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d102      	bne.n	800905e <_isatty_r+0x1a>
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	b103      	cbz	r3, 800905e <_isatty_r+0x1a>
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	20000be0 	.word	0x20000be0

08009064 <_close>:
 8009064:	4b02      	ldr	r3, [pc, #8]	@ (8009070 <_close+0xc>)
 8009066:	2258      	movs	r2, #88	@ 0x58
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	f04f 30ff 	mov.w	r0, #4294967295
 800906e:	4770      	bx	lr
 8009070:	20000be0 	.word	0x20000be0

08009074 <_fstat>:
 8009074:	4b02      	ldr	r3, [pc, #8]	@ (8009080 <_fstat+0xc>)
 8009076:	2258      	movs	r2, #88	@ 0x58
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	f04f 30ff 	mov.w	r0, #4294967295
 800907e:	4770      	bx	lr
 8009080:	20000be0 	.word	0x20000be0

08009084 <_getpid>:
 8009084:	4b02      	ldr	r3, [pc, #8]	@ (8009090 <_getpid+0xc>)
 8009086:	2258      	movs	r2, #88	@ 0x58
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	f04f 30ff 	mov.w	r0, #4294967295
 800908e:	4770      	bx	lr
 8009090:	20000be0 	.word	0x20000be0

08009094 <_isatty>:
 8009094:	4b02      	ldr	r3, [pc, #8]	@ (80090a0 <_isatty+0xc>)
 8009096:	2258      	movs	r2, #88	@ 0x58
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	2000      	movs	r0, #0
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	20000be0 	.word	0x20000be0

080090a4 <_kill>:
 80090a4:	4b02      	ldr	r3, [pc, #8]	@ (80090b0 <_kill+0xc>)
 80090a6:	2258      	movs	r2, #88	@ 0x58
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295
 80090ae:	4770      	bx	lr
 80090b0:	20000be0 	.word	0x20000be0

080090b4 <_lseek>:
 80090b4:	4b02      	ldr	r3, [pc, #8]	@ (80090c0 <_lseek+0xc>)
 80090b6:	2258      	movs	r2, #88	@ 0x58
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	f04f 30ff 	mov.w	r0, #4294967295
 80090be:	4770      	bx	lr
 80090c0:	20000be0 	.word	0x20000be0

080090c4 <_read>:
 80090c4:	4b02      	ldr	r3, [pc, #8]	@ (80090d0 <_read+0xc>)
 80090c6:	2258      	movs	r2, #88	@ 0x58
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	f04f 30ff 	mov.w	r0, #4294967295
 80090ce:	4770      	bx	lr
 80090d0:	20000be0 	.word	0x20000be0

080090d4 <_write>:
 80090d4:	4b02      	ldr	r3, [pc, #8]	@ (80090e0 <_write+0xc>)
 80090d6:	2258      	movs	r2, #88	@ 0x58
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	f04f 30ff 	mov.w	r0, #4294967295
 80090de:	4770      	bx	lr
 80090e0:	20000be0 	.word	0x20000be0

080090e4 <_exit>:
 80090e4:	e7fe      	b.n	80090e4 <_exit>
	...

080090e8 <_init>:
 80090e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ea:	bf00      	nop
 80090ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ee:	bc08      	pop	{r3}
 80090f0:	469e      	mov	lr, r3
 80090f2:	4770      	bx	lr

080090f4 <_fini>:
 80090f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f6:	bf00      	nop
 80090f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090fa:	bc08      	pop	{r3}
 80090fc:	469e      	mov	lr, r3
 80090fe:	4770      	bx	lr
